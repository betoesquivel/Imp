Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> config body
Rule 2     start_quadruple -> <empty>
Rule 3     config -> configdirective config
Rule 4     config -> empty
Rule 5     configdirective -> VARSCONFIG = options
Rule 6     configdirective -> DECISIONSCONFIG = options
Rule 7     configdirective -> COMPLEXITYCONFIG = optionsyesno
Rule 8     options -> SOME
Rule 9     options -> ALL
Rule 10    options -> MOST
Rule 11    options -> NONE
Rule 12    optionsyesno -> YES
Rule 13    optionsyesno -> NO
Rule 14    body -> declarationsOpt start_quadruple funcsOpt main funcsOpt
Rule 15    funcsOpt -> suprafunc funcsOpt
Rule 16    funcsOpt -> empty
Rule 17    declarationsOpt -> declaration declarationsOpt
Rule 18    declarationsOpt -> empty
Rule 19    declaration -> type push_type declarationB declarationC
Rule 20    declarationB -> ID push_operand dimensionsOpt
Rule 21    push_operand -> <empty>
Rule 22    push_type -> <empty>
Rule 23    repush_type -> <empty>
Rule 24    push_operator -> <empty>
Rule 25    quadruple_assign -> <empty>
Rule 26    declarationC -> = push_operator hyperexpression quadruple_assign declarationD
Rule 27    declarationC -> , repush_type declarationB declarationC
Rule 28    declarationC -> ;
Rule 29    declarationD -> , repush_type declarationB declarationC
Rule 30    declarationD -> ;
Rule 31    main -> MAIN ( ) seen_main block
Rule 32    seen_main -> <empty>
Rule 33    suprafunc -> func block
Rule 34    func -> DEF returntype ID ( paramsOpt )
Rule 35    paramsOpt -> params paramsB
Rule 36    paramsOpt -> empty
Rule 37    block -> { instructionsOpt }
Rule 38    instructionsOpt -> instruction instructionsOpt
Rule 39    instructionsOpt -> empty
Rule 40    id_record_line -> ID
Rule 41    assign -> id_record_line push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign
Rule 42    assignB -> dimensionsOpt = push_operator hyperexpression quadruple_assign
Rule 43    dimensionsOpt -> dimensions
Rule 44    dimensionsOpt -> empty
Rule 45    condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple
Rule 46    else -> ELSE elsecondition_quadruple block
Rule 47    else -> empty
Rule 48    condition_quadruple -> <empty>
Rule 49    elsecondition_quadruple -> <empty>
Rule 50    endcondition_quadruple -> <empty>
Rule 51    instruction -> assignfunccall ;
Rule 52    instruction -> output ;
Rule 53    instruction -> return ;
Rule 54    instruction -> read ;
Rule 55    instruction -> declaration
Rule 56    instruction -> condition
Rule 57    instruction -> whileloop
Rule 58    instruction -> forloop
Rule 59    instruction -> localdirective
Rule 60    assignfunccall -> id_record_line push_operand assignfunccallB
Rule 61    pop_operand -> <empty>
Rule 62    assignfunccallB -> ( pop_operand seen_a_funccall funccallB funccallC
Rule 63    assignfunccallB -> assignB
Rule 64    seen_a_funccall -> <empty>
Rule 65    localdirective -> localvardirective
Rule 66    localdirective -> localdecisiondirective
Rule 67    localdirective -> localmsgdirective
Rule 68    hyperexpression -> superexpression hyperexpressionB
Rule 69    hyperexpressionB -> OR push_operator hyperexpression
Rule 70    hyperexpressionB -> empty
Rule 71    superexpression -> expression superexpressionB
Rule 72    superexpressionB -> AND push_operator superexpression
Rule 73    superexpressionB -> empty
Rule 74    expression -> exp expressionB
Rule 75    expressionB -> < push_operator exp
Rule 76    expressionB -> > push_operator exp
Rule 77    expressionB -> DIFF push_operator exp
Rule 78    expressionB -> EQ push_operator exp
Rule 79    expressionB -> LTEQ push_operator exp
Rule 80    expressionB -> GTEQ push_operator exp
Rule 81    expressionB -> empty
Rule 82    exp -> term seen_term expB
Rule 83    seen_term -> <empty>
Rule 84    expB -> - push_operator exp
Rule 85    expB -> + push_operator exp
Rule 86    expB -> empty
Rule 87    term -> factor seen_factor termB
Rule 88    seen_factor -> <empty>
Rule 89    termB -> / push_operator term
Rule 90    termB -> * push_operator term
Rule 91    termB -> empty
Rule 92    factor -> signB constant
Rule 93    factor -> ( seen_parentheses hyperexpression )
Rule 94    factor -> funccall seen_factor_funccall
Rule 95    factor -> ID seen_ID dimensionsOpt
Rule 96    seen_factor_funccall -> <empty>
Rule 97    seen_parentheses -> <empty>
Rule 98    seen_ID -> <empty>
Rule 99    signB -> sign
Rule 100   signB -> empty
Rule 101   seen_fconst -> <empty>
Rule 102   seen_iconst -> <empty>
Rule 103   seen_sconst -> <empty>
Rule 104   seen_true -> <empty>
Rule 105   seen_false -> <empty>
Rule 106   constant -> FCONST seen_fconst
Rule 107   constant -> ICONST seen_iconst
Rule 108   constant -> SCONST seen_sconst
Rule 109   constant -> TRUE seen_true
Rule 110   constant -> FALSE seen_false
Rule 111   sign -> +
Rule 112   sign -> -
Rule 113   register_if -> IF
Rule 114   register_while -> WHILE
Rule 115   register_for -> FOR
Rule 116   whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
Rule 117   init_while -> <empty>
Rule 118   while_quadruple -> <empty>
Rule 119   endwhile_quadruple -> <empty>
Rule 120   type -> INT
Rule 121   type -> FLOAT
Rule 122   type -> STRING
Rule 123   type -> BOOL
Rule 124   returntype -> VOID
Rule 125   returntype -> type
Rule 126   forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
Rule 127   for_quadruple -> <empty>
Rule 128   for_expression -> <empty>
Rule 129   endfor_quadruple -> <empty>
Rule 130   read -> READ ( validate_id push_operand read_quadruple readB )
Rule 131   validate_id -> ID
Rule 132   read_quadruple -> <empty>
Rule 133   readB -> , validate_id push_operand read_quadruple readB
Rule 134   readB -> empty
Rule 135   output -> PRINT ( outputB
Rule 136   outputB -> hyperexpression print_quadruple outputC
Rule 137   print_quadruple -> <empty>
Rule 138   outputC -> )
Rule 139   outputC -> , outputB
Rule 140   localvardirective -> # localvardirectiveB ID
Rule 141   localvardirectiveB -> TRACK
Rule 142   localvardirectiveB -> FORGET
Rule 143   localmsgdirective -> # SHOW SCONST
Rule 144   localdecisiondirective -> TRACKDECISION
Rule 145   localdecisiondirective -> FORGETDECISION
Rule 146   localdecisiondirective -> empty
Rule 147   funccall -> ID seen_a_factor_funccall ( funccallB funccallC
Rule 148   seen_a_factor_funccall -> <empty>
Rule 149   funccallB -> hyperexpression seen_param
Rule 150   funccallB -> empty
Rule 151   seen_param -> <empty>
Rule 152   funccallC -> , funccallB funccallC
Rule 153   funccallC -> )
Rule 154   dimensions -> [ hyperexpression ] dimensionsB
Rule 155   dimensionsB -> [ hyperexpression ]
Rule 156   dimensionsB -> empty
Rule 157   return -> RETURN hyperexpression return_quadruple
Rule 158   return_quadruple -> <empty>
Rule 159   params -> type ID
Rule 160   paramsB -> , params paramsB
Rule 161   paramsB -> empty
Rule 162   empty -> <empty>

Terminals, with rules where they appear

#                    : 140 143
(                    : 31 34 45 62 93 116 126 130 135 147
)                    : 31 34 45 93 116 126 130 138 153
*                    : 90
+                    : 85 111
,                    : 27 29 133 139 152 160
-                    : 84 112
/                    : 89
;                    : 28 30 51 52 53 54 126 126
<                    : 75
=                    : 5 6 7 26 41 42
>                    : 76
ALL                  : 9
AND                  : 72
BOOL                 : 123
COMPLEXITYCONFIG     : 7
DECISIONSCONFIG      : 6
DEF                  : 34
DIFF                 : 77
ELSE                 : 46
EQ                   : 78
FALSE                : 110
FCONST               : 106
FLOAT                : 121
FOR                  : 115
FORGET               : 142
FORGETDECISION       : 145
GTEQ                 : 80
ICONST               : 107
ID                   : 20 34 40 95 131 140 147 159
IF                   : 113
INT                  : 120
LTEQ                 : 79
MAIN                 : 31
MOST                 : 10
NO                   : 13
NONE                 : 11
OR                   : 69
PRINT                : 135
READ                 : 130
RETURN               : 157
SCONST               : 108 143
SHOW                 : 143
SOME                 : 8
STRING               : 122
TRACK                : 141
TRACKDECISION        : 144
TRUE                 : 109
VARSCONFIG           : 5
VOID                 : 124
WHILE                : 114
YES                  : 12
[                    : 154 155
]                    : 154 155
error                : 
{                    : 37
}                    : 37

Nonterminals, with rules where they appear

assign               : 126
assignB              : 63
assignfunccall       : 51
assignfunccallB      : 60
block                : 31 33 45 46 116 126
body                 : 1
condition            : 56
condition_quadruple  : 45
config               : 1 3
configdirective      : 3
constant             : 92
declaration          : 17 55
declarationB         : 19 27 29
declarationC         : 19 27 29
declarationD         : 26
declarationsOpt      : 14 17
dimensions           : 43
dimensionsB          : 154
dimensionsOpt        : 20 41 42 95
else                 : 45
elsecondition_quadruple : 46
empty                : 4 16 18 36 39 44 47 70 73 81 86 91 100 134 146 150 156 161
endcondition_quadruple : 45
endfor_quadruple     : 126
endwhile_quadruple   : 116
exp                  : 74 75 76 77 78 79 80 84 85
expB                 : 82
expression           : 71
expressionB          : 74
factor               : 87
for_expression       : 126
for_quadruple        : 126
forloop              : 58
func                 : 33
funccall             : 94
funccallB            : 62 147 152
funccallC            : 62 147 152
funcsOpt             : 14 14 15
hyperexpression      : 26 41 42 45 69 93 116 126 126 136 149 154 155 157
hyperexpressionB     : 68
id_record_line       : 41 60
init_while           : 116 126
instruction          : 38
instructionsOpt      : 37 38
localdecisiondirective : 66
localdirective       : 59
localmsgdirective    : 67
localvardirective    : 65
localvardirectiveB   : 140
main                 : 14
options              : 5 6
optionsyesno         : 7
output               : 52
outputB              : 135 139
outputC              : 136
params               : 35 160
paramsB              : 35 160
paramsOpt            : 34
pop_operand          : 62
print_quadruple      : 136
program              : 0
push_operand         : 20 41 60 130 133
push_operator        : 26 41 42 69 72 75 76 77 78 79 80 84 85 89 90
push_type            : 19
quadruple_assign     : 26 41 42
read                 : 54
readB                : 130 133
read_quadruple       : 130 133
register_for         : 126
register_if          : 45
register_while       : 116
repush_type          : 27 29
return               : 53
return_quadruple     : 157
returntype           : 34
seen_ID              : 95
seen_a_factor_funccall : 147
seen_a_funccall      : 62
seen_factor          : 87
seen_factor_funccall : 94
seen_false           : 110
seen_fconst          : 106
seen_iconst          : 107
seen_main            : 31
seen_param           : 149
seen_parentheses     : 93
seen_sconst          : 108
seen_term            : 82
seen_true            : 109
sign                 : 99
signB                : 92
start_quadruple      : 14
superexpression      : 68 72
superexpressionB     : 71
suprafunc            : 15
term                 : 82 89 90
termB                : 87
type                 : 19 125 159
validate_id          : 130 133
while_quadruple      : 116
whileloop            : 57

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . config body
    (3) config -> . configdirective config
    (4) config -> . empty
    (5) configdirective -> . VARSCONFIG = options
    (6) configdirective -> . DECISIONSCONFIG = options
    (7) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (162) empty -> .

    VARSCONFIG      shift and go to state 2
    DECISIONSCONFIG shift and go to state 1
    COMPLEXITYCONFIG shift and go to state 4
    INT             reduce using rule 162 (empty -> .)
    FLOAT           reduce using rule 162 (empty -> .)
    STRING          reduce using rule 162 (empty -> .)
    BOOL            reduce using rule 162 (empty -> .)
    DEF             reduce using rule 162 (empty -> .)
    MAIN            reduce using rule 162 (empty -> .)

    configdirective                shift and go to state 3
    program                        shift and go to state 5
    config                         shift and go to state 6
    empty                          shift and go to state 7

state 1

    (6) configdirective -> DECISIONSCONFIG . = options

    =               shift and go to state 8


state 2

    (5) configdirective -> VARSCONFIG . = options

    =               shift and go to state 9


state 3

    (3) config -> configdirective . config
    (3) config -> . configdirective config
    (4) config -> . empty
    (5) configdirective -> . VARSCONFIG = options
    (6) configdirective -> . DECISIONSCONFIG = options
    (7) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (162) empty -> .

    VARSCONFIG      shift and go to state 2
    DECISIONSCONFIG shift and go to state 1
    COMPLEXITYCONFIG shift and go to state 4
    INT             reduce using rule 162 (empty -> .)
    FLOAT           reduce using rule 162 (empty -> .)
    STRING          reduce using rule 162 (empty -> .)
    BOOL            reduce using rule 162 (empty -> .)
    DEF             reduce using rule 162 (empty -> .)
    MAIN            reduce using rule 162 (empty -> .)

    config                         shift and go to state 10
    empty                          shift and go to state 7
    configdirective                shift and go to state 3

state 4

    (7) configdirective -> COMPLEXITYCONFIG . = optionsyesno

    =               shift and go to state 11


state 5

    (0) S' -> program .



state 6

    (1) program -> config . body
    (14) body -> . declarationsOpt start_quadruple funcsOpt main funcsOpt
    (17) declarationsOpt -> . declaration declarationsOpt
    (18) declarationsOpt -> . empty
    (19) declaration -> . type push_type declarationB declarationC
    (162) empty -> .
    (120) type -> . INT
    (121) type -> . FLOAT
    (122) type -> . STRING
    (123) type -> . BOOL

    DEF             reduce using rule 162 (empty -> .)
    MAIN            reduce using rule 162 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 15
    BOOL            shift and go to state 18

    body                           shift and go to state 12
    declarationsOpt                shift and go to state 13
    type                           shift and go to state 14
    declaration                    shift and go to state 19
    empty                          shift and go to state 20

state 7

    (4) config -> empty .

    INT             reduce using rule 4 (config -> empty .)
    FLOAT           reduce using rule 4 (config -> empty .)
    STRING          reduce using rule 4 (config -> empty .)
    BOOL            reduce using rule 4 (config -> empty .)
    DEF             reduce using rule 4 (config -> empty .)
    MAIN            reduce using rule 4 (config -> empty .)


state 8

    (6) configdirective -> DECISIONSCONFIG = . options
    (8) options -> . SOME
    (9) options -> . ALL
    (10) options -> . MOST
    (11) options -> . NONE

    SOME            shift and go to state 22
    ALL             shift and go to state 21
    MOST            shift and go to state 24
    NONE            shift and go to state 23

    options                        shift and go to state 25

state 9

    (5) configdirective -> VARSCONFIG = . options
    (8) options -> . SOME
    (9) options -> . ALL
    (10) options -> . MOST
    (11) options -> . NONE

    SOME            shift and go to state 22
    ALL             shift and go to state 21
    MOST            shift and go to state 24
    NONE            shift and go to state 23

    options                        shift and go to state 26

state 10

    (3) config -> configdirective config .

    INT             reduce using rule 3 (config -> configdirective config .)
    FLOAT           reduce using rule 3 (config -> configdirective config .)
    STRING          reduce using rule 3 (config -> configdirective config .)
    BOOL            reduce using rule 3 (config -> configdirective config .)
    DEF             reduce using rule 3 (config -> configdirective config .)
    MAIN            reduce using rule 3 (config -> configdirective config .)


state 11

    (7) configdirective -> COMPLEXITYCONFIG = . optionsyesno
    (12) optionsyesno -> . YES
    (13) optionsyesno -> . NO

    YES             shift and go to state 27
    NO              shift and go to state 29

    optionsyesno                   shift and go to state 28

state 12

    (1) program -> config body .

    $end            reduce using rule 1 (program -> config body .)


state 13

    (14) body -> declarationsOpt . start_quadruple funcsOpt main funcsOpt
    (2) start_quadruple -> .

    DEF             reduce using rule 2 (start_quadruple -> .)
    MAIN            reduce using rule 2 (start_quadruple -> .)

    start_quadruple                shift and go to state 30

state 14

    (19) declaration -> type . push_type declarationB declarationC
    (22) push_type -> .

    ID              reduce using rule 22 (push_type -> .)

    push_type                      shift and go to state 31

state 15

    (122) type -> STRING .

    ID              reduce using rule 122 (type -> STRING .)


state 16

    (120) type -> INT .

    ID              reduce using rule 120 (type -> INT .)


state 17

    (121) type -> FLOAT .

    ID              reduce using rule 121 (type -> FLOAT .)


state 18

    (123) type -> BOOL .

    ID              reduce using rule 123 (type -> BOOL .)


state 19

    (17) declarationsOpt -> declaration . declarationsOpt
    (17) declarationsOpt -> . declaration declarationsOpt
    (18) declarationsOpt -> . empty
    (19) declaration -> . type push_type declarationB declarationC
    (162) empty -> .
    (120) type -> . INT
    (121) type -> . FLOAT
    (122) type -> . STRING
    (123) type -> . BOOL

    DEF             reduce using rule 162 (empty -> .)
    MAIN            reduce using rule 162 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 15
    BOOL            shift and go to state 18

    declarationsOpt                shift and go to state 32
    declaration                    shift and go to state 19
    type                           shift and go to state 14
    empty                          shift and go to state 20

state 20

    (18) declarationsOpt -> empty .

    DEF             reduce using rule 18 (declarationsOpt -> empty .)
    MAIN            reduce using rule 18 (declarationsOpt -> empty .)


state 21

    (9) options -> ALL .

    VARSCONFIG      reduce using rule 9 (options -> ALL .)
    DECISIONSCONFIG reduce using rule 9 (options -> ALL .)
    COMPLEXITYCONFIG reduce using rule 9 (options -> ALL .)
    INT             reduce using rule 9 (options -> ALL .)
    FLOAT           reduce using rule 9 (options -> ALL .)
    STRING          reduce using rule 9 (options -> ALL .)
    BOOL            reduce using rule 9 (options -> ALL .)
    DEF             reduce using rule 9 (options -> ALL .)
    MAIN            reduce using rule 9 (options -> ALL .)


state 22

    (8) options -> SOME .

    VARSCONFIG      reduce using rule 8 (options -> SOME .)
    DECISIONSCONFIG reduce using rule 8 (options -> SOME .)
    COMPLEXITYCONFIG reduce using rule 8 (options -> SOME .)
    INT             reduce using rule 8 (options -> SOME .)
    FLOAT           reduce using rule 8 (options -> SOME .)
    STRING          reduce using rule 8 (options -> SOME .)
    BOOL            reduce using rule 8 (options -> SOME .)
    DEF             reduce using rule 8 (options -> SOME .)
    MAIN            reduce using rule 8 (options -> SOME .)


state 23

    (11) options -> NONE .

    VARSCONFIG      reduce using rule 11 (options -> NONE .)
    DECISIONSCONFIG reduce using rule 11 (options -> NONE .)
    COMPLEXITYCONFIG reduce using rule 11 (options -> NONE .)
    INT             reduce using rule 11 (options -> NONE .)
    FLOAT           reduce using rule 11 (options -> NONE .)
    STRING          reduce using rule 11 (options -> NONE .)
    BOOL            reduce using rule 11 (options -> NONE .)
    DEF             reduce using rule 11 (options -> NONE .)
    MAIN            reduce using rule 11 (options -> NONE .)


state 24

    (10) options -> MOST .

    VARSCONFIG      reduce using rule 10 (options -> MOST .)
    DECISIONSCONFIG reduce using rule 10 (options -> MOST .)
    COMPLEXITYCONFIG reduce using rule 10 (options -> MOST .)
    INT             reduce using rule 10 (options -> MOST .)
    FLOAT           reduce using rule 10 (options -> MOST .)
    STRING          reduce using rule 10 (options -> MOST .)
    BOOL            reduce using rule 10 (options -> MOST .)
    DEF             reduce using rule 10 (options -> MOST .)
    MAIN            reduce using rule 10 (options -> MOST .)


state 25

    (6) configdirective -> DECISIONSCONFIG = options .

    VARSCONFIG      reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    INT             reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    FLOAT           reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    STRING          reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    BOOL            reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    DEF             reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    MAIN            reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)


state 26

    (5) configdirective -> VARSCONFIG = options .

    VARSCONFIG      reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    INT             reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    FLOAT           reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    STRING          reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    BOOL            reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    DEF             reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    MAIN            reduce using rule 5 (configdirective -> VARSCONFIG = options .)


state 27

    (12) optionsyesno -> YES .

    VARSCONFIG      reduce using rule 12 (optionsyesno -> YES .)
    DECISIONSCONFIG reduce using rule 12 (optionsyesno -> YES .)
    COMPLEXITYCONFIG reduce using rule 12 (optionsyesno -> YES .)
    INT             reduce using rule 12 (optionsyesno -> YES .)
    FLOAT           reduce using rule 12 (optionsyesno -> YES .)
    STRING          reduce using rule 12 (optionsyesno -> YES .)
    BOOL            reduce using rule 12 (optionsyesno -> YES .)
    DEF             reduce using rule 12 (optionsyesno -> YES .)
    MAIN            reduce using rule 12 (optionsyesno -> YES .)


state 28

    (7) configdirective -> COMPLEXITYCONFIG = optionsyesno .

    VARSCONFIG      reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DECISIONSCONFIG reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    COMPLEXITYCONFIG reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    INT             reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    FLOAT           reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    STRING          reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    BOOL            reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DEF             reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    MAIN            reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)


state 29

    (13) optionsyesno -> NO .

    VARSCONFIG      reduce using rule 13 (optionsyesno -> NO .)
    DECISIONSCONFIG reduce using rule 13 (optionsyesno -> NO .)
    COMPLEXITYCONFIG reduce using rule 13 (optionsyesno -> NO .)
    INT             reduce using rule 13 (optionsyesno -> NO .)
    FLOAT           reduce using rule 13 (optionsyesno -> NO .)
    STRING          reduce using rule 13 (optionsyesno -> NO .)
    BOOL            reduce using rule 13 (optionsyesno -> NO .)
    DEF             reduce using rule 13 (optionsyesno -> NO .)
    MAIN            reduce using rule 13 (optionsyesno -> NO .)


state 30

    (14) body -> declarationsOpt start_quadruple . funcsOpt main funcsOpt
    (15) funcsOpt -> . suprafunc funcsOpt
    (16) funcsOpt -> . empty
    (33) suprafunc -> . func block
    (162) empty -> .
    (34) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 162 (empty -> .)
    DEF             shift and go to state 36

    suprafunc                      shift and go to state 33
    funcsOpt                       shift and go to state 34
    func                           shift and go to state 35
    empty                          shift and go to state 37

state 31

    (19) declaration -> type push_type . declarationB declarationC
    (20) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 38

    declarationB                   shift and go to state 39

state 32

    (17) declarationsOpt -> declaration declarationsOpt .

    DEF             reduce using rule 17 (declarationsOpt -> declaration declarationsOpt .)
    MAIN            reduce using rule 17 (declarationsOpt -> declaration declarationsOpt .)


state 33

    (15) funcsOpt -> suprafunc . funcsOpt
    (15) funcsOpt -> . suprafunc funcsOpt
    (16) funcsOpt -> . empty
    (33) suprafunc -> . func block
    (162) empty -> .
    (34) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 162 (empty -> .)
    $end            reduce using rule 162 (empty -> .)
    DEF             shift and go to state 36

    suprafunc                      shift and go to state 33
    funcsOpt                       shift and go to state 40
    empty                          shift and go to state 37
    func                           shift and go to state 35

state 34

    (14) body -> declarationsOpt start_quadruple funcsOpt . main funcsOpt
    (31) main -> . MAIN ( ) seen_main block

    MAIN            shift and go to state 41

    main                           shift and go to state 42

state 35

    (33) suprafunc -> func . block
    (37) block -> . { instructionsOpt }

    {               shift and go to state 43

    block                          shift and go to state 44

state 36

    (34) func -> DEF . returntype ID ( paramsOpt )
    (124) returntype -> . VOID
    (125) returntype -> . type
    (120) type -> . INT
    (121) type -> . FLOAT
    (122) type -> . STRING
    (123) type -> . BOOL

    VOID            shift and go to state 45
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 15
    BOOL            shift and go to state 18

    returntype                     shift and go to state 46
    type                           shift and go to state 47

state 37

    (16) funcsOpt -> empty .

    MAIN            reduce using rule 16 (funcsOpt -> empty .)
    $end            reduce using rule 16 (funcsOpt -> empty .)


state 38

    (20) declarationB -> ID . push_operand dimensionsOpt
    (21) push_operand -> .

    [               reduce using rule 21 (push_operand -> .)
    =               reduce using rule 21 (push_operand -> .)
    ,               reduce using rule 21 (push_operand -> .)
    ;               reduce using rule 21 (push_operand -> .)

    push_operand                   shift and go to state 48

state 39

    (19) declaration -> type push_type declarationB . declarationC
    (26) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (27) declarationC -> . , repush_type declarationB declarationC
    (28) declarationC -> . ;

    =               shift and go to state 52
    ,               shift and go to state 49
    ;               shift and go to state 50

    declarationC                   shift and go to state 51

state 40

    (15) funcsOpt -> suprafunc funcsOpt .

    MAIN            reduce using rule 15 (funcsOpt -> suprafunc funcsOpt .)
    $end            reduce using rule 15 (funcsOpt -> suprafunc funcsOpt .)


state 41

    (31) main -> MAIN . ( ) seen_main block

    (               shift and go to state 53


state 42

    (14) body -> declarationsOpt start_quadruple funcsOpt main . funcsOpt
    (15) funcsOpt -> . suprafunc funcsOpt
    (16) funcsOpt -> . empty
    (33) suprafunc -> . func block
    (162) empty -> .
    (34) func -> . DEF returntype ID ( paramsOpt )

    $end            reduce using rule 162 (empty -> .)
    DEF             shift and go to state 36

    suprafunc                      shift and go to state 33
    funcsOpt                       shift and go to state 54
    func                           shift and go to state 35
    empty                          shift and go to state 37

state 43

    (37) block -> { . instructionsOpt }
    (38) instructionsOpt -> . instruction instructionsOpt
    (39) instructionsOpt -> . empty
    (51) instruction -> . assignfunccall ;
    (52) instruction -> . output ;
    (53) instruction -> . return ;
    (54) instruction -> . read ;
    (55) instruction -> . declaration
    (56) instruction -> . condition
    (57) instruction -> . whileloop
    (58) instruction -> . forloop
    (59) instruction -> . localdirective
    (162) empty -> .
    (60) assignfunccall -> . id_record_line push_operand assignfunccallB
    (135) output -> . PRINT ( outputB
    (157) return -> . RETURN hyperexpression return_quadruple
    (130) read -> . READ ( validate_id push_operand read_quadruple readB )
    (19) declaration -> . type push_type declarationB declarationC
    (45) condition -> . register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple
    (116) whileloop -> . register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
    (126) forloop -> . register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (65) localdirective -> . localvardirective
    (66) localdirective -> . localdecisiondirective
    (67) localdirective -> . localmsgdirective
    (40) id_record_line -> . ID
    (120) type -> . INT
    (121) type -> . FLOAT
    (122) type -> . STRING
    (123) type -> . BOOL
    (113) register_if -> . IF
    (114) register_while -> . WHILE
    (115) register_for -> . FOR
    (140) localvardirective -> . # localvardirectiveB ID
    (144) localdecisiondirective -> . TRACKDECISION
    (145) localdecisiondirective -> . FORGETDECISION
    (146) localdecisiondirective -> . empty
    (143) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 162 (empty -> .)
    PRINT           shift and go to state 60
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 77
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 15
    BOOL            shift and go to state 18
    IF              shift and go to state 79
    WHILE           shift and go to state 59
    FOR             shift and go to state 63
    #               shift and go to state 62
    TRACKDECISION   shift and go to state 65
    FORGETDECISION  shift and go to state 81

  ! PRINT           [ reduce using rule 162 (empty -> .) ]
  ! RETURN          [ reduce using rule 162 (empty -> .) ]
  ! READ            [ reduce using rule 162 (empty -> .) ]
  ! ID              [ reduce using rule 162 (empty -> .) ]
  ! INT             [ reduce using rule 162 (empty -> .) ]
  ! FLOAT           [ reduce using rule 162 (empty -> .) ]
  ! STRING          [ reduce using rule 162 (empty -> .) ]
  ! BOOL            [ reduce using rule 162 (empty -> .) ]
  ! IF              [ reduce using rule 162 (empty -> .) ]
  ! WHILE           [ reduce using rule 162 (empty -> .) ]
  ! FOR             [ reduce using rule 162 (empty -> .) ]
  ! #               [ reduce using rule 162 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 162 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 162 (empty -> .) ]

    assignfunccall                 shift and go to state 57
    id_record_line                 shift and go to state 58
    whileloop                      shift and go to state 61
    localvardirective              shift and go to state 64
    localmsgdirective              shift and go to state 66
    type                           shift and go to state 14
    empty                          shift and go to state 67
    forloop                        shift and go to state 68
    return                         shift and go to state 69
    register_for                   shift and go to state 70
    read                           shift and go to state 71
    register_if                    shift and go to state 72
    instructionsOpt                shift and go to state 73
    register_while                 shift and go to state 74
    localdirective                 shift and go to state 75
    declaration                    shift and go to state 76
    condition                      shift and go to state 78
    instruction                    shift and go to state 80
    localdecisiondirective         shift and go to state 82
    output                         shift and go to state 83

state 44

    (33) suprafunc -> func block .

    DEF             reduce using rule 33 (suprafunc -> func block .)
    MAIN            reduce using rule 33 (suprafunc -> func block .)
    $end            reduce using rule 33 (suprafunc -> func block .)


state 45

    (124) returntype -> VOID .

    ID              reduce using rule 124 (returntype -> VOID .)


state 46

    (34) func -> DEF returntype . ID ( paramsOpt )

    ID              shift and go to state 84


state 47

    (125) returntype -> type .

    ID              reduce using rule 125 (returntype -> type .)


state 48

    (20) declarationB -> ID push_operand . dimensionsOpt
    (43) dimensionsOpt -> . dimensions
    (44) dimensionsOpt -> . empty
    (154) dimensions -> . [ hyperexpression ] dimensionsB
    (162) empty -> .

    [               shift and go to state 86
    =               reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)

    dimensions                     shift and go to state 85
    dimensionsOpt                  shift and go to state 87
    empty                          shift and go to state 88

state 49

    (27) declarationC -> , . repush_type declarationB declarationC
    (23) repush_type -> .

    ID              reduce using rule 23 (repush_type -> .)

    repush_type                    shift and go to state 89

state 50

    (28) declarationC -> ; .

    INT             reduce using rule 28 (declarationC -> ; .)
    FLOAT           reduce using rule 28 (declarationC -> ; .)
    STRING          reduce using rule 28 (declarationC -> ; .)
    BOOL            reduce using rule 28 (declarationC -> ; .)
    DEF             reduce using rule 28 (declarationC -> ; .)
    MAIN            reduce using rule 28 (declarationC -> ; .)
    PRINT           reduce using rule 28 (declarationC -> ; .)
    RETURN          reduce using rule 28 (declarationC -> ; .)
    READ            reduce using rule 28 (declarationC -> ; .)
    ID              reduce using rule 28 (declarationC -> ; .)
    IF              reduce using rule 28 (declarationC -> ; .)
    WHILE           reduce using rule 28 (declarationC -> ; .)
    FOR             reduce using rule 28 (declarationC -> ; .)
    #               reduce using rule 28 (declarationC -> ; .)
    TRACKDECISION   reduce using rule 28 (declarationC -> ; .)
    FORGETDECISION  reduce using rule 28 (declarationC -> ; .)
    }               reduce using rule 28 (declarationC -> ; .)


state 51

    (19) declaration -> type push_type declarationB declarationC .

    INT             reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    FLOAT           reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    STRING          reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    BOOL            reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    DEF             reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    MAIN            reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    PRINT           reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    RETURN          reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    READ            reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    ID              reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    IF              reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    WHILE           reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    FOR             reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    #               reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    }               reduce using rule 19 (declaration -> type push_type declarationB declarationC .)


state 52

    (26) declarationC -> = . push_operator hyperexpression quadruple_assign declarationD
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 90

state 53

    (31) main -> MAIN ( . ) seen_main block

    )               shift and go to state 91


state 54

    (14) body -> declarationsOpt start_quadruple funcsOpt main funcsOpt .

    $end            reduce using rule 14 (body -> declarationsOpt start_quadruple funcsOpt main funcsOpt .)


state 55

    (157) return -> RETURN . hyperexpression return_quadruple
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    sign                           shift and go to state 101
    signB                          shift and go to state 92
    hyperexpression                shift and go to state 96
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 56

    (130) read -> READ . ( validate_id push_operand read_quadruple readB )

    (               shift and go to state 106


state 57

    (51) instruction -> assignfunccall . ;

    ;               shift and go to state 107


state 58

    (60) assignfunccall -> id_record_line . push_operand assignfunccallB
    (21) push_operand -> .

    (               reduce using rule 21 (push_operand -> .)
    [               reduce using rule 21 (push_operand -> .)
    =               reduce using rule 21 (push_operand -> .)

    push_operand                   shift and go to state 108

state 59

    (114) register_while -> WHILE .

    (               reduce using rule 114 (register_while -> WHILE .)


state 60

    (135) output -> PRINT . ( outputB

    (               shift and go to state 109


state 61

    (57) instruction -> whileloop .

    PRINT           reduce using rule 57 (instruction -> whileloop .)
    RETURN          reduce using rule 57 (instruction -> whileloop .)
    READ            reduce using rule 57 (instruction -> whileloop .)
    ID              reduce using rule 57 (instruction -> whileloop .)
    INT             reduce using rule 57 (instruction -> whileloop .)
    FLOAT           reduce using rule 57 (instruction -> whileloop .)
    STRING          reduce using rule 57 (instruction -> whileloop .)
    BOOL            reduce using rule 57 (instruction -> whileloop .)
    IF              reduce using rule 57 (instruction -> whileloop .)
    WHILE           reduce using rule 57 (instruction -> whileloop .)
    FOR             reduce using rule 57 (instruction -> whileloop .)
    #               reduce using rule 57 (instruction -> whileloop .)
    TRACKDECISION   reduce using rule 57 (instruction -> whileloop .)
    FORGETDECISION  reduce using rule 57 (instruction -> whileloop .)
    }               reduce using rule 57 (instruction -> whileloop .)


state 62

    (140) localvardirective -> # . localvardirectiveB ID
    (143) localmsgdirective -> # . SHOW SCONST
    (141) localvardirectiveB -> . TRACK
    (142) localvardirectiveB -> . FORGET

    SHOW            shift and go to state 111
    TRACK           shift and go to state 112
    FORGET          shift and go to state 110

    localvardirectiveB             shift and go to state 113

state 63

    (115) register_for -> FOR .

    (               reduce using rule 115 (register_for -> FOR .)


state 64

    (65) localdirective -> localvardirective .

    PRINT           reduce using rule 65 (localdirective -> localvardirective .)
    RETURN          reduce using rule 65 (localdirective -> localvardirective .)
    READ            reduce using rule 65 (localdirective -> localvardirective .)
    ID              reduce using rule 65 (localdirective -> localvardirective .)
    INT             reduce using rule 65 (localdirective -> localvardirective .)
    FLOAT           reduce using rule 65 (localdirective -> localvardirective .)
    STRING          reduce using rule 65 (localdirective -> localvardirective .)
    BOOL            reduce using rule 65 (localdirective -> localvardirective .)
    IF              reduce using rule 65 (localdirective -> localvardirective .)
    WHILE           reduce using rule 65 (localdirective -> localvardirective .)
    FOR             reduce using rule 65 (localdirective -> localvardirective .)
    #               reduce using rule 65 (localdirective -> localvardirective .)
    TRACKDECISION   reduce using rule 65 (localdirective -> localvardirective .)
    FORGETDECISION  reduce using rule 65 (localdirective -> localvardirective .)
    }               reduce using rule 65 (localdirective -> localvardirective .)


state 65

    (144) localdecisiondirective -> TRACKDECISION .

    PRINT           reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    RETURN          reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    READ            reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    ID              reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    INT             reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    FLOAT           reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    STRING          reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    BOOL            reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    IF              reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    WHILE           reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    FOR             reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    #               reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    TRACKDECISION   reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    FORGETDECISION  reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)
    }               reduce using rule 144 (localdecisiondirective -> TRACKDECISION .)


state 66

    (67) localdirective -> localmsgdirective .

    PRINT           reduce using rule 67 (localdirective -> localmsgdirective .)
    RETURN          reduce using rule 67 (localdirective -> localmsgdirective .)
    READ            reduce using rule 67 (localdirective -> localmsgdirective .)
    ID              reduce using rule 67 (localdirective -> localmsgdirective .)
    INT             reduce using rule 67 (localdirective -> localmsgdirective .)
    FLOAT           reduce using rule 67 (localdirective -> localmsgdirective .)
    STRING          reduce using rule 67 (localdirective -> localmsgdirective .)
    BOOL            reduce using rule 67 (localdirective -> localmsgdirective .)
    IF              reduce using rule 67 (localdirective -> localmsgdirective .)
    WHILE           reduce using rule 67 (localdirective -> localmsgdirective .)
    FOR             reduce using rule 67 (localdirective -> localmsgdirective .)
    #               reduce using rule 67 (localdirective -> localmsgdirective .)
    TRACKDECISION   reduce using rule 67 (localdirective -> localmsgdirective .)
    FORGETDECISION  reduce using rule 67 (localdirective -> localmsgdirective .)
    }               reduce using rule 67 (localdirective -> localmsgdirective .)


state 67

    (39) instructionsOpt -> empty .
    (146) localdecisiondirective -> empty .

  ! reduce/reduce conflict for } resolved using rule 39 (instructionsOpt -> empty .)
    }               reduce using rule 39 (instructionsOpt -> empty .)
    PRINT           reduce using rule 146 (localdecisiondirective -> empty .)
    RETURN          reduce using rule 146 (localdecisiondirective -> empty .)
    READ            reduce using rule 146 (localdecisiondirective -> empty .)
    ID              reduce using rule 146 (localdecisiondirective -> empty .)
    INT             reduce using rule 146 (localdecisiondirective -> empty .)
    FLOAT           reduce using rule 146 (localdecisiondirective -> empty .)
    STRING          reduce using rule 146 (localdecisiondirective -> empty .)
    BOOL            reduce using rule 146 (localdecisiondirective -> empty .)
    IF              reduce using rule 146 (localdecisiondirective -> empty .)
    WHILE           reduce using rule 146 (localdecisiondirective -> empty .)
    FOR             reduce using rule 146 (localdecisiondirective -> empty .)
    #               reduce using rule 146 (localdecisiondirective -> empty .)
    TRACKDECISION   reduce using rule 146 (localdecisiondirective -> empty .)
    FORGETDECISION  reduce using rule 146 (localdecisiondirective -> empty .)

  ! }               [ reduce using rule 146 (localdecisiondirective -> empty .) ]


state 68

    (58) instruction -> forloop .

    PRINT           reduce using rule 58 (instruction -> forloop .)
    RETURN          reduce using rule 58 (instruction -> forloop .)
    READ            reduce using rule 58 (instruction -> forloop .)
    ID              reduce using rule 58 (instruction -> forloop .)
    INT             reduce using rule 58 (instruction -> forloop .)
    FLOAT           reduce using rule 58 (instruction -> forloop .)
    STRING          reduce using rule 58 (instruction -> forloop .)
    BOOL            reduce using rule 58 (instruction -> forloop .)
    IF              reduce using rule 58 (instruction -> forloop .)
    WHILE           reduce using rule 58 (instruction -> forloop .)
    FOR             reduce using rule 58 (instruction -> forloop .)
    #               reduce using rule 58 (instruction -> forloop .)
    TRACKDECISION   reduce using rule 58 (instruction -> forloop .)
    FORGETDECISION  reduce using rule 58 (instruction -> forloop .)
    }               reduce using rule 58 (instruction -> forloop .)


state 69

    (53) instruction -> return . ;

    ;               shift and go to state 114


state 70

    (126) forloop -> register_for . ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple

    (               shift and go to state 115


state 71

    (54) instruction -> read . ;

    ;               shift and go to state 116


state 72

    (45) condition -> register_if . ( hyperexpression condition_quadruple ) block else endcondition_quadruple

    (               shift and go to state 117


state 73

    (37) block -> { instructionsOpt . }

    }               shift and go to state 118


state 74

    (116) whileloop -> register_while . init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
    (117) init_while -> .

    (               reduce using rule 117 (init_while -> .)

    init_while                     shift and go to state 119

state 75

    (59) instruction -> localdirective .

    PRINT           reduce using rule 59 (instruction -> localdirective .)
    RETURN          reduce using rule 59 (instruction -> localdirective .)
    READ            reduce using rule 59 (instruction -> localdirective .)
    ID              reduce using rule 59 (instruction -> localdirective .)
    INT             reduce using rule 59 (instruction -> localdirective .)
    FLOAT           reduce using rule 59 (instruction -> localdirective .)
    STRING          reduce using rule 59 (instruction -> localdirective .)
    BOOL            reduce using rule 59 (instruction -> localdirective .)
    IF              reduce using rule 59 (instruction -> localdirective .)
    WHILE           reduce using rule 59 (instruction -> localdirective .)
    FOR             reduce using rule 59 (instruction -> localdirective .)
    #               reduce using rule 59 (instruction -> localdirective .)
    TRACKDECISION   reduce using rule 59 (instruction -> localdirective .)
    FORGETDECISION  reduce using rule 59 (instruction -> localdirective .)
    }               reduce using rule 59 (instruction -> localdirective .)


state 76

    (55) instruction -> declaration .

    PRINT           reduce using rule 55 (instruction -> declaration .)
    RETURN          reduce using rule 55 (instruction -> declaration .)
    READ            reduce using rule 55 (instruction -> declaration .)
    ID              reduce using rule 55 (instruction -> declaration .)
    INT             reduce using rule 55 (instruction -> declaration .)
    FLOAT           reduce using rule 55 (instruction -> declaration .)
    STRING          reduce using rule 55 (instruction -> declaration .)
    BOOL            reduce using rule 55 (instruction -> declaration .)
    IF              reduce using rule 55 (instruction -> declaration .)
    WHILE           reduce using rule 55 (instruction -> declaration .)
    FOR             reduce using rule 55 (instruction -> declaration .)
    #               reduce using rule 55 (instruction -> declaration .)
    TRACKDECISION   reduce using rule 55 (instruction -> declaration .)
    FORGETDECISION  reduce using rule 55 (instruction -> declaration .)
    }               reduce using rule 55 (instruction -> declaration .)


state 77

    (40) id_record_line -> ID .

    [               reduce using rule 40 (id_record_line -> ID .)
    =               reduce using rule 40 (id_record_line -> ID .)
    (               reduce using rule 40 (id_record_line -> ID .)


state 78

    (56) instruction -> condition .

    PRINT           reduce using rule 56 (instruction -> condition .)
    RETURN          reduce using rule 56 (instruction -> condition .)
    READ            reduce using rule 56 (instruction -> condition .)
    ID              reduce using rule 56 (instruction -> condition .)
    INT             reduce using rule 56 (instruction -> condition .)
    FLOAT           reduce using rule 56 (instruction -> condition .)
    STRING          reduce using rule 56 (instruction -> condition .)
    BOOL            reduce using rule 56 (instruction -> condition .)
    IF              reduce using rule 56 (instruction -> condition .)
    WHILE           reduce using rule 56 (instruction -> condition .)
    FOR             reduce using rule 56 (instruction -> condition .)
    #               reduce using rule 56 (instruction -> condition .)
    TRACKDECISION   reduce using rule 56 (instruction -> condition .)
    FORGETDECISION  reduce using rule 56 (instruction -> condition .)
    }               reduce using rule 56 (instruction -> condition .)


state 79

    (113) register_if -> IF .

    (               reduce using rule 113 (register_if -> IF .)


state 80

    (38) instructionsOpt -> instruction . instructionsOpt
    (38) instructionsOpt -> . instruction instructionsOpt
    (39) instructionsOpt -> . empty
    (51) instruction -> . assignfunccall ;
    (52) instruction -> . output ;
    (53) instruction -> . return ;
    (54) instruction -> . read ;
    (55) instruction -> . declaration
    (56) instruction -> . condition
    (57) instruction -> . whileloop
    (58) instruction -> . forloop
    (59) instruction -> . localdirective
    (162) empty -> .
    (60) assignfunccall -> . id_record_line push_operand assignfunccallB
    (135) output -> . PRINT ( outputB
    (157) return -> . RETURN hyperexpression return_quadruple
    (130) read -> . READ ( validate_id push_operand read_quadruple readB )
    (19) declaration -> . type push_type declarationB declarationC
    (45) condition -> . register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple
    (116) whileloop -> . register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
    (126) forloop -> . register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (65) localdirective -> . localvardirective
    (66) localdirective -> . localdecisiondirective
    (67) localdirective -> . localmsgdirective
    (40) id_record_line -> . ID
    (120) type -> . INT
    (121) type -> . FLOAT
    (122) type -> . STRING
    (123) type -> . BOOL
    (113) register_if -> . IF
    (114) register_while -> . WHILE
    (115) register_for -> . FOR
    (140) localvardirective -> . # localvardirectiveB ID
    (144) localdecisiondirective -> . TRACKDECISION
    (145) localdecisiondirective -> . FORGETDECISION
    (146) localdecisiondirective -> . empty
    (143) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 162 (empty -> .)
    PRINT           shift and go to state 60
    RETURN          shift and go to state 55
    READ            shift and go to state 56
    ID              shift and go to state 77
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 15
    BOOL            shift and go to state 18
    IF              shift and go to state 79
    WHILE           shift and go to state 59
    FOR             shift and go to state 63
    #               shift and go to state 62
    TRACKDECISION   shift and go to state 65
    FORGETDECISION  shift and go to state 81

  ! PRINT           [ reduce using rule 162 (empty -> .) ]
  ! RETURN          [ reduce using rule 162 (empty -> .) ]
  ! READ            [ reduce using rule 162 (empty -> .) ]
  ! ID              [ reduce using rule 162 (empty -> .) ]
  ! INT             [ reduce using rule 162 (empty -> .) ]
  ! FLOAT           [ reduce using rule 162 (empty -> .) ]
  ! STRING          [ reduce using rule 162 (empty -> .) ]
  ! BOOL            [ reduce using rule 162 (empty -> .) ]
  ! IF              [ reduce using rule 162 (empty -> .) ]
  ! WHILE           [ reduce using rule 162 (empty -> .) ]
  ! FOR             [ reduce using rule 162 (empty -> .) ]
  ! #               [ reduce using rule 162 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 162 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 162 (empty -> .) ]

    assignfunccall                 shift and go to state 57
    id_record_line                 shift and go to state 58
    whileloop                      shift and go to state 61
    localvardirective              shift and go to state 64
    localmsgdirective              shift and go to state 66
    type                           shift and go to state 14
    empty                          shift and go to state 67
    forloop                        shift and go to state 68
    return                         shift and go to state 69
    register_for                   shift and go to state 70
    read                           shift and go to state 71
    register_if                    shift and go to state 72
    instructionsOpt                shift and go to state 120
    register_while                 shift and go to state 74
    localdirective                 shift and go to state 75
    declaration                    shift and go to state 76
    condition                      shift and go to state 78
    instruction                    shift and go to state 80
    localdecisiondirective         shift and go to state 82
    output                         shift and go to state 83

state 81

    (145) localdecisiondirective -> FORGETDECISION .

    PRINT           reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    RETURN          reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    READ            reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    ID              reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    INT             reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    FLOAT           reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    STRING          reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    BOOL            reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    IF              reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    WHILE           reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    FOR             reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    #               reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    TRACKDECISION   reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    FORGETDECISION  reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)
    }               reduce using rule 145 (localdecisiondirective -> FORGETDECISION .)


state 82

    (66) localdirective -> localdecisiondirective .

    PRINT           reduce using rule 66 (localdirective -> localdecisiondirective .)
    RETURN          reduce using rule 66 (localdirective -> localdecisiondirective .)
    READ            reduce using rule 66 (localdirective -> localdecisiondirective .)
    ID              reduce using rule 66 (localdirective -> localdecisiondirective .)
    INT             reduce using rule 66 (localdirective -> localdecisiondirective .)
    FLOAT           reduce using rule 66 (localdirective -> localdecisiondirective .)
    STRING          reduce using rule 66 (localdirective -> localdecisiondirective .)
    BOOL            reduce using rule 66 (localdirective -> localdecisiondirective .)
    IF              reduce using rule 66 (localdirective -> localdecisiondirective .)
    WHILE           reduce using rule 66 (localdirective -> localdecisiondirective .)
    FOR             reduce using rule 66 (localdirective -> localdecisiondirective .)
    #               reduce using rule 66 (localdirective -> localdecisiondirective .)
    TRACKDECISION   reduce using rule 66 (localdirective -> localdecisiondirective .)
    FORGETDECISION  reduce using rule 66 (localdirective -> localdecisiondirective .)
    }               reduce using rule 66 (localdirective -> localdecisiondirective .)


state 83

    (52) instruction -> output . ;

    ;               shift and go to state 121


state 84

    (34) func -> DEF returntype ID . ( paramsOpt )

    (               shift and go to state 122


state 85

    (43) dimensionsOpt -> dimensions .

    =               reduce using rule 43 (dimensionsOpt -> dimensions .)
    ,               reduce using rule 43 (dimensionsOpt -> dimensions .)
    ;               reduce using rule 43 (dimensionsOpt -> dimensions .)
    /               reduce using rule 43 (dimensionsOpt -> dimensions .)
    *               reduce using rule 43 (dimensionsOpt -> dimensions .)
    -               reduce using rule 43 (dimensionsOpt -> dimensions .)
    +               reduce using rule 43 (dimensionsOpt -> dimensions .)
    <               reduce using rule 43 (dimensionsOpt -> dimensions .)
    >               reduce using rule 43 (dimensionsOpt -> dimensions .)
    DIFF            reduce using rule 43 (dimensionsOpt -> dimensions .)
    EQ              reduce using rule 43 (dimensionsOpt -> dimensions .)
    LTEQ            reduce using rule 43 (dimensionsOpt -> dimensions .)
    GTEQ            reduce using rule 43 (dimensionsOpt -> dimensions .)
    AND             reduce using rule 43 (dimensionsOpt -> dimensions .)
    OR              reduce using rule 43 (dimensionsOpt -> dimensions .)
    ]               reduce using rule 43 (dimensionsOpt -> dimensions .)
    )               reduce using rule 43 (dimensionsOpt -> dimensions .)


state 86

    (154) dimensions -> [ . hyperexpression ] dimensionsB
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    sign                           shift and go to state 101
    signB                          shift and go to state 92
    hyperexpression                shift and go to state 123
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 87

    (20) declarationB -> ID push_operand dimensionsOpt .

    =               reduce using rule 20 (declarationB -> ID push_operand dimensionsOpt .)
    ,               reduce using rule 20 (declarationB -> ID push_operand dimensionsOpt .)
    ;               reduce using rule 20 (declarationB -> ID push_operand dimensionsOpt .)


state 88

    (44) dimensionsOpt -> empty .

    =               reduce using rule 44 (dimensionsOpt -> empty .)
    ,               reduce using rule 44 (dimensionsOpt -> empty .)
    ;               reduce using rule 44 (dimensionsOpt -> empty .)
    /               reduce using rule 44 (dimensionsOpt -> empty .)
    *               reduce using rule 44 (dimensionsOpt -> empty .)
    -               reduce using rule 44 (dimensionsOpt -> empty .)
    +               reduce using rule 44 (dimensionsOpt -> empty .)
    <               reduce using rule 44 (dimensionsOpt -> empty .)
    >               reduce using rule 44 (dimensionsOpt -> empty .)
    DIFF            reduce using rule 44 (dimensionsOpt -> empty .)
    EQ              reduce using rule 44 (dimensionsOpt -> empty .)
    LTEQ            reduce using rule 44 (dimensionsOpt -> empty .)
    GTEQ            reduce using rule 44 (dimensionsOpt -> empty .)
    AND             reduce using rule 44 (dimensionsOpt -> empty .)
    OR              reduce using rule 44 (dimensionsOpt -> empty .)
    ]               reduce using rule 44 (dimensionsOpt -> empty .)
    )               reduce using rule 44 (dimensionsOpt -> empty .)


state 89

    (27) declarationC -> , repush_type . declarationB declarationC
    (20) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 38

    declarationB                   shift and go to state 124

state 90

    (26) declarationC -> = push_operator . hyperexpression quadruple_assign declarationD
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    signB                          shift and go to state 92
    hyperexpression                shift and go to state 125
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 91

    (31) main -> MAIN ( ) . seen_main block
    (32) seen_main -> .

    {               reduce using rule 32 (seen_main -> .)

    seen_main                      shift and go to state 126

state 92

    (92) factor -> signB . constant
    (106) constant -> . FCONST seen_fconst
    (107) constant -> . ICONST seen_iconst
    (108) constant -> . SCONST seen_sconst
    (109) constant -> . TRUE seen_true
    (110) constant -> . FALSE seen_false

    FCONST          shift and go to state 128
    ICONST          shift and go to state 130
    SCONST          shift and go to state 129
    TRUE            shift and go to state 132
    FALSE           shift and go to state 131

    constant                       shift and go to state 127

state 93

    (93) factor -> ( . seen_parentheses hyperexpression )
    (97) seen_parentheses -> .

    (               reduce using rule 97 (seen_parentheses -> .)
    ID              reduce using rule 97 (seen_parentheses -> .)
    +               reduce using rule 97 (seen_parentheses -> .)
    -               reduce using rule 97 (seen_parentheses -> .)
    FCONST          reduce using rule 97 (seen_parentheses -> .)
    ICONST          reduce using rule 97 (seen_parentheses -> .)
    SCONST          reduce using rule 97 (seen_parentheses -> .)
    TRUE            reduce using rule 97 (seen_parentheses -> .)
    FALSE           reduce using rule 97 (seen_parentheses -> .)

    seen_parentheses               shift and go to state 133

state 94

    (111) sign -> + .

    FCONST          reduce using rule 111 (sign -> + .)
    ICONST          reduce using rule 111 (sign -> + .)
    SCONST          reduce using rule 111 (sign -> + .)
    TRUE            reduce using rule 111 (sign -> + .)
    FALSE           reduce using rule 111 (sign -> + .)


state 95

    (112) sign -> - .

    FCONST          reduce using rule 112 (sign -> - .)
    ICONST          reduce using rule 112 (sign -> - .)
    SCONST          reduce using rule 112 (sign -> - .)
    TRUE            reduce using rule 112 (sign -> - .)
    FALSE           reduce using rule 112 (sign -> - .)


state 96

    (157) return -> RETURN hyperexpression . return_quadruple
    (158) return_quadruple -> .

    ;               reduce using rule 158 (return_quadruple -> .)

    return_quadruple               shift and go to state 134

state 97

    (87) term -> factor . seen_factor termB
    (88) seen_factor -> .

    /               reduce using rule 88 (seen_factor -> .)
    *               reduce using rule 88 (seen_factor -> .)
    -               reduce using rule 88 (seen_factor -> .)
    +               reduce using rule 88 (seen_factor -> .)
    <               reduce using rule 88 (seen_factor -> .)
    >               reduce using rule 88 (seen_factor -> .)
    DIFF            reduce using rule 88 (seen_factor -> .)
    EQ              reduce using rule 88 (seen_factor -> .)
    LTEQ            reduce using rule 88 (seen_factor -> .)
    GTEQ            reduce using rule 88 (seen_factor -> .)
    AND             reduce using rule 88 (seen_factor -> .)
    OR              reduce using rule 88 (seen_factor -> .)
    ;               reduce using rule 88 (seen_factor -> .)
    ]               reduce using rule 88 (seen_factor -> .)
    ,               reduce using rule 88 (seen_factor -> .)
    )               reduce using rule 88 (seen_factor -> .)

    seen_factor                    shift and go to state 135

state 98

    (100) signB -> empty .

    FCONST          reduce using rule 100 (signB -> empty .)
    ICONST          reduce using rule 100 (signB -> empty .)
    SCONST          reduce using rule 100 (signB -> empty .)
    TRUE            reduce using rule 100 (signB -> empty .)
    FALSE           reduce using rule 100 (signB -> empty .)


state 99

    (94) factor -> funccall . seen_factor_funccall
    (96) seen_factor_funccall -> .

    /               reduce using rule 96 (seen_factor_funccall -> .)
    *               reduce using rule 96 (seen_factor_funccall -> .)
    -               reduce using rule 96 (seen_factor_funccall -> .)
    +               reduce using rule 96 (seen_factor_funccall -> .)
    <               reduce using rule 96 (seen_factor_funccall -> .)
    >               reduce using rule 96 (seen_factor_funccall -> .)
    DIFF            reduce using rule 96 (seen_factor_funccall -> .)
    EQ              reduce using rule 96 (seen_factor_funccall -> .)
    LTEQ            reduce using rule 96 (seen_factor_funccall -> .)
    GTEQ            reduce using rule 96 (seen_factor_funccall -> .)
    AND             reduce using rule 96 (seen_factor_funccall -> .)
    OR              reduce using rule 96 (seen_factor_funccall -> .)
    ;               reduce using rule 96 (seen_factor_funccall -> .)
    ]               reduce using rule 96 (seen_factor_funccall -> .)
    ,               reduce using rule 96 (seen_factor_funccall -> .)
    )               reduce using rule 96 (seen_factor_funccall -> .)

    seen_factor_funccall           shift and go to state 136

state 100

    (68) hyperexpression -> superexpression . hyperexpressionB
    (69) hyperexpressionB -> . OR push_operator hyperexpression
    (70) hyperexpressionB -> . empty
    (162) empty -> .

    OR              shift and go to state 138
    ;               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    hyperexpressionB               shift and go to state 137
    empty                          shift and go to state 139

state 101

    (99) signB -> sign .

    FCONST          reduce using rule 99 (signB -> sign .)
    ICONST          reduce using rule 99 (signB -> sign .)
    SCONST          reduce using rule 99 (signB -> sign .)
    TRUE            reduce using rule 99 (signB -> sign .)
    FALSE           reduce using rule 99 (signB -> sign .)


state 102

    (95) factor -> ID . seen_ID dimensionsOpt
    (147) funccall -> ID . seen_a_factor_funccall ( funccallB funccallC
    (98) seen_ID -> .
    (148) seen_a_factor_funccall -> .

    [               reduce using rule 98 (seen_ID -> .)
    /               reduce using rule 98 (seen_ID -> .)
    *               reduce using rule 98 (seen_ID -> .)
    -               reduce using rule 98 (seen_ID -> .)
    +               reduce using rule 98 (seen_ID -> .)
    <               reduce using rule 98 (seen_ID -> .)
    >               reduce using rule 98 (seen_ID -> .)
    DIFF            reduce using rule 98 (seen_ID -> .)
    EQ              reduce using rule 98 (seen_ID -> .)
    LTEQ            reduce using rule 98 (seen_ID -> .)
    GTEQ            reduce using rule 98 (seen_ID -> .)
    AND             reduce using rule 98 (seen_ID -> .)
    OR              reduce using rule 98 (seen_ID -> .)
    ;               reduce using rule 98 (seen_ID -> .)
    ]               reduce using rule 98 (seen_ID -> .)
    ,               reduce using rule 98 (seen_ID -> .)
    )               reduce using rule 98 (seen_ID -> .)
    (               reduce using rule 148 (seen_a_factor_funccall -> .)

    seen_ID                        shift and go to state 141
    seen_a_factor_funccall         shift and go to state 140

state 103

    (82) exp -> term . seen_term expB
    (83) seen_term -> .

    -               reduce using rule 83 (seen_term -> .)
    +               reduce using rule 83 (seen_term -> .)
    <               reduce using rule 83 (seen_term -> .)
    >               reduce using rule 83 (seen_term -> .)
    DIFF            reduce using rule 83 (seen_term -> .)
    EQ              reduce using rule 83 (seen_term -> .)
    LTEQ            reduce using rule 83 (seen_term -> .)
    GTEQ            reduce using rule 83 (seen_term -> .)
    AND             reduce using rule 83 (seen_term -> .)
    OR              reduce using rule 83 (seen_term -> .)
    ;               reduce using rule 83 (seen_term -> .)
    ]               reduce using rule 83 (seen_term -> .)
    ,               reduce using rule 83 (seen_term -> .)
    )               reduce using rule 83 (seen_term -> .)

    seen_term                      shift and go to state 142

state 104

    (74) expression -> exp . expressionB
    (75) expressionB -> . < push_operator exp
    (76) expressionB -> . > push_operator exp
    (77) expressionB -> . DIFF push_operator exp
    (78) expressionB -> . EQ push_operator exp
    (79) expressionB -> . LTEQ push_operator exp
    (80) expressionB -> . GTEQ push_operator exp
    (81) expressionB -> . empty
    (162) empty -> .

    <               shift and go to state 148
    >               shift and go to state 150
    DIFF            shift and go to state 146
    EQ              shift and go to state 147
    LTEQ            shift and go to state 144
    GTEQ            shift and go to state 143
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 149
    expressionB                    shift and go to state 145

state 105

    (71) superexpression -> expression . superexpressionB
    (72) superexpressionB -> . AND push_operator superexpression
    (73) superexpressionB -> . empty
    (162) empty -> .

    AND             shift and go to state 151
    OR              reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    empty                          shift and go to state 153
    superexpressionB               shift and go to state 152

state 106

    (130) read -> READ ( . validate_id push_operand read_quadruple readB )
    (131) validate_id -> . ID

    ID              shift and go to state 155

    validate_id                    shift and go to state 154

state 107

    (51) instruction -> assignfunccall ; .

    PRINT           reduce using rule 51 (instruction -> assignfunccall ; .)
    RETURN          reduce using rule 51 (instruction -> assignfunccall ; .)
    READ            reduce using rule 51 (instruction -> assignfunccall ; .)
    ID              reduce using rule 51 (instruction -> assignfunccall ; .)
    INT             reduce using rule 51 (instruction -> assignfunccall ; .)
    FLOAT           reduce using rule 51 (instruction -> assignfunccall ; .)
    STRING          reduce using rule 51 (instruction -> assignfunccall ; .)
    BOOL            reduce using rule 51 (instruction -> assignfunccall ; .)
    IF              reduce using rule 51 (instruction -> assignfunccall ; .)
    WHILE           reduce using rule 51 (instruction -> assignfunccall ; .)
    FOR             reduce using rule 51 (instruction -> assignfunccall ; .)
    #               reduce using rule 51 (instruction -> assignfunccall ; .)
    TRACKDECISION   reduce using rule 51 (instruction -> assignfunccall ; .)
    FORGETDECISION  reduce using rule 51 (instruction -> assignfunccall ; .)
    }               reduce using rule 51 (instruction -> assignfunccall ; .)


state 108

    (60) assignfunccall -> id_record_line push_operand . assignfunccallB
    (62) assignfunccallB -> . ( pop_operand seen_a_funccall funccallB funccallC
    (63) assignfunccallB -> . assignB
    (42) assignB -> . dimensionsOpt = push_operator hyperexpression quadruple_assign
    (43) dimensionsOpt -> . dimensions
    (44) dimensionsOpt -> . empty
    (154) dimensions -> . [ hyperexpression ] dimensionsB
    (162) empty -> .

    (               shift and go to state 157
    [               shift and go to state 86
    =               reduce using rule 162 (empty -> .)

    dimensions                     shift and go to state 85
    assignfunccallB                shift and go to state 156
    assignB                        shift and go to state 158
    dimensionsOpt                  shift and go to state 159
    empty                          shift and go to state 88

state 109

    (135) output -> PRINT ( . outputB
    (136) outputB -> . hyperexpression print_quadruple outputC
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    signB                          shift and go to state 92
    hyperexpression                shift and go to state 160
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    outputB                        shift and go to state 161
    expression                     shift and go to state 105

state 110

    (142) localvardirectiveB -> FORGET .

    ID              reduce using rule 142 (localvardirectiveB -> FORGET .)


state 111

    (143) localmsgdirective -> # SHOW . SCONST

    SCONST          shift and go to state 162


state 112

    (141) localvardirectiveB -> TRACK .

    ID              reduce using rule 141 (localvardirectiveB -> TRACK .)


state 113

    (140) localvardirective -> # localvardirectiveB . ID

    ID              shift and go to state 163


state 114

    (53) instruction -> return ; .

    PRINT           reduce using rule 53 (instruction -> return ; .)
    RETURN          reduce using rule 53 (instruction -> return ; .)
    READ            reduce using rule 53 (instruction -> return ; .)
    ID              reduce using rule 53 (instruction -> return ; .)
    INT             reduce using rule 53 (instruction -> return ; .)
    FLOAT           reduce using rule 53 (instruction -> return ; .)
    STRING          reduce using rule 53 (instruction -> return ; .)
    BOOL            reduce using rule 53 (instruction -> return ; .)
    IF              reduce using rule 53 (instruction -> return ; .)
    WHILE           reduce using rule 53 (instruction -> return ; .)
    FOR             reduce using rule 53 (instruction -> return ; .)
    #               reduce using rule 53 (instruction -> return ; .)
    TRACKDECISION   reduce using rule 53 (instruction -> return ; .)
    FORGETDECISION  reduce using rule 53 (instruction -> return ; .)
    }               reduce using rule 53 (instruction -> return ; .)


state 115

    (126) forloop -> register_for ( . assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (41) assign -> . id_record_line push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign
    (40) id_record_line -> . ID

    ID              shift and go to state 77

    id_record_line                 shift and go to state 164
    assign                         shift and go to state 165

state 116

    (54) instruction -> read ; .

    PRINT           reduce using rule 54 (instruction -> read ; .)
    RETURN          reduce using rule 54 (instruction -> read ; .)
    READ            reduce using rule 54 (instruction -> read ; .)
    ID              reduce using rule 54 (instruction -> read ; .)
    INT             reduce using rule 54 (instruction -> read ; .)
    FLOAT           reduce using rule 54 (instruction -> read ; .)
    STRING          reduce using rule 54 (instruction -> read ; .)
    BOOL            reduce using rule 54 (instruction -> read ; .)
    IF              reduce using rule 54 (instruction -> read ; .)
    WHILE           reduce using rule 54 (instruction -> read ; .)
    FOR             reduce using rule 54 (instruction -> read ; .)
    #               reduce using rule 54 (instruction -> read ; .)
    TRACKDECISION   reduce using rule 54 (instruction -> read ; .)
    FORGETDECISION  reduce using rule 54 (instruction -> read ; .)
    }               reduce using rule 54 (instruction -> read ; .)


state 117

    (45) condition -> register_if ( . hyperexpression condition_quadruple ) block else endcondition_quadruple
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    signB                          shift and go to state 92
    hyperexpression                shift and go to state 166
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 118

    (37) block -> { instructionsOpt } .

    DEF             reduce using rule 37 (block -> { instructionsOpt } .)
    $end            reduce using rule 37 (block -> { instructionsOpt } .)
    ELSE            reduce using rule 37 (block -> { instructionsOpt } .)
    PRINT           reduce using rule 37 (block -> { instructionsOpt } .)
    RETURN          reduce using rule 37 (block -> { instructionsOpt } .)
    READ            reduce using rule 37 (block -> { instructionsOpt } .)
    ID              reduce using rule 37 (block -> { instructionsOpt } .)
    INT             reduce using rule 37 (block -> { instructionsOpt } .)
    FLOAT           reduce using rule 37 (block -> { instructionsOpt } .)
    STRING          reduce using rule 37 (block -> { instructionsOpt } .)
    BOOL            reduce using rule 37 (block -> { instructionsOpt } .)
    IF              reduce using rule 37 (block -> { instructionsOpt } .)
    WHILE           reduce using rule 37 (block -> { instructionsOpt } .)
    FOR             reduce using rule 37 (block -> { instructionsOpt } .)
    #               reduce using rule 37 (block -> { instructionsOpt } .)
    TRACKDECISION   reduce using rule 37 (block -> { instructionsOpt } .)
    FORGETDECISION  reduce using rule 37 (block -> { instructionsOpt } .)
    }               reduce using rule 37 (block -> { instructionsOpt } .)
    MAIN            reduce using rule 37 (block -> { instructionsOpt } .)


state 119

    (116) whileloop -> register_while init_while . ( hyperexpression ) while_quadruple block endwhile_quadruple

    (               shift and go to state 167


state 120

    (38) instructionsOpt -> instruction instructionsOpt .

    }               reduce using rule 38 (instructionsOpt -> instruction instructionsOpt .)


state 121

    (52) instruction -> output ; .

    PRINT           reduce using rule 52 (instruction -> output ; .)
    RETURN          reduce using rule 52 (instruction -> output ; .)
    READ            reduce using rule 52 (instruction -> output ; .)
    ID              reduce using rule 52 (instruction -> output ; .)
    INT             reduce using rule 52 (instruction -> output ; .)
    FLOAT           reduce using rule 52 (instruction -> output ; .)
    STRING          reduce using rule 52 (instruction -> output ; .)
    BOOL            reduce using rule 52 (instruction -> output ; .)
    IF              reduce using rule 52 (instruction -> output ; .)
    WHILE           reduce using rule 52 (instruction -> output ; .)
    FOR             reduce using rule 52 (instruction -> output ; .)
    #               reduce using rule 52 (instruction -> output ; .)
    TRACKDECISION   reduce using rule 52 (instruction -> output ; .)
    FORGETDECISION  reduce using rule 52 (instruction -> output ; .)
    }               reduce using rule 52 (instruction -> output ; .)


state 122

    (34) func -> DEF returntype ID ( . paramsOpt )
    (35) paramsOpt -> . params paramsB
    (36) paramsOpt -> . empty
    (159) params -> . type ID
    (162) empty -> .
    (120) type -> . INT
    (121) type -> . FLOAT
    (122) type -> . STRING
    (123) type -> . BOOL

    )               reduce using rule 162 (empty -> .)
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 15
    BOOL            shift and go to state 18

    paramsOpt                      shift and go to state 168
    params                         shift and go to state 169
    type                           shift and go to state 171
    empty                          shift and go to state 170

state 123

    (154) dimensions -> [ hyperexpression . ] dimensionsB

    ]               shift and go to state 172


state 124

    (27) declarationC -> , repush_type declarationB . declarationC
    (26) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (27) declarationC -> . , repush_type declarationB declarationC
    (28) declarationC -> . ;

    =               shift and go to state 52
    ,               shift and go to state 49
    ;               shift and go to state 50

    declarationC                   shift and go to state 173

state 125

    (26) declarationC -> = push_operator hyperexpression . quadruple_assign declarationD
    (25) quadruple_assign -> .

    ,               reduce using rule 25 (quadruple_assign -> .)
    ;               reduce using rule 25 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 174

state 126

    (31) main -> MAIN ( ) seen_main . block
    (37) block -> . { instructionsOpt }

    {               shift and go to state 43

    block                          shift and go to state 175

state 127

    (92) factor -> signB constant .

    /               reduce using rule 92 (factor -> signB constant .)
    *               reduce using rule 92 (factor -> signB constant .)
    -               reduce using rule 92 (factor -> signB constant .)
    +               reduce using rule 92 (factor -> signB constant .)
    <               reduce using rule 92 (factor -> signB constant .)
    >               reduce using rule 92 (factor -> signB constant .)
    DIFF            reduce using rule 92 (factor -> signB constant .)
    EQ              reduce using rule 92 (factor -> signB constant .)
    LTEQ            reduce using rule 92 (factor -> signB constant .)
    GTEQ            reduce using rule 92 (factor -> signB constant .)
    AND             reduce using rule 92 (factor -> signB constant .)
    OR              reduce using rule 92 (factor -> signB constant .)
    ;               reduce using rule 92 (factor -> signB constant .)
    )               reduce using rule 92 (factor -> signB constant .)
    ]               reduce using rule 92 (factor -> signB constant .)
    ,               reduce using rule 92 (factor -> signB constant .)


state 128

    (106) constant -> FCONST . seen_fconst
    (101) seen_fconst -> .

    /               reduce using rule 101 (seen_fconst -> .)
    *               reduce using rule 101 (seen_fconst -> .)
    -               reduce using rule 101 (seen_fconst -> .)
    +               reduce using rule 101 (seen_fconst -> .)
    <               reduce using rule 101 (seen_fconst -> .)
    >               reduce using rule 101 (seen_fconst -> .)
    DIFF            reduce using rule 101 (seen_fconst -> .)
    EQ              reduce using rule 101 (seen_fconst -> .)
    LTEQ            reduce using rule 101 (seen_fconst -> .)
    GTEQ            reduce using rule 101 (seen_fconst -> .)
    AND             reduce using rule 101 (seen_fconst -> .)
    OR              reduce using rule 101 (seen_fconst -> .)
    ;               reduce using rule 101 (seen_fconst -> .)
    ]               reduce using rule 101 (seen_fconst -> .)
    ,               reduce using rule 101 (seen_fconst -> .)
    )               reduce using rule 101 (seen_fconst -> .)

    seen_fconst                    shift and go to state 176

state 129

    (108) constant -> SCONST . seen_sconst
    (103) seen_sconst -> .

    /               reduce using rule 103 (seen_sconst -> .)
    *               reduce using rule 103 (seen_sconst -> .)
    -               reduce using rule 103 (seen_sconst -> .)
    +               reduce using rule 103 (seen_sconst -> .)
    <               reduce using rule 103 (seen_sconst -> .)
    >               reduce using rule 103 (seen_sconst -> .)
    DIFF            reduce using rule 103 (seen_sconst -> .)
    EQ              reduce using rule 103 (seen_sconst -> .)
    LTEQ            reduce using rule 103 (seen_sconst -> .)
    GTEQ            reduce using rule 103 (seen_sconst -> .)
    AND             reduce using rule 103 (seen_sconst -> .)
    OR              reduce using rule 103 (seen_sconst -> .)
    ;               reduce using rule 103 (seen_sconst -> .)
    ]               reduce using rule 103 (seen_sconst -> .)
    ,               reduce using rule 103 (seen_sconst -> .)
    )               reduce using rule 103 (seen_sconst -> .)

    seen_sconst                    shift and go to state 177

state 130

    (107) constant -> ICONST . seen_iconst
    (102) seen_iconst -> .

    /               reduce using rule 102 (seen_iconst -> .)
    *               reduce using rule 102 (seen_iconst -> .)
    -               reduce using rule 102 (seen_iconst -> .)
    +               reduce using rule 102 (seen_iconst -> .)
    <               reduce using rule 102 (seen_iconst -> .)
    >               reduce using rule 102 (seen_iconst -> .)
    DIFF            reduce using rule 102 (seen_iconst -> .)
    EQ              reduce using rule 102 (seen_iconst -> .)
    LTEQ            reduce using rule 102 (seen_iconst -> .)
    GTEQ            reduce using rule 102 (seen_iconst -> .)
    AND             reduce using rule 102 (seen_iconst -> .)
    OR              reduce using rule 102 (seen_iconst -> .)
    ;               reduce using rule 102 (seen_iconst -> .)
    ]               reduce using rule 102 (seen_iconst -> .)
    ,               reduce using rule 102 (seen_iconst -> .)
    )               reduce using rule 102 (seen_iconst -> .)

    seen_iconst                    shift and go to state 178

state 131

    (110) constant -> FALSE . seen_false
    (105) seen_false -> .

    /               reduce using rule 105 (seen_false -> .)
    *               reduce using rule 105 (seen_false -> .)
    -               reduce using rule 105 (seen_false -> .)
    +               reduce using rule 105 (seen_false -> .)
    <               reduce using rule 105 (seen_false -> .)
    >               reduce using rule 105 (seen_false -> .)
    DIFF            reduce using rule 105 (seen_false -> .)
    EQ              reduce using rule 105 (seen_false -> .)
    LTEQ            reduce using rule 105 (seen_false -> .)
    GTEQ            reduce using rule 105 (seen_false -> .)
    AND             reduce using rule 105 (seen_false -> .)
    OR              reduce using rule 105 (seen_false -> .)
    ;               reduce using rule 105 (seen_false -> .)
    ]               reduce using rule 105 (seen_false -> .)
    ,               reduce using rule 105 (seen_false -> .)
    )               reduce using rule 105 (seen_false -> .)

    seen_false                     shift and go to state 179

state 132

    (109) constant -> TRUE . seen_true
    (104) seen_true -> .

    /               reduce using rule 104 (seen_true -> .)
    *               reduce using rule 104 (seen_true -> .)
    -               reduce using rule 104 (seen_true -> .)
    +               reduce using rule 104 (seen_true -> .)
    <               reduce using rule 104 (seen_true -> .)
    >               reduce using rule 104 (seen_true -> .)
    DIFF            reduce using rule 104 (seen_true -> .)
    EQ              reduce using rule 104 (seen_true -> .)
    LTEQ            reduce using rule 104 (seen_true -> .)
    GTEQ            reduce using rule 104 (seen_true -> .)
    AND             reduce using rule 104 (seen_true -> .)
    OR              reduce using rule 104 (seen_true -> .)
    ;               reduce using rule 104 (seen_true -> .)
    ]               reduce using rule 104 (seen_true -> .)
    ,               reduce using rule 104 (seen_true -> .)
    )               reduce using rule 104 (seen_true -> .)

    seen_true                      shift and go to state 180

state 133

    (93) factor -> ( seen_parentheses . hyperexpression )
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    sign                           shift and go to state 101
    signB                          shift and go to state 92
    hyperexpression                shift and go to state 181
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 134

    (157) return -> RETURN hyperexpression return_quadruple .

    ;               reduce using rule 157 (return -> RETURN hyperexpression return_quadruple .)


state 135

    (87) term -> factor seen_factor . termB
    (89) termB -> . / push_operator term
    (90) termB -> . * push_operator term
    (91) termB -> . empty
    (162) empty -> .

    /               shift and go to state 185
    *               shift and go to state 182
    -               reduce using rule 162 (empty -> .)
    +               reduce using rule 162 (empty -> .)
    <               reduce using rule 162 (empty -> .)
    >               reduce using rule 162 (empty -> .)
    DIFF            reduce using rule 162 (empty -> .)
    EQ              reduce using rule 162 (empty -> .)
    LTEQ            reduce using rule 162 (empty -> .)
    GTEQ            reduce using rule 162 (empty -> .)
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    termB                          shift and go to state 183
    empty                          shift and go to state 184

state 136

    (94) factor -> funccall seen_factor_funccall .

    /               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    *               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    -               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    +               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    <               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    >               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    DIFF            reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    EQ              reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    LTEQ            reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    GTEQ            reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    AND             reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    OR              reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    ;               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    )               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    ]               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    ,               reduce using rule 94 (factor -> funccall seen_factor_funccall .)


state 137

    (68) hyperexpression -> superexpression hyperexpressionB .

    ;               reduce using rule 68 (hyperexpression -> superexpression hyperexpressionB .)
    ,               reduce using rule 68 (hyperexpression -> superexpression hyperexpressionB .)
    )               reduce using rule 68 (hyperexpression -> superexpression hyperexpressionB .)
    ]               reduce using rule 68 (hyperexpression -> superexpression hyperexpressionB .)


state 138

    (69) hyperexpressionB -> OR . push_operator hyperexpression
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 186

state 139

    (70) hyperexpressionB -> empty .

    ;               reduce using rule 70 (hyperexpressionB -> empty .)
    ]               reduce using rule 70 (hyperexpressionB -> empty .)
    ,               reduce using rule 70 (hyperexpressionB -> empty .)
    )               reduce using rule 70 (hyperexpressionB -> empty .)


state 140

    (147) funccall -> ID seen_a_factor_funccall . ( funccallB funccallC

    (               shift and go to state 187


state 141

    (95) factor -> ID seen_ID . dimensionsOpt
    (43) dimensionsOpt -> . dimensions
    (44) dimensionsOpt -> . empty
    (154) dimensions -> . [ hyperexpression ] dimensionsB
    (162) empty -> .

    [               shift and go to state 86
    /               reduce using rule 162 (empty -> .)
    *               reduce using rule 162 (empty -> .)
    -               reduce using rule 162 (empty -> .)
    +               reduce using rule 162 (empty -> .)
    <               reduce using rule 162 (empty -> .)
    >               reduce using rule 162 (empty -> .)
    DIFF            reduce using rule 162 (empty -> .)
    EQ              reduce using rule 162 (empty -> .)
    LTEQ            reduce using rule 162 (empty -> .)
    GTEQ            reduce using rule 162 (empty -> .)
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    dimensions                     shift and go to state 85
    dimensionsOpt                  shift and go to state 188
    empty                          shift and go to state 88

state 142

    (82) exp -> term seen_term . expB
    (84) expB -> . - push_operator exp
    (85) expB -> . + push_operator exp
    (86) expB -> . empty
    (162) empty -> .

    -               shift and go to state 190
    +               shift and go to state 189
    <               reduce using rule 162 (empty -> .)
    >               reduce using rule 162 (empty -> .)
    DIFF            reduce using rule 162 (empty -> .)
    EQ              reduce using rule 162 (empty -> .)
    LTEQ            reduce using rule 162 (empty -> .)
    GTEQ            reduce using rule 162 (empty -> .)
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    expB                           shift and go to state 191
    empty                          shift and go to state 192

state 143

    (80) expressionB -> GTEQ . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 193

state 144

    (79) expressionB -> LTEQ . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 194

state 145

    (74) expression -> exp expressionB .

    AND             reduce using rule 74 (expression -> exp expressionB .)
    OR              reduce using rule 74 (expression -> exp expressionB .)
    ,               reduce using rule 74 (expression -> exp expressionB .)
    )               reduce using rule 74 (expression -> exp expressionB .)
    ]               reduce using rule 74 (expression -> exp expressionB .)
    ;               reduce using rule 74 (expression -> exp expressionB .)


state 146

    (77) expressionB -> DIFF . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 195

state 147

    (78) expressionB -> EQ . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 196

state 148

    (75) expressionB -> < . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 197

state 149

    (81) expressionB -> empty .

    AND             reduce using rule 81 (expressionB -> empty .)
    OR              reduce using rule 81 (expressionB -> empty .)
    ;               reduce using rule 81 (expressionB -> empty .)
    ]               reduce using rule 81 (expressionB -> empty .)
    ,               reduce using rule 81 (expressionB -> empty .)
    )               reduce using rule 81 (expressionB -> empty .)


state 150

    (76) expressionB -> > . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 198

state 151

    (72) superexpressionB -> AND . push_operator superexpression
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 199

state 152

    (71) superexpression -> expression superexpressionB .

    OR              reduce using rule 71 (superexpression -> expression superexpressionB .)
    ;               reduce using rule 71 (superexpression -> expression superexpressionB .)
    ]               reduce using rule 71 (superexpression -> expression superexpressionB .)
    ,               reduce using rule 71 (superexpression -> expression superexpressionB .)
    )               reduce using rule 71 (superexpression -> expression superexpressionB .)


state 153

    (73) superexpressionB -> empty .

    OR              reduce using rule 73 (superexpressionB -> empty .)
    ;               reduce using rule 73 (superexpressionB -> empty .)
    ]               reduce using rule 73 (superexpressionB -> empty .)
    ,               reduce using rule 73 (superexpressionB -> empty .)
    )               reduce using rule 73 (superexpressionB -> empty .)


state 154

    (130) read -> READ ( validate_id . push_operand read_quadruple readB )
    (21) push_operand -> .

    ,               reduce using rule 21 (push_operand -> .)
    )               reduce using rule 21 (push_operand -> .)

    push_operand                   shift and go to state 200

state 155

    (131) validate_id -> ID .

    ,               reduce using rule 131 (validate_id -> ID .)
    )               reduce using rule 131 (validate_id -> ID .)


state 156

    (60) assignfunccall -> id_record_line push_operand assignfunccallB .

    ;               reduce using rule 60 (assignfunccall -> id_record_line push_operand assignfunccallB .)


state 157

    (62) assignfunccallB -> ( . pop_operand seen_a_funccall funccallB funccallC
    (61) pop_operand -> .

    (               reduce using rule 61 (pop_operand -> .)
    ID              reduce using rule 61 (pop_operand -> .)
    +               reduce using rule 61 (pop_operand -> .)
    -               reduce using rule 61 (pop_operand -> .)
    ,               reduce using rule 61 (pop_operand -> .)
    )               reduce using rule 61 (pop_operand -> .)
    FCONST          reduce using rule 61 (pop_operand -> .)
    ICONST          reduce using rule 61 (pop_operand -> .)
    SCONST          reduce using rule 61 (pop_operand -> .)
    TRUE            reduce using rule 61 (pop_operand -> .)
    FALSE           reduce using rule 61 (pop_operand -> .)

    pop_operand                    shift and go to state 201

state 158

    (63) assignfunccallB -> assignB .

    ;               reduce using rule 63 (assignfunccallB -> assignB .)


state 159

    (42) assignB -> dimensionsOpt . = push_operator hyperexpression quadruple_assign

    =               shift and go to state 202


state 160

    (136) outputB -> hyperexpression . print_quadruple outputC
    (137) print_quadruple -> .

    )               reduce using rule 137 (print_quadruple -> .)
    ,               reduce using rule 137 (print_quadruple -> .)

    print_quadruple                shift and go to state 203

state 161

    (135) output -> PRINT ( outputB .

    ;               reduce using rule 135 (output -> PRINT ( outputB .)


state 162

    (143) localmsgdirective -> # SHOW SCONST .

    PRINT           reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    RETURN          reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    READ            reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    ID              reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    INT             reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    FLOAT           reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    STRING          reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    BOOL            reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    IF              reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    WHILE           reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    FOR             reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    #               reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    TRACKDECISION   reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    FORGETDECISION  reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)
    }               reduce using rule 143 (localmsgdirective -> # SHOW SCONST .)


state 163

    (140) localvardirective -> # localvardirectiveB ID .

    PRINT           reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    RETURN          reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    READ            reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    ID              reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    INT             reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    FLOAT           reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    STRING          reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    BOOL            reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    IF              reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    WHILE           reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    FOR             reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    #               reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    TRACKDECISION   reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    FORGETDECISION  reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)
    }               reduce using rule 140 (localvardirective -> # localvardirectiveB ID .)


state 164

    (41) assign -> id_record_line . push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign
    (21) push_operand -> .

    [               reduce using rule 21 (push_operand -> .)
    =               reduce using rule 21 (push_operand -> .)

    push_operand                   shift and go to state 204

state 165

    (126) forloop -> register_for ( assign . ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple

    ;               shift and go to state 205


state 166

    (45) condition -> register_if ( hyperexpression . condition_quadruple ) block else endcondition_quadruple
    (48) condition_quadruple -> .

    )               reduce using rule 48 (condition_quadruple -> .)

    condition_quadruple            shift and go to state 206

state 167

    (116) whileloop -> register_while init_while ( . hyperexpression ) while_quadruple block endwhile_quadruple
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    signB                          shift and go to state 92
    hyperexpression                shift and go to state 207
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 168

    (34) func -> DEF returntype ID ( paramsOpt . )

    )               shift and go to state 208


state 169

    (35) paramsOpt -> params . paramsB
    (160) paramsB -> . , params paramsB
    (161) paramsB -> . empty
    (162) empty -> .

    ,               shift and go to state 210
    )               reduce using rule 162 (empty -> .)

    paramsB                        shift and go to state 209
    empty                          shift and go to state 211

state 170

    (36) paramsOpt -> empty .

    )               reduce using rule 36 (paramsOpt -> empty .)


state 171

    (159) params -> type . ID

    ID              shift and go to state 212


state 172

    (154) dimensions -> [ hyperexpression ] . dimensionsB
    (155) dimensionsB -> . [ hyperexpression ]
    (156) dimensionsB -> . empty
    (162) empty -> .

    [               shift and go to state 214
    =               reduce using rule 162 (empty -> .)
    ,               reduce using rule 162 (empty -> .)
    ;               reduce using rule 162 (empty -> .)
    /               reduce using rule 162 (empty -> .)
    *               reduce using rule 162 (empty -> .)
    -               reduce using rule 162 (empty -> .)
    +               reduce using rule 162 (empty -> .)
    <               reduce using rule 162 (empty -> .)
    >               reduce using rule 162 (empty -> .)
    DIFF            reduce using rule 162 (empty -> .)
    EQ              reduce using rule 162 (empty -> .)
    LTEQ            reduce using rule 162 (empty -> .)
    GTEQ            reduce using rule 162 (empty -> .)
    AND             reduce using rule 162 (empty -> .)
    OR              reduce using rule 162 (empty -> .)
    ]               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)

    dimensionsB                    shift and go to state 213
    empty                          shift and go to state 215

state 173

    (27) declarationC -> , repush_type declarationB declarationC .

    INT             reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    FLOAT           reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    STRING          reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    BOOL            reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    DEF             reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    MAIN            reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    PRINT           reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    RETURN          reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    READ            reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    ID              reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    IF              reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    WHILE           reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    FOR             reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    #               reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    }               reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)


state 174

    (26) declarationC -> = push_operator hyperexpression quadruple_assign . declarationD
    (29) declarationD -> . , repush_type declarationB declarationC
    (30) declarationD -> . ;

    ,               shift and go to state 216
    ;               shift and go to state 217

    declarationD                   shift and go to state 218

state 175

    (31) main -> MAIN ( ) seen_main block .

    DEF             reduce using rule 31 (main -> MAIN ( ) seen_main block .)
    $end            reduce using rule 31 (main -> MAIN ( ) seen_main block .)


state 176

    (106) constant -> FCONST seen_fconst .

    /               reduce using rule 106 (constant -> FCONST seen_fconst .)
    *               reduce using rule 106 (constant -> FCONST seen_fconst .)
    -               reduce using rule 106 (constant -> FCONST seen_fconst .)
    +               reduce using rule 106 (constant -> FCONST seen_fconst .)
    <               reduce using rule 106 (constant -> FCONST seen_fconst .)
    >               reduce using rule 106 (constant -> FCONST seen_fconst .)
    DIFF            reduce using rule 106 (constant -> FCONST seen_fconst .)
    EQ              reduce using rule 106 (constant -> FCONST seen_fconst .)
    LTEQ            reduce using rule 106 (constant -> FCONST seen_fconst .)
    GTEQ            reduce using rule 106 (constant -> FCONST seen_fconst .)
    AND             reduce using rule 106 (constant -> FCONST seen_fconst .)
    OR              reduce using rule 106 (constant -> FCONST seen_fconst .)
    ;               reduce using rule 106 (constant -> FCONST seen_fconst .)
    ]               reduce using rule 106 (constant -> FCONST seen_fconst .)
    ,               reduce using rule 106 (constant -> FCONST seen_fconst .)
    )               reduce using rule 106 (constant -> FCONST seen_fconst .)


state 177

    (108) constant -> SCONST seen_sconst .

    /               reduce using rule 108 (constant -> SCONST seen_sconst .)
    *               reduce using rule 108 (constant -> SCONST seen_sconst .)
    -               reduce using rule 108 (constant -> SCONST seen_sconst .)
    +               reduce using rule 108 (constant -> SCONST seen_sconst .)
    <               reduce using rule 108 (constant -> SCONST seen_sconst .)
    >               reduce using rule 108 (constant -> SCONST seen_sconst .)
    DIFF            reduce using rule 108 (constant -> SCONST seen_sconst .)
    EQ              reduce using rule 108 (constant -> SCONST seen_sconst .)
    LTEQ            reduce using rule 108 (constant -> SCONST seen_sconst .)
    GTEQ            reduce using rule 108 (constant -> SCONST seen_sconst .)
    AND             reduce using rule 108 (constant -> SCONST seen_sconst .)
    OR              reduce using rule 108 (constant -> SCONST seen_sconst .)
    ;               reduce using rule 108 (constant -> SCONST seen_sconst .)
    ]               reduce using rule 108 (constant -> SCONST seen_sconst .)
    ,               reduce using rule 108 (constant -> SCONST seen_sconst .)
    )               reduce using rule 108 (constant -> SCONST seen_sconst .)


state 178

    (107) constant -> ICONST seen_iconst .

    /               reduce using rule 107 (constant -> ICONST seen_iconst .)
    *               reduce using rule 107 (constant -> ICONST seen_iconst .)
    -               reduce using rule 107 (constant -> ICONST seen_iconst .)
    +               reduce using rule 107 (constant -> ICONST seen_iconst .)
    <               reduce using rule 107 (constant -> ICONST seen_iconst .)
    >               reduce using rule 107 (constant -> ICONST seen_iconst .)
    DIFF            reduce using rule 107 (constant -> ICONST seen_iconst .)
    EQ              reduce using rule 107 (constant -> ICONST seen_iconst .)
    LTEQ            reduce using rule 107 (constant -> ICONST seen_iconst .)
    GTEQ            reduce using rule 107 (constant -> ICONST seen_iconst .)
    AND             reduce using rule 107 (constant -> ICONST seen_iconst .)
    OR              reduce using rule 107 (constant -> ICONST seen_iconst .)
    ;               reduce using rule 107 (constant -> ICONST seen_iconst .)
    ]               reduce using rule 107 (constant -> ICONST seen_iconst .)
    ,               reduce using rule 107 (constant -> ICONST seen_iconst .)
    )               reduce using rule 107 (constant -> ICONST seen_iconst .)


state 179

    (110) constant -> FALSE seen_false .

    /               reduce using rule 110 (constant -> FALSE seen_false .)
    *               reduce using rule 110 (constant -> FALSE seen_false .)
    -               reduce using rule 110 (constant -> FALSE seen_false .)
    +               reduce using rule 110 (constant -> FALSE seen_false .)
    <               reduce using rule 110 (constant -> FALSE seen_false .)
    >               reduce using rule 110 (constant -> FALSE seen_false .)
    DIFF            reduce using rule 110 (constant -> FALSE seen_false .)
    EQ              reduce using rule 110 (constant -> FALSE seen_false .)
    LTEQ            reduce using rule 110 (constant -> FALSE seen_false .)
    GTEQ            reduce using rule 110 (constant -> FALSE seen_false .)
    AND             reduce using rule 110 (constant -> FALSE seen_false .)
    OR              reduce using rule 110 (constant -> FALSE seen_false .)
    ;               reduce using rule 110 (constant -> FALSE seen_false .)
    ]               reduce using rule 110 (constant -> FALSE seen_false .)
    ,               reduce using rule 110 (constant -> FALSE seen_false .)
    )               reduce using rule 110 (constant -> FALSE seen_false .)


state 180

    (109) constant -> TRUE seen_true .

    /               reduce using rule 109 (constant -> TRUE seen_true .)
    *               reduce using rule 109 (constant -> TRUE seen_true .)
    -               reduce using rule 109 (constant -> TRUE seen_true .)
    +               reduce using rule 109 (constant -> TRUE seen_true .)
    <               reduce using rule 109 (constant -> TRUE seen_true .)
    >               reduce using rule 109 (constant -> TRUE seen_true .)
    DIFF            reduce using rule 109 (constant -> TRUE seen_true .)
    EQ              reduce using rule 109 (constant -> TRUE seen_true .)
    LTEQ            reduce using rule 109 (constant -> TRUE seen_true .)
    GTEQ            reduce using rule 109 (constant -> TRUE seen_true .)
    AND             reduce using rule 109 (constant -> TRUE seen_true .)
    OR              reduce using rule 109 (constant -> TRUE seen_true .)
    ;               reduce using rule 109 (constant -> TRUE seen_true .)
    ]               reduce using rule 109 (constant -> TRUE seen_true .)
    ,               reduce using rule 109 (constant -> TRUE seen_true .)
    )               reduce using rule 109 (constant -> TRUE seen_true .)


state 181

    (93) factor -> ( seen_parentheses hyperexpression . )

    )               shift and go to state 219


state 182

    (90) termB -> * . push_operator term
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 220

state 183

    (87) term -> factor seen_factor termB .

    -               reduce using rule 87 (term -> factor seen_factor termB .)
    +               reduce using rule 87 (term -> factor seen_factor termB .)
    <               reduce using rule 87 (term -> factor seen_factor termB .)
    >               reduce using rule 87 (term -> factor seen_factor termB .)
    DIFF            reduce using rule 87 (term -> factor seen_factor termB .)
    EQ              reduce using rule 87 (term -> factor seen_factor termB .)
    LTEQ            reduce using rule 87 (term -> factor seen_factor termB .)
    GTEQ            reduce using rule 87 (term -> factor seen_factor termB .)
    AND             reduce using rule 87 (term -> factor seen_factor termB .)
    OR              reduce using rule 87 (term -> factor seen_factor termB .)
    ;               reduce using rule 87 (term -> factor seen_factor termB .)
    ]               reduce using rule 87 (term -> factor seen_factor termB .)
    ,               reduce using rule 87 (term -> factor seen_factor termB .)
    )               reduce using rule 87 (term -> factor seen_factor termB .)


state 184

    (91) termB -> empty .

    -               reduce using rule 91 (termB -> empty .)
    +               reduce using rule 91 (termB -> empty .)
    <               reduce using rule 91 (termB -> empty .)
    >               reduce using rule 91 (termB -> empty .)
    DIFF            reduce using rule 91 (termB -> empty .)
    EQ              reduce using rule 91 (termB -> empty .)
    LTEQ            reduce using rule 91 (termB -> empty .)
    GTEQ            reduce using rule 91 (termB -> empty .)
    AND             reduce using rule 91 (termB -> empty .)
    OR              reduce using rule 91 (termB -> empty .)
    ;               reduce using rule 91 (termB -> empty .)
    ]               reduce using rule 91 (termB -> empty .)
    ,               reduce using rule 91 (termB -> empty .)
    )               reduce using rule 91 (termB -> empty .)


state 185

    (89) termB -> / . push_operator term
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 221

state 186

    (69) hyperexpressionB -> OR push_operator . hyperexpression
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    sign                           shift and go to state 101
    signB                          shift and go to state 92
    hyperexpression                shift and go to state 222
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 187

    (147) funccall -> ID seen_a_factor_funccall ( . funccallB funccallC
    (149) funccallB -> . hyperexpression seen_param
    (150) funccallB -> . empty
    (68) hyperexpression -> . superexpression hyperexpressionB
    (162) empty -> .
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -

    ,               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)
    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95

    funccallB                      shift and go to state 223
    signB                          shift and go to state 92
    hyperexpression                shift and go to state 224
    factor                         shift and go to state 97
    empty                          shift and go to state 225
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 188

    (95) factor -> ID seen_ID dimensionsOpt .

    /               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    *               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    -               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    +               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    <               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    >               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    DIFF            reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    EQ              reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    LTEQ            reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    GTEQ            reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    AND             reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    OR              reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    ;               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    )               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    ]               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    ,               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)


state 189

    (85) expB -> + . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 226

state 190

    (84) expB -> - . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 227

state 191

    (82) exp -> term seen_term expB .

    <               reduce using rule 82 (exp -> term seen_term expB .)
    >               reduce using rule 82 (exp -> term seen_term expB .)
    DIFF            reduce using rule 82 (exp -> term seen_term expB .)
    EQ              reduce using rule 82 (exp -> term seen_term expB .)
    LTEQ            reduce using rule 82 (exp -> term seen_term expB .)
    GTEQ            reduce using rule 82 (exp -> term seen_term expB .)
    AND             reduce using rule 82 (exp -> term seen_term expB .)
    OR              reduce using rule 82 (exp -> term seen_term expB .)
    )               reduce using rule 82 (exp -> term seen_term expB .)
    ]               reduce using rule 82 (exp -> term seen_term expB .)
    ,               reduce using rule 82 (exp -> term seen_term expB .)
    ;               reduce using rule 82 (exp -> term seen_term expB .)


state 192

    (86) expB -> empty .

    <               reduce using rule 86 (expB -> empty .)
    >               reduce using rule 86 (expB -> empty .)
    DIFF            reduce using rule 86 (expB -> empty .)
    EQ              reduce using rule 86 (expB -> empty .)
    LTEQ            reduce using rule 86 (expB -> empty .)
    GTEQ            reduce using rule 86 (expB -> empty .)
    AND             reduce using rule 86 (expB -> empty .)
    OR              reduce using rule 86 (expB -> empty .)
    ;               reduce using rule 86 (expB -> empty .)
    ]               reduce using rule 86 (expB -> empty .)
    ,               reduce using rule 86 (expB -> empty .)
    )               reduce using rule 86 (expB -> empty .)


state 193

    (80) expressionB -> GTEQ push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    term                           shift and go to state 103
    funccall                       shift and go to state 99
    signB                          shift and go to state 92
    sign                           shift and go to state 101
    empty                          shift and go to state 98
    exp                            shift and go to state 228
    factor                         shift and go to state 97

state 194

    (79) expressionB -> LTEQ push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    term                           shift and go to state 103
    funccall                       shift and go to state 99
    signB                          shift and go to state 92
    sign                           shift and go to state 101
    empty                          shift and go to state 98
    exp                            shift and go to state 229
    factor                         shift and go to state 97

state 195

    (77) expressionB -> DIFF push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    term                           shift and go to state 103
    funccall                       shift and go to state 99
    signB                          shift and go to state 92
    sign                           shift and go to state 101
    empty                          shift and go to state 98
    exp                            shift and go to state 230
    factor                         shift and go to state 97

state 196

    (78) expressionB -> EQ push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    term                           shift and go to state 103
    funccall                       shift and go to state 99
    signB                          shift and go to state 92
    sign                           shift and go to state 101
    empty                          shift and go to state 98
    exp                            shift and go to state 231
    factor                         shift and go to state 97

state 197

    (75) expressionB -> < push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    term                           shift and go to state 103
    funccall                       shift and go to state 99
    signB                          shift and go to state 92
    sign                           shift and go to state 101
    empty                          shift and go to state 98
    exp                            shift and go to state 232
    factor                         shift and go to state 97

state 198

    (76) expressionB -> > push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    term                           shift and go to state 103
    funccall                       shift and go to state 99
    signB                          shift and go to state 92
    sign                           shift and go to state 101
    empty                          shift and go to state 98
    exp                            shift and go to state 233
    factor                         shift and go to state 97

state 199

    (72) superexpressionB -> AND push_operator . superexpression
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    sign                           shift and go to state 101
    signB                          shift and go to state 92
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 234
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 200

    (130) read -> READ ( validate_id push_operand . read_quadruple readB )
    (132) read_quadruple -> .

    ,               reduce using rule 132 (read_quadruple -> .)
    )               reduce using rule 132 (read_quadruple -> .)

    read_quadruple                 shift and go to state 235

state 201

    (62) assignfunccallB -> ( pop_operand . seen_a_funccall funccallB funccallC
    (64) seen_a_funccall -> .

    (               reduce using rule 64 (seen_a_funccall -> .)
    ID              reduce using rule 64 (seen_a_funccall -> .)
    +               reduce using rule 64 (seen_a_funccall -> .)
    -               reduce using rule 64 (seen_a_funccall -> .)
    ,               reduce using rule 64 (seen_a_funccall -> .)
    )               reduce using rule 64 (seen_a_funccall -> .)
    FCONST          reduce using rule 64 (seen_a_funccall -> .)
    ICONST          reduce using rule 64 (seen_a_funccall -> .)
    SCONST          reduce using rule 64 (seen_a_funccall -> .)
    TRUE            reduce using rule 64 (seen_a_funccall -> .)
    FALSE           reduce using rule 64 (seen_a_funccall -> .)

    seen_a_funccall                shift and go to state 236

state 202

    (42) assignB -> dimensionsOpt = . push_operator hyperexpression quadruple_assign
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 237

state 203

    (136) outputB -> hyperexpression print_quadruple . outputC
    (138) outputC -> . )
    (139) outputC -> . , outputB

    )               shift and go to state 238
    ,               shift and go to state 239

    outputC                        shift and go to state 240

state 204

    (41) assign -> id_record_line push_operand . dimensionsOpt = push_operator hyperexpression quadruple_assign
    (43) dimensionsOpt -> . dimensions
    (44) dimensionsOpt -> . empty
    (154) dimensions -> . [ hyperexpression ] dimensionsB
    (162) empty -> .

    [               shift and go to state 86
    =               reduce using rule 162 (empty -> .)

    dimensions                     shift and go to state 85
    dimensionsOpt                  shift and go to state 241
    empty                          shift and go to state 88

state 205

    (126) forloop -> register_for ( assign ; . init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (117) init_while -> .

    (               reduce using rule 117 (init_while -> .)
    ID              reduce using rule 117 (init_while -> .)
    +               reduce using rule 117 (init_while -> .)
    -               reduce using rule 117 (init_while -> .)
    FCONST          reduce using rule 117 (init_while -> .)
    ICONST          reduce using rule 117 (init_while -> .)
    SCONST          reduce using rule 117 (init_while -> .)
    TRUE            reduce using rule 117 (init_while -> .)
    FALSE           reduce using rule 117 (init_while -> .)

    init_while                     shift and go to state 242

state 206

    (45) condition -> register_if ( hyperexpression condition_quadruple . ) block else endcondition_quadruple

    )               shift and go to state 243


state 207

    (116) whileloop -> register_while init_while ( hyperexpression . ) while_quadruple block endwhile_quadruple

    )               shift and go to state 244


state 208

    (34) func -> DEF returntype ID ( paramsOpt ) .

    {               reduce using rule 34 (func -> DEF returntype ID ( paramsOpt ) .)


state 209

    (35) paramsOpt -> params paramsB .

    )               reduce using rule 35 (paramsOpt -> params paramsB .)


state 210

    (160) paramsB -> , . params paramsB
    (159) params -> . type ID
    (120) type -> . INT
    (121) type -> . FLOAT
    (122) type -> . STRING
    (123) type -> . BOOL

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    STRING          shift and go to state 15
    BOOL            shift and go to state 18

    type                           shift and go to state 171
    params                         shift and go to state 245

state 211

    (161) paramsB -> empty .

    )               reduce using rule 161 (paramsB -> empty .)


state 212

    (159) params -> type ID .

    ,               reduce using rule 159 (params -> type ID .)
    )               reduce using rule 159 (params -> type ID .)


state 213

    (154) dimensions -> [ hyperexpression ] dimensionsB .

    /               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    *               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    -               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    +               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    <               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    >               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    DIFF            reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    EQ              reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    LTEQ            reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    GTEQ            reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    AND             reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    OR              reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    ;               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    ]               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    ,               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    )               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)
    =               reduce using rule 154 (dimensions -> [ hyperexpression ] dimensionsB .)


state 214

    (155) dimensionsB -> [ . hyperexpression ]
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    sign                           shift and go to state 101
    signB                          shift and go to state 92
    hyperexpression                shift and go to state 246
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 215

    (156) dimensionsB -> empty .

    =               reduce using rule 156 (dimensionsB -> empty .)
    ,               reduce using rule 156 (dimensionsB -> empty .)
    ;               reduce using rule 156 (dimensionsB -> empty .)
    /               reduce using rule 156 (dimensionsB -> empty .)
    *               reduce using rule 156 (dimensionsB -> empty .)
    -               reduce using rule 156 (dimensionsB -> empty .)
    +               reduce using rule 156 (dimensionsB -> empty .)
    <               reduce using rule 156 (dimensionsB -> empty .)
    >               reduce using rule 156 (dimensionsB -> empty .)
    DIFF            reduce using rule 156 (dimensionsB -> empty .)
    EQ              reduce using rule 156 (dimensionsB -> empty .)
    LTEQ            reduce using rule 156 (dimensionsB -> empty .)
    GTEQ            reduce using rule 156 (dimensionsB -> empty .)
    AND             reduce using rule 156 (dimensionsB -> empty .)
    OR              reduce using rule 156 (dimensionsB -> empty .)
    ]               reduce using rule 156 (dimensionsB -> empty .)
    )               reduce using rule 156 (dimensionsB -> empty .)


state 216

    (29) declarationD -> , . repush_type declarationB declarationC
    (23) repush_type -> .

    ID              reduce using rule 23 (repush_type -> .)

    repush_type                    shift and go to state 247

state 217

    (30) declarationD -> ; .

    INT             reduce using rule 30 (declarationD -> ; .)
    FLOAT           reduce using rule 30 (declarationD -> ; .)
    STRING          reduce using rule 30 (declarationD -> ; .)
    BOOL            reduce using rule 30 (declarationD -> ; .)
    DEF             reduce using rule 30 (declarationD -> ; .)
    MAIN            reduce using rule 30 (declarationD -> ; .)
    PRINT           reduce using rule 30 (declarationD -> ; .)
    RETURN          reduce using rule 30 (declarationD -> ; .)
    READ            reduce using rule 30 (declarationD -> ; .)
    ID              reduce using rule 30 (declarationD -> ; .)
    IF              reduce using rule 30 (declarationD -> ; .)
    WHILE           reduce using rule 30 (declarationD -> ; .)
    FOR             reduce using rule 30 (declarationD -> ; .)
    #               reduce using rule 30 (declarationD -> ; .)
    TRACKDECISION   reduce using rule 30 (declarationD -> ; .)
    FORGETDECISION  reduce using rule 30 (declarationD -> ; .)
    }               reduce using rule 30 (declarationD -> ; .)


state 218

    (26) declarationC -> = push_operator hyperexpression quadruple_assign declarationD .

    INT             reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FLOAT           reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    STRING          reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    BOOL            reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    DEF             reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    MAIN            reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    PRINT           reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    RETURN          reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    READ            reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    ID              reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    IF              reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    WHILE           reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FOR             reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    #               reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    TRACKDECISION   reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FORGETDECISION  reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    }               reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)


state 219

    (93) factor -> ( seen_parentheses hyperexpression ) .

    /               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    *               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    -               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    +               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    <               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    >               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    DIFF            reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    EQ              reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    LTEQ            reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    GTEQ            reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    AND             reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    OR              reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    ;               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    )               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    ]               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    ,               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)


state 220

    (90) termB -> * push_operator . term
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    term                           shift and go to state 248
    funccall                       shift and go to state 99
    signB                          shift and go to state 92
    sign                           shift and go to state 101
    empty                          shift and go to state 98
    factor                         shift and go to state 97

state 221

    (89) termB -> / push_operator . term
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    term                           shift and go to state 249
    funccall                       shift and go to state 99
    signB                          shift and go to state 92
    sign                           shift and go to state 101
    empty                          shift and go to state 98
    factor                         shift and go to state 97

state 222

    (69) hyperexpressionB -> OR push_operator hyperexpression .

    ;               reduce using rule 69 (hyperexpressionB -> OR push_operator hyperexpression .)
    ]               reduce using rule 69 (hyperexpressionB -> OR push_operator hyperexpression .)
    ,               reduce using rule 69 (hyperexpressionB -> OR push_operator hyperexpression .)
    )               reduce using rule 69 (hyperexpressionB -> OR push_operator hyperexpression .)


state 223

    (147) funccall -> ID seen_a_factor_funccall ( funccallB . funccallC
    (152) funccallC -> . , funccallB funccallC
    (153) funccallC -> . )

    ,               shift and go to state 252
    )               shift and go to state 251

    funccallC                      shift and go to state 250

state 224

    (149) funccallB -> hyperexpression . seen_param
    (151) seen_param -> .

    ,               reduce using rule 151 (seen_param -> .)
    )               reduce using rule 151 (seen_param -> .)

    seen_param                     shift and go to state 253

state 225

    (150) funccallB -> empty .
    (100) signB -> empty .

    ,               reduce using rule 150 (funccallB -> empty .)
    )               reduce using rule 150 (funccallB -> empty .)
    FCONST          reduce using rule 100 (signB -> empty .)
    ICONST          reduce using rule 100 (signB -> empty .)
    SCONST          reduce using rule 100 (signB -> empty .)
    TRUE            reduce using rule 100 (signB -> empty .)
    FALSE           reduce using rule 100 (signB -> empty .)


state 226

    (85) expB -> + push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    term                           shift and go to state 103
    funccall                       shift and go to state 99
    signB                          shift and go to state 92
    sign                           shift and go to state 101
    empty                          shift and go to state 98
    exp                            shift and go to state 254
    factor                         shift and go to state 97

state 227

    (84) expB -> - push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    term                           shift and go to state 103
    funccall                       shift and go to state 99
    signB                          shift and go to state 92
    sign                           shift and go to state 101
    empty                          shift and go to state 98
    exp                            shift and go to state 255
    factor                         shift and go to state 97

state 228

    (80) expressionB -> GTEQ push_operator exp .

    AND             reduce using rule 80 (expressionB -> GTEQ push_operator exp .)
    OR              reduce using rule 80 (expressionB -> GTEQ push_operator exp .)
    ;               reduce using rule 80 (expressionB -> GTEQ push_operator exp .)
    ]               reduce using rule 80 (expressionB -> GTEQ push_operator exp .)
    ,               reduce using rule 80 (expressionB -> GTEQ push_operator exp .)
    )               reduce using rule 80 (expressionB -> GTEQ push_operator exp .)


state 229

    (79) expressionB -> LTEQ push_operator exp .

    AND             reduce using rule 79 (expressionB -> LTEQ push_operator exp .)
    OR              reduce using rule 79 (expressionB -> LTEQ push_operator exp .)
    ;               reduce using rule 79 (expressionB -> LTEQ push_operator exp .)
    ]               reduce using rule 79 (expressionB -> LTEQ push_operator exp .)
    ,               reduce using rule 79 (expressionB -> LTEQ push_operator exp .)
    )               reduce using rule 79 (expressionB -> LTEQ push_operator exp .)


state 230

    (77) expressionB -> DIFF push_operator exp .

    AND             reduce using rule 77 (expressionB -> DIFF push_operator exp .)
    OR              reduce using rule 77 (expressionB -> DIFF push_operator exp .)
    ;               reduce using rule 77 (expressionB -> DIFF push_operator exp .)
    ]               reduce using rule 77 (expressionB -> DIFF push_operator exp .)
    ,               reduce using rule 77 (expressionB -> DIFF push_operator exp .)
    )               reduce using rule 77 (expressionB -> DIFF push_operator exp .)


state 231

    (78) expressionB -> EQ push_operator exp .

    AND             reduce using rule 78 (expressionB -> EQ push_operator exp .)
    OR              reduce using rule 78 (expressionB -> EQ push_operator exp .)
    ;               reduce using rule 78 (expressionB -> EQ push_operator exp .)
    ]               reduce using rule 78 (expressionB -> EQ push_operator exp .)
    ,               reduce using rule 78 (expressionB -> EQ push_operator exp .)
    )               reduce using rule 78 (expressionB -> EQ push_operator exp .)


state 232

    (75) expressionB -> < push_operator exp .

    AND             reduce using rule 75 (expressionB -> < push_operator exp .)
    OR              reduce using rule 75 (expressionB -> < push_operator exp .)
    ;               reduce using rule 75 (expressionB -> < push_operator exp .)
    ]               reduce using rule 75 (expressionB -> < push_operator exp .)
    ,               reduce using rule 75 (expressionB -> < push_operator exp .)
    )               reduce using rule 75 (expressionB -> < push_operator exp .)


state 233

    (76) expressionB -> > push_operator exp .

    AND             reduce using rule 76 (expressionB -> > push_operator exp .)
    OR              reduce using rule 76 (expressionB -> > push_operator exp .)
    ;               reduce using rule 76 (expressionB -> > push_operator exp .)
    ]               reduce using rule 76 (expressionB -> > push_operator exp .)
    ,               reduce using rule 76 (expressionB -> > push_operator exp .)
    )               reduce using rule 76 (expressionB -> > push_operator exp .)


state 234

    (72) superexpressionB -> AND push_operator superexpression .

    OR              reduce using rule 72 (superexpressionB -> AND push_operator superexpression .)
    ;               reduce using rule 72 (superexpressionB -> AND push_operator superexpression .)
    ]               reduce using rule 72 (superexpressionB -> AND push_operator superexpression .)
    ,               reduce using rule 72 (superexpressionB -> AND push_operator superexpression .)
    )               reduce using rule 72 (superexpressionB -> AND push_operator superexpression .)


state 235

    (130) read -> READ ( validate_id push_operand read_quadruple . readB )
    (133) readB -> . , validate_id push_operand read_quadruple readB
    (134) readB -> . empty
    (162) empty -> .

    ,               shift and go to state 257
    )               reduce using rule 162 (empty -> .)

    readB                          shift and go to state 256
    empty                          shift and go to state 258

state 236

    (62) assignfunccallB -> ( pop_operand seen_a_funccall . funccallB funccallC
    (149) funccallB -> . hyperexpression seen_param
    (150) funccallB -> . empty
    (68) hyperexpression -> . superexpression hyperexpressionB
    (162) empty -> .
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -

    ,               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)
    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95

    funccallB                      shift and go to state 259
    signB                          shift and go to state 92
    hyperexpression                shift and go to state 224
    factor                         shift and go to state 97
    empty                          shift and go to state 225
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 237

    (42) assignB -> dimensionsOpt = push_operator . hyperexpression quadruple_assign
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    signB                          shift and go to state 92
    hyperexpression                shift and go to state 260
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 238

    (138) outputC -> ) .

    ;               reduce using rule 138 (outputC -> ) .)


state 239

    (139) outputC -> , . outputB
    (136) outputB -> . hyperexpression print_quadruple outputC
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    signB                          shift and go to state 92
    hyperexpression                shift and go to state 160
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    outputB                        shift and go to state 261
    expression                     shift and go to state 105

state 240

    (136) outputB -> hyperexpression print_quadruple outputC .

    ;               reduce using rule 136 (outputB -> hyperexpression print_quadruple outputC .)


state 241

    (41) assign -> id_record_line push_operand dimensionsOpt . = push_operator hyperexpression quadruple_assign

    =               shift and go to state 262


state 242

    (126) forloop -> register_for ( assign ; init_while . hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    signB                          shift and go to state 92
    hyperexpression                shift and go to state 263
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 243

    (45) condition -> register_if ( hyperexpression condition_quadruple ) . block else endcondition_quadruple
    (37) block -> . { instructionsOpt }

    {               shift and go to state 43

    block                          shift and go to state 264

state 244

    (116) whileloop -> register_while init_while ( hyperexpression ) . while_quadruple block endwhile_quadruple
    (118) while_quadruple -> .

    {               reduce using rule 118 (while_quadruple -> .)

    while_quadruple                shift and go to state 265

state 245

    (160) paramsB -> , params . paramsB
    (160) paramsB -> . , params paramsB
    (161) paramsB -> . empty
    (162) empty -> .

    ,               shift and go to state 210
    )               reduce using rule 162 (empty -> .)

    paramsB                        shift and go to state 266
    empty                          shift and go to state 211

state 246

    (155) dimensionsB -> [ hyperexpression . ]

    ]               shift and go to state 267


state 247

    (29) declarationD -> , repush_type . declarationB declarationC
    (20) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 38

    declarationB                   shift and go to state 268

state 248

    (90) termB -> * push_operator term .

    -               reduce using rule 90 (termB -> * push_operator term .)
    +               reduce using rule 90 (termB -> * push_operator term .)
    <               reduce using rule 90 (termB -> * push_operator term .)
    >               reduce using rule 90 (termB -> * push_operator term .)
    DIFF            reduce using rule 90 (termB -> * push_operator term .)
    EQ              reduce using rule 90 (termB -> * push_operator term .)
    LTEQ            reduce using rule 90 (termB -> * push_operator term .)
    GTEQ            reduce using rule 90 (termB -> * push_operator term .)
    AND             reduce using rule 90 (termB -> * push_operator term .)
    OR              reduce using rule 90 (termB -> * push_operator term .)
    ;               reduce using rule 90 (termB -> * push_operator term .)
    ]               reduce using rule 90 (termB -> * push_operator term .)
    ,               reduce using rule 90 (termB -> * push_operator term .)
    )               reduce using rule 90 (termB -> * push_operator term .)


state 249

    (89) termB -> / push_operator term .

    -               reduce using rule 89 (termB -> / push_operator term .)
    +               reduce using rule 89 (termB -> / push_operator term .)
    <               reduce using rule 89 (termB -> / push_operator term .)
    >               reduce using rule 89 (termB -> / push_operator term .)
    DIFF            reduce using rule 89 (termB -> / push_operator term .)
    EQ              reduce using rule 89 (termB -> / push_operator term .)
    LTEQ            reduce using rule 89 (termB -> / push_operator term .)
    GTEQ            reduce using rule 89 (termB -> / push_operator term .)
    AND             reduce using rule 89 (termB -> / push_operator term .)
    OR              reduce using rule 89 (termB -> / push_operator term .)
    ;               reduce using rule 89 (termB -> / push_operator term .)
    ]               reduce using rule 89 (termB -> / push_operator term .)
    ,               reduce using rule 89 (termB -> / push_operator term .)
    )               reduce using rule 89 (termB -> / push_operator term .)


state 250

    (147) funccall -> ID seen_a_factor_funccall ( funccallB funccallC .

    /               reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    *               reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    -               reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    +               reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    <               reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    >               reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    DIFF            reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    EQ              reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    LTEQ            reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    GTEQ            reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    AND             reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    OR              reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    )               reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    ;               reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    ]               reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    ,               reduce using rule 147 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)


state 251

    (153) funccallC -> ) .

    /               reduce using rule 153 (funccallC -> ) .)
    *               reduce using rule 153 (funccallC -> ) .)
    -               reduce using rule 153 (funccallC -> ) .)
    +               reduce using rule 153 (funccallC -> ) .)
    <               reduce using rule 153 (funccallC -> ) .)
    >               reduce using rule 153 (funccallC -> ) .)
    DIFF            reduce using rule 153 (funccallC -> ) .)
    EQ              reduce using rule 153 (funccallC -> ) .)
    LTEQ            reduce using rule 153 (funccallC -> ) .)
    GTEQ            reduce using rule 153 (funccallC -> ) .)
    AND             reduce using rule 153 (funccallC -> ) .)
    OR              reduce using rule 153 (funccallC -> ) .)
    ;               reduce using rule 153 (funccallC -> ) .)
    ]               reduce using rule 153 (funccallC -> ) .)
    ,               reduce using rule 153 (funccallC -> ) .)
    )               reduce using rule 153 (funccallC -> ) .)


state 252

    (152) funccallC -> , . funccallB funccallC
    (149) funccallB -> . hyperexpression seen_param
    (150) funccallB -> . empty
    (68) hyperexpression -> . superexpression hyperexpressionB
    (162) empty -> .
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -

    ,               reduce using rule 162 (empty -> .)
    )               reduce using rule 162 (empty -> .)
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)
    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95

    funccallB                      shift and go to state 269
    signB                          shift and go to state 92
    hyperexpression                shift and go to state 224
    factor                         shift and go to state 97
    empty                          shift and go to state 225
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 253

    (149) funccallB -> hyperexpression seen_param .

    ,               reduce using rule 149 (funccallB -> hyperexpression seen_param .)
    )               reduce using rule 149 (funccallB -> hyperexpression seen_param .)


state 254

    (85) expB -> + push_operator exp .

    <               reduce using rule 85 (expB -> + push_operator exp .)
    >               reduce using rule 85 (expB -> + push_operator exp .)
    DIFF            reduce using rule 85 (expB -> + push_operator exp .)
    EQ              reduce using rule 85 (expB -> + push_operator exp .)
    LTEQ            reduce using rule 85 (expB -> + push_operator exp .)
    GTEQ            reduce using rule 85 (expB -> + push_operator exp .)
    AND             reduce using rule 85 (expB -> + push_operator exp .)
    OR              reduce using rule 85 (expB -> + push_operator exp .)
    ;               reduce using rule 85 (expB -> + push_operator exp .)
    ]               reduce using rule 85 (expB -> + push_operator exp .)
    ,               reduce using rule 85 (expB -> + push_operator exp .)
    )               reduce using rule 85 (expB -> + push_operator exp .)


state 255

    (84) expB -> - push_operator exp .

    <               reduce using rule 84 (expB -> - push_operator exp .)
    >               reduce using rule 84 (expB -> - push_operator exp .)
    DIFF            reduce using rule 84 (expB -> - push_operator exp .)
    EQ              reduce using rule 84 (expB -> - push_operator exp .)
    LTEQ            reduce using rule 84 (expB -> - push_operator exp .)
    GTEQ            reduce using rule 84 (expB -> - push_operator exp .)
    AND             reduce using rule 84 (expB -> - push_operator exp .)
    OR              reduce using rule 84 (expB -> - push_operator exp .)
    ;               reduce using rule 84 (expB -> - push_operator exp .)
    ]               reduce using rule 84 (expB -> - push_operator exp .)
    ,               reduce using rule 84 (expB -> - push_operator exp .)
    )               reduce using rule 84 (expB -> - push_operator exp .)


state 256

    (130) read -> READ ( validate_id push_operand read_quadruple readB . )

    )               shift and go to state 270


state 257

    (133) readB -> , . validate_id push_operand read_quadruple readB
    (131) validate_id -> . ID

    ID              shift and go to state 155

    validate_id                    shift and go to state 271

state 258

    (134) readB -> empty .

    )               reduce using rule 134 (readB -> empty .)


state 259

    (62) assignfunccallB -> ( pop_operand seen_a_funccall funccallB . funccallC
    (152) funccallC -> . , funccallB funccallC
    (153) funccallC -> . )

    ,               shift and go to state 252
    )               shift and go to state 251

    funccallC                      shift and go to state 272

state 260

    (42) assignB -> dimensionsOpt = push_operator hyperexpression . quadruple_assign
    (25) quadruple_assign -> .

    ;               reduce using rule 25 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 273

state 261

    (139) outputC -> , outputB .

    ;               reduce using rule 139 (outputC -> , outputB .)


state 262

    (41) assign -> id_record_line push_operand dimensionsOpt = . push_operator hyperexpression quadruple_assign
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 274

state 263

    (126) forloop -> register_for ( assign ; init_while hyperexpression . for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (127) for_quadruple -> .

    ;               reduce using rule 127 (for_quadruple -> .)

    for_quadruple                  shift and go to state 275

state 264

    (45) condition -> register_if ( hyperexpression condition_quadruple ) block . else endcondition_quadruple
    (46) else -> . ELSE elsecondition_quadruple block
    (47) else -> . empty
    (162) empty -> .

    ELSE            shift and go to state 276
    PRINT           reduce using rule 162 (empty -> .)
    RETURN          reduce using rule 162 (empty -> .)
    READ            reduce using rule 162 (empty -> .)
    ID              reduce using rule 162 (empty -> .)
    INT             reduce using rule 162 (empty -> .)
    FLOAT           reduce using rule 162 (empty -> .)
    STRING          reduce using rule 162 (empty -> .)
    BOOL            reduce using rule 162 (empty -> .)
    IF              reduce using rule 162 (empty -> .)
    WHILE           reduce using rule 162 (empty -> .)
    FOR             reduce using rule 162 (empty -> .)
    #               reduce using rule 162 (empty -> .)
    TRACKDECISION   reduce using rule 162 (empty -> .)
    FORGETDECISION  reduce using rule 162 (empty -> .)
    }               reduce using rule 162 (empty -> .)

    else                           shift and go to state 278
    empty                          shift and go to state 277

state 265

    (116) whileloop -> register_while init_while ( hyperexpression ) while_quadruple . block endwhile_quadruple
    (37) block -> . { instructionsOpt }

    {               shift and go to state 43

    block                          shift and go to state 279

state 266

    (160) paramsB -> , params paramsB .

    )               reduce using rule 160 (paramsB -> , params paramsB .)


state 267

    (155) dimensionsB -> [ hyperexpression ] .

    =               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    ,               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    ;               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    /               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    *               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    -               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    +               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    <               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    >               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    DIFF            reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    EQ              reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    LTEQ            reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    GTEQ            reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    AND             reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    OR              reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    ]               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)
    )               reduce using rule 155 (dimensionsB -> [ hyperexpression ] .)


state 268

    (29) declarationD -> , repush_type declarationB . declarationC
    (26) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (27) declarationC -> . , repush_type declarationB declarationC
    (28) declarationC -> . ;

    =               shift and go to state 52
    ,               shift and go to state 49
    ;               shift and go to state 50

    declarationC                   shift and go to state 280

state 269

    (152) funccallC -> , funccallB . funccallC
    (152) funccallC -> . , funccallB funccallC
    (153) funccallC -> . )

    ,               shift and go to state 252
    )               shift and go to state 251

    funccallC                      shift and go to state 281

state 270

    (130) read -> READ ( validate_id push_operand read_quadruple readB ) .

    ;               reduce using rule 130 (read -> READ ( validate_id push_operand read_quadruple readB ) .)


state 271

    (133) readB -> , validate_id . push_operand read_quadruple readB
    (21) push_operand -> .

    ,               reduce using rule 21 (push_operand -> .)
    )               reduce using rule 21 (push_operand -> .)

    push_operand                   shift and go to state 282

state 272

    (62) assignfunccallB -> ( pop_operand seen_a_funccall funccallB funccallC .

    ;               reduce using rule 62 (assignfunccallB -> ( pop_operand seen_a_funccall funccallB funccallC .)


state 273

    (42) assignB -> dimensionsOpt = push_operator hyperexpression quadruple_assign .

    ;               reduce using rule 42 (assignB -> dimensionsOpt = push_operator hyperexpression quadruple_assign .)


state 274

    (41) assign -> id_record_line push_operand dimensionsOpt = push_operator . hyperexpression quadruple_assign
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    signB                          shift and go to state 92
    hyperexpression                shift and go to state 283
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 275

    (126) forloop -> register_for ( assign ; init_while hyperexpression for_quadruple . ; hyperexpression for_expression ) block endfor_quadruple

    ;               shift and go to state 284


state 276

    (46) else -> ELSE . elsecondition_quadruple block
    (49) elsecondition_quadruple -> .

    {               reduce using rule 49 (elsecondition_quadruple -> .)

    elsecondition_quadruple        shift and go to state 285

state 277

    (47) else -> empty .

    PRINT           reduce using rule 47 (else -> empty .)
    RETURN          reduce using rule 47 (else -> empty .)
    READ            reduce using rule 47 (else -> empty .)
    ID              reduce using rule 47 (else -> empty .)
    INT             reduce using rule 47 (else -> empty .)
    FLOAT           reduce using rule 47 (else -> empty .)
    STRING          reduce using rule 47 (else -> empty .)
    BOOL            reduce using rule 47 (else -> empty .)
    IF              reduce using rule 47 (else -> empty .)
    WHILE           reduce using rule 47 (else -> empty .)
    FOR             reduce using rule 47 (else -> empty .)
    #               reduce using rule 47 (else -> empty .)
    TRACKDECISION   reduce using rule 47 (else -> empty .)
    FORGETDECISION  reduce using rule 47 (else -> empty .)
    }               reduce using rule 47 (else -> empty .)


state 278

    (45) condition -> register_if ( hyperexpression condition_quadruple ) block else . endcondition_quadruple
    (50) endcondition_quadruple -> .

    PRINT           reduce using rule 50 (endcondition_quadruple -> .)
    RETURN          reduce using rule 50 (endcondition_quadruple -> .)
    READ            reduce using rule 50 (endcondition_quadruple -> .)
    ID              reduce using rule 50 (endcondition_quadruple -> .)
    INT             reduce using rule 50 (endcondition_quadruple -> .)
    FLOAT           reduce using rule 50 (endcondition_quadruple -> .)
    STRING          reduce using rule 50 (endcondition_quadruple -> .)
    BOOL            reduce using rule 50 (endcondition_quadruple -> .)
    IF              reduce using rule 50 (endcondition_quadruple -> .)
    WHILE           reduce using rule 50 (endcondition_quadruple -> .)
    FOR             reduce using rule 50 (endcondition_quadruple -> .)
    #               reduce using rule 50 (endcondition_quadruple -> .)
    TRACKDECISION   reduce using rule 50 (endcondition_quadruple -> .)
    FORGETDECISION  reduce using rule 50 (endcondition_quadruple -> .)
    }               reduce using rule 50 (endcondition_quadruple -> .)

    endcondition_quadruple         shift and go to state 286

state 279

    (116) whileloop -> register_while init_while ( hyperexpression ) while_quadruple block . endwhile_quadruple
    (119) endwhile_quadruple -> .

    PRINT           reduce using rule 119 (endwhile_quadruple -> .)
    RETURN          reduce using rule 119 (endwhile_quadruple -> .)
    READ            reduce using rule 119 (endwhile_quadruple -> .)
    ID              reduce using rule 119 (endwhile_quadruple -> .)
    INT             reduce using rule 119 (endwhile_quadruple -> .)
    FLOAT           reduce using rule 119 (endwhile_quadruple -> .)
    STRING          reduce using rule 119 (endwhile_quadruple -> .)
    BOOL            reduce using rule 119 (endwhile_quadruple -> .)
    IF              reduce using rule 119 (endwhile_quadruple -> .)
    WHILE           reduce using rule 119 (endwhile_quadruple -> .)
    FOR             reduce using rule 119 (endwhile_quadruple -> .)
    #               reduce using rule 119 (endwhile_quadruple -> .)
    TRACKDECISION   reduce using rule 119 (endwhile_quadruple -> .)
    FORGETDECISION  reduce using rule 119 (endwhile_quadruple -> .)
    }               reduce using rule 119 (endwhile_quadruple -> .)

    endwhile_quadruple             shift and go to state 287

state 280

    (29) declarationD -> , repush_type declarationB declarationC .

    INT             reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    FLOAT           reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    STRING          reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    BOOL            reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    DEF             reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    MAIN            reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    PRINT           reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    RETURN          reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    READ            reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    ID              reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    IF              reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    WHILE           reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    FOR             reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    #               reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    }               reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)


state 281

    (152) funccallC -> , funccallB funccallC .

    /               reduce using rule 152 (funccallC -> , funccallB funccallC .)
    *               reduce using rule 152 (funccallC -> , funccallB funccallC .)
    -               reduce using rule 152 (funccallC -> , funccallB funccallC .)
    +               reduce using rule 152 (funccallC -> , funccallB funccallC .)
    <               reduce using rule 152 (funccallC -> , funccallB funccallC .)
    >               reduce using rule 152 (funccallC -> , funccallB funccallC .)
    DIFF            reduce using rule 152 (funccallC -> , funccallB funccallC .)
    EQ              reduce using rule 152 (funccallC -> , funccallB funccallC .)
    LTEQ            reduce using rule 152 (funccallC -> , funccallB funccallC .)
    GTEQ            reduce using rule 152 (funccallC -> , funccallB funccallC .)
    AND             reduce using rule 152 (funccallC -> , funccallB funccallC .)
    OR              reduce using rule 152 (funccallC -> , funccallB funccallC .)
    ;               reduce using rule 152 (funccallC -> , funccallB funccallC .)
    ]               reduce using rule 152 (funccallC -> , funccallB funccallC .)
    ,               reduce using rule 152 (funccallC -> , funccallB funccallC .)
    )               reduce using rule 152 (funccallC -> , funccallB funccallC .)


state 282

    (133) readB -> , validate_id push_operand . read_quadruple readB
    (132) read_quadruple -> .

    ,               reduce using rule 132 (read_quadruple -> .)
    )               reduce using rule 132 (read_quadruple -> .)

    read_quadruple                 shift and go to state 288

state 283

    (41) assign -> id_record_line push_operand dimensionsOpt = push_operator hyperexpression . quadruple_assign
    (25) quadruple_assign -> .

    ;               reduce using rule 25 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 289

state 284

    (126) forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; . hyperexpression for_expression ) block endfor_quadruple
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (147) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (162) empty -> .

    (               shift and go to state 93
    ID              shift and go to state 102
    +               shift and go to state 94
    -               shift and go to state 95
    FCONST          reduce using rule 162 (empty -> .)
    ICONST          reduce using rule 162 (empty -> .)
    SCONST          reduce using rule 162 (empty -> .)
    TRUE            reduce using rule 162 (empty -> .)
    FALSE           reduce using rule 162 (empty -> .)

    signB                          shift and go to state 92
    hyperexpression                shift and go to state 290
    factor                         shift and go to state 97
    empty                          shift and go to state 98
    funccall                       shift and go to state 99
    superexpression                shift and go to state 100
    sign                           shift and go to state 101
    term                           shift and go to state 103
    exp                            shift and go to state 104
    expression                     shift and go to state 105

state 285

    (46) else -> ELSE elsecondition_quadruple . block
    (37) block -> . { instructionsOpt }

    {               shift and go to state 43

    block                          shift and go to state 291

state 286

    (45) condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .

    PRINT           reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    RETURN          reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    READ            reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    ID              reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    INT             reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    FLOAT           reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    STRING          reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    BOOL            reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    IF              reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    WHILE           reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    FOR             reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    #               reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    TRACKDECISION   reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    FORGETDECISION  reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    }               reduce using rule 45 (condition -> register_if ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)


state 287

    (116) whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .

    PRINT           reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    RETURN          reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    READ            reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    ID              reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    INT             reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    FLOAT           reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    STRING          reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    BOOL            reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    IF              reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    WHILE           reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    FOR             reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    #               reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    TRACKDECISION   reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    FORGETDECISION  reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    }               reduce using rule 116 (whileloop -> register_while init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)


state 288

    (133) readB -> , validate_id push_operand read_quadruple . readB
    (133) readB -> . , validate_id push_operand read_quadruple readB
    (134) readB -> . empty
    (162) empty -> .

    ,               shift and go to state 257
    )               reduce using rule 162 (empty -> .)

    readB                          shift and go to state 292
    empty                          shift and go to state 258

state 289

    (41) assign -> id_record_line push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign .

    ;               reduce using rule 41 (assign -> id_record_line push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign .)


state 290

    (126) forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression . for_expression ) block endfor_quadruple
    (128) for_expression -> .

    )               reduce using rule 128 (for_expression -> .)

    for_expression                 shift and go to state 293

state 291

    (46) else -> ELSE elsecondition_quadruple block .

    PRINT           reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    RETURN          reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    READ            reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    ID              reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    INT             reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    FLOAT           reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    STRING          reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    BOOL            reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    IF              reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    WHILE           reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    FOR             reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    #               reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    TRACKDECISION   reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    FORGETDECISION  reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)
    }               reduce using rule 46 (else -> ELSE elsecondition_quadruple block .)


state 292

    (133) readB -> , validate_id push_operand read_quadruple readB .

    )               reduce using rule 133 (readB -> , validate_id push_operand read_quadruple readB .)


state 293

    (126) forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression . ) block endfor_quadruple

    )               shift and go to state 294


state 294

    (126) forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) . block endfor_quadruple
    (37) block -> . { instructionsOpt }

    {               shift and go to state 43

    block                          shift and go to state 295

state 295

    (126) forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block . endfor_quadruple
    (129) endfor_quadruple -> .

    PRINT           reduce using rule 129 (endfor_quadruple -> .)
    RETURN          reduce using rule 129 (endfor_quadruple -> .)
    READ            reduce using rule 129 (endfor_quadruple -> .)
    ID              reduce using rule 129 (endfor_quadruple -> .)
    INT             reduce using rule 129 (endfor_quadruple -> .)
    FLOAT           reduce using rule 129 (endfor_quadruple -> .)
    STRING          reduce using rule 129 (endfor_quadruple -> .)
    BOOL            reduce using rule 129 (endfor_quadruple -> .)
    IF              reduce using rule 129 (endfor_quadruple -> .)
    WHILE           reduce using rule 129 (endfor_quadruple -> .)
    FOR             reduce using rule 129 (endfor_quadruple -> .)
    #               reduce using rule 129 (endfor_quadruple -> .)
    TRACKDECISION   reduce using rule 129 (endfor_quadruple -> .)
    FORGETDECISION  reduce using rule 129 (endfor_quadruple -> .)
    }               reduce using rule 129 (endfor_quadruple -> .)

    endfor_quadruple               shift and go to state 296

state 296

    (126) forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .

    PRINT           reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    RETURN          reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    READ            reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    ID              reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    INT             reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    FLOAT           reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    STRING          reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    BOOL            reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    IF              reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    WHILE           reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    FOR             reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    #               reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    TRACKDECISION   reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    FORGETDECISION  reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    }               reduce using rule 126 (forloop -> register_for ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRINT in state 43 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 43 resolved as shift
WARNING: shift/reduce conflict for READ in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for INT in state 43 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 43 resolved as shift
WARNING: shift/reduce conflict for STRING in state 43 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 43 resolved as shift
WARNING: shift/reduce conflict for IF in state 43 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 43 resolved as shift
WARNING: shift/reduce conflict for FOR in state 43 resolved as shift
WARNING: shift/reduce conflict for # in state 43 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 43 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 43 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 80 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 80 resolved as shift
WARNING: shift/reduce conflict for READ in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for INT in state 80 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 80 resolved as shift
WARNING: shift/reduce conflict for STRING in state 80 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 80 resolved as shift
WARNING: shift/reduce conflict for IF in state 80 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 80 resolved as shift
WARNING: shift/reduce conflict for FOR in state 80 resolved as shift
WARNING: shift/reduce conflict for # in state 80 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 80 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 80 resolved as shift
WARNING: reduce/reduce conflict in state 67 resolved using rule (instructionsOpt -> empty)
WARNING: rejected rule (localdecisiondirective -> empty) in state 67
