Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> config body
Rule 2     config -> configdirective config
Rule 3     config -> empty
Rule 4     configdirective -> VARSCONFIG = options
Rule 5     configdirective -> DECISIONSCONFIG = options
Rule 6     configdirective -> COMPLEXITYCONFIG = optionsyesno
Rule 7     options -> SOME
Rule 8     options -> ALL
Rule 9     options -> MOST
Rule 10    options -> NONE
Rule 11    optionsyesno -> YES
Rule 12    optionsyesno -> NO
Rule 13    body -> declarationsOpt funcsOpt main funcsOpt
Rule 14    funcsOpt -> suprafunc funcsOpt
Rule 15    funcsOpt -> empty
Rule 16    declarationsOpt -> declaration declarationsOpt
Rule 17    declarationsOpt -> empty
Rule 18    declaration -> type declarationB
Rule 19    declarationB -> ID dimensionsOpt declarationC
Rule 20    declarationC -> = superexpression declarationD
Rule 21    declarationC -> , declarationB
Rule 22    declarationC -> ;
Rule 23    declarationD -> , declarationB
Rule 24    declarationD -> ;
Rule 25    main -> MAIN ( ) block
Rule 26    suprafunc -> func block
Rule 27    func -> DEF returntype ID ( paramsOpt )
Rule 28    paramsOpt -> params
Rule 29    paramsOpt -> empty
Rule 30    block -> { instructionsOpt }
Rule 31    instructionsOpt -> instruction instructionsOpt
Rule 32    instructionsOpt -> empty
Rule 33    assign -> ID dimensionsOpt = superexpression
Rule 34    assignB -> dimensionsOpt = superexpression
Rule 35    dimensionsOpt -> dimensions
Rule 36    dimensionsOpt -> empty
Rule 37    condition -> IF ( superexpression ) block else
Rule 38    else -> ELSE block
Rule 39    else -> empty
Rule 40    instruction -> assignfunccall ;
Rule 41    instruction -> output ;
Rule 42    instruction -> return ;
Rule 43    instruction -> input ;
Rule 44    instruction -> declaration
Rule 45    instruction -> condition
Rule 46    instruction -> whileloop
Rule 47    instruction -> forloop
Rule 48    instruction -> localdirective
Rule 49    assignfunccall -> ID assignfunccallB
Rule 50    assignfunccallB -> ( funccallB
Rule 51    assignfunccallB -> assignB
Rule 52    localdirective -> localvardirective
Rule 53    localdirective -> localdecisiondirective
Rule 54    localdirective -> localmsgdirective
Rule 55    superexpression -> expression superexpressionB
Rule 56    superexpressionB -> & & superexpression
Rule 57    superexpressionB -> | | superexpression
Rule 58    superexpressionB -> empty
Rule 59    expression -> exp expressionB
Rule 60    expressionB -> < exp
Rule 61    expressionB -> > exp
Rule 62    expressionB -> < > exp
Rule 63    expressionB -> = = exp
Rule 64    expressionB -> < = exp
Rule 65    expressionB -> > = exp
Rule 66    expressionB -> empty
Rule 67    exp -> term expB
Rule 68    expB -> - exp
Rule 69    expB -> + exp
Rule 70    expB -> empty
Rule 71    term -> factor termB
Rule 72    termB -> / term
Rule 73    termB -> * term
Rule 74    termB -> empty
Rule 75    factor -> signB constant
Rule 76    factor -> ( superexpression )
Rule 77    factor -> funccall
Rule 78    factor -> ID dimensionsOpt
Rule 79    signB -> sign
Rule 80    signB -> empty
Rule 81    constant -> FCONST
Rule 82    constant -> ICONST
Rule 83    constant -> TRUE
Rule 84    constant -> FALSE
Rule 85    sign -> +
Rule 86    sign -> -
Rule 87    whileloop -> WHILE ( superexpression ) block
Rule 88    type -> INT
Rule 89    type -> FLOAT
Rule 90    type -> STRING
Rule 91    type -> BOOL
Rule 92    returntype -> VOID
Rule 93    returntype -> type
Rule 94    forloop -> FOR ( assign ; superexpression ; superexpression ) block
Rule 95    input -> INPUT ( ID inputB )
Rule 96    inputB -> , ID inputB
Rule 97    inputB -> empty
Rule 98    output -> PRINT ( outputB
Rule 99    outputB -> SCONST outputC
Rule 100   outputB -> superexpression outputC
Rule 101   outputC -> )
Rule 102   outputC -> , outputB
Rule 103   localvardirective -> # localvardirectiveB ID
Rule 104   localvardirectiveB -> TRACK
Rule 105   localvardirectiveB -> FORGET
Rule 106   localmsgdirective -> # SHOW SCONST
Rule 107   localdecisiondirective -> TRACKDECISION
Rule 108   localdecisiondirective -> FORGETDECISION
Rule 109   localdecisiondirective -> empty
Rule 110   funccall -> ID ( funccallB
Rule 111   funccallB -> superexpression funccallC
Rule 112   funccallB -> )
Rule 113   funccallC -> , superexpression funccallC
Rule 114   funccallC -> )
Rule 115   dimensions -> [ superexpression ] dimensionsB
Rule 116   dimensionsB -> [ superexpression ]
Rule 117   dimensionsB -> empty
Rule 118   return -> RETURN superexpression
Rule 119   params -> type ID paramsB
Rule 120   paramsB -> , type ID paramsB
Rule 121   paramsB -> empty
Rule 122   empty -> <empty>

Terminals, with rules where they appear

#                    : 103 106
&                    : 56 56
(                    : 25 27 37 50 76 87 94 95 98 110
)                    : 25 27 37 76 87 94 95 101 112 114
*                    : 73
+                    : 69 85
,                    : 21 23 96 102 113 120
-                    : 68 86
/                    : 72
;                    : 22 24 40 41 42 43 94 94
<                    : 60 62 64
=                    : 4 5 6 20 33 34 63 63 64 65
>                    : 61 62 65
ALL                  : 8
BOOL                 : 91
COMPLEXITYCONFIG     : 6
DECISIONSCONFIG      : 5
DEF                  : 27
ELSE                 : 38
FALSE                : 84
FCONST               : 81
FLOAT                : 89
FOR                  : 94
FORGET               : 105
FORGETDECISION       : 108
ICONST               : 82
ID                   : 19 27 33 49 78 95 96 103 110 119 120
IF                   : 37
INPUT                : 95
INT                  : 88
MAIN                 : 25
MOST                 : 9
NO                   : 12
NONE                 : 10
PRINT                : 98
RETURN               : 118
SCONST               : 99 106
SHOW                 : 106
SOME                 : 7
STRING               : 90
TRACK                : 104
TRACKDECISION        : 107
TRUE                 : 83
VARSCONFIG           : 4
VOID                 : 92
WHILE                : 87
YES                  : 11
[                    : 115 116
]                    : 115 116
error                : 
{                    : 30
|                    : 57 57
}                    : 30

Nonterminals, with rules where they appear

assign               : 94
assignB              : 51
assignfunccall       : 40
assignfunccallB      : 49
block                : 25 26 37 38 87 94
body                 : 1
condition            : 45
config               : 1 2
configdirective      : 2
constant             : 75
declaration          : 16 44
declarationB         : 18 21 23
declarationC         : 19
declarationD         : 20
declarationsOpt      : 13 16
dimensions           : 35
dimensionsB          : 115
dimensionsOpt        : 19 33 34 78
else                 : 37
empty                : 3 15 17 29 32 36 39 58 66 70 74 80 97 109 117 121
exp                  : 59 60 61 62 63 64 65 68 69
expB                 : 67
expression           : 55
expressionB          : 59
factor               : 71
forloop              : 47
func                 : 26
funccall             : 77
funccallB            : 50 110
funccallC            : 111 113
funcsOpt             : 13 13 14
input                : 43
inputB               : 95 96
instruction          : 31
instructionsOpt      : 30 31
localdecisiondirective : 53
localdirective       : 48
localmsgdirective    : 54
localvardirective    : 52
localvardirectiveB   : 103
main                 : 13
options              : 4 5
optionsyesno         : 6
output               : 41
outputB              : 98 102
outputC              : 99 100
params               : 28
paramsB              : 119 120
paramsOpt            : 27
program              : 0
return               : 42
returntype           : 27
sign                 : 79
signB                : 75
superexpression      : 20 33 34 37 56 57 76 87 94 94 100 111 113 115 116 118
superexpressionB     : 55
suprafunc            : 14
term                 : 67 72 73
termB                : 71
type                 : 18 93 119 120
whileloop            : 46

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . config body
    (2) config -> . configdirective config
    (3) config -> . empty
    (4) configdirective -> . VARSCONFIG = options
    (5) configdirective -> . DECISIONSCONFIG = options
    (6) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (122) empty -> .

    VARSCONFIG      shift and go to state 2
    DECISIONSCONFIG shift and go to state 1
    COMPLEXITYCONFIG shift and go to state 4
    INT             reduce using rule 122 (empty -> .)
    FLOAT           reduce using rule 122 (empty -> .)
    STRING          reduce using rule 122 (empty -> .)
    BOOL            reduce using rule 122 (empty -> .)
    DEF             reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)

    configdirective                shift and go to state 3
    program                        shift and go to state 5
    config                         shift and go to state 6
    empty                          shift and go to state 7

state 1

    (5) configdirective -> DECISIONSCONFIG . = options

    =               shift and go to state 8


state 2

    (4) configdirective -> VARSCONFIG . = options

    =               shift and go to state 9


state 3

    (2) config -> configdirective . config
    (2) config -> . configdirective config
    (3) config -> . empty
    (4) configdirective -> . VARSCONFIG = options
    (5) configdirective -> . DECISIONSCONFIG = options
    (6) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (122) empty -> .

    VARSCONFIG      shift and go to state 2
    DECISIONSCONFIG shift and go to state 1
    COMPLEXITYCONFIG shift and go to state 4
    INT             reduce using rule 122 (empty -> .)
    FLOAT           reduce using rule 122 (empty -> .)
    STRING          reduce using rule 122 (empty -> .)
    BOOL            reduce using rule 122 (empty -> .)
    DEF             reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)

    config                         shift and go to state 10
    empty                          shift and go to state 7
    configdirective                shift and go to state 3

state 4

    (6) configdirective -> COMPLEXITYCONFIG . = optionsyesno

    =               shift and go to state 11


state 5

    (0) S' -> program .



state 6

    (1) program -> config . body
    (13) body -> . declarationsOpt funcsOpt main funcsOpt
    (16) declarationsOpt -> . declaration declarationsOpt
    (17) declarationsOpt -> . empty
    (18) declaration -> . type declarationB
    (122) empty -> .
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . STRING
    (91) type -> . BOOL

    DEF             reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    body                           shift and go to state 12
    declarationsOpt                shift and go to state 13
    type                           shift and go to state 16
    declaration                    shift and go to state 19
    empty                          shift and go to state 20

state 7

    (3) config -> empty .

    INT             reduce using rule 3 (config -> empty .)
    FLOAT           reduce using rule 3 (config -> empty .)
    STRING          reduce using rule 3 (config -> empty .)
    BOOL            reduce using rule 3 (config -> empty .)
    DEF             reduce using rule 3 (config -> empty .)
    MAIN            reduce using rule 3 (config -> empty .)


state 8

    (5) configdirective -> DECISIONSCONFIG = . options
    (7) options -> . SOME
    (8) options -> . ALL
    (9) options -> . MOST
    (10) options -> . NONE

    SOME            shift and go to state 22
    ALL             shift and go to state 21
    MOST            shift and go to state 24
    NONE            shift and go to state 23

    options                        shift and go to state 25

state 9

    (4) configdirective -> VARSCONFIG = . options
    (7) options -> . SOME
    (8) options -> . ALL
    (9) options -> . MOST
    (10) options -> . NONE

    SOME            shift and go to state 22
    ALL             shift and go to state 21
    MOST            shift and go to state 24
    NONE            shift and go to state 23

    options                        shift and go to state 26

state 10

    (2) config -> configdirective config .

    INT             reduce using rule 2 (config -> configdirective config .)
    FLOAT           reduce using rule 2 (config -> configdirective config .)
    STRING          reduce using rule 2 (config -> configdirective config .)
    BOOL            reduce using rule 2 (config -> configdirective config .)
    DEF             reduce using rule 2 (config -> configdirective config .)
    MAIN            reduce using rule 2 (config -> configdirective config .)


state 11

    (6) configdirective -> COMPLEXITYCONFIG = . optionsyesno
    (11) optionsyesno -> . YES
    (12) optionsyesno -> . NO

    YES             shift and go to state 27
    NO              shift and go to state 29

    optionsyesno                   shift and go to state 28

state 12

    (1) program -> config body .

    $end            reduce using rule 1 (program -> config body .)


state 13

    (13) body -> declarationsOpt . funcsOpt main funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (26) suprafunc -> . func block
    (122) empty -> .
    (27) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 122 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 31
    func                           shift and go to state 32
    empty                          shift and go to state 34

state 14

    (90) type -> STRING .

    ID              reduce using rule 90 (type -> STRING .)


state 15

    (88) type -> INT .

    ID              reduce using rule 88 (type -> INT .)


state 16

    (18) declaration -> type . declarationB
    (19) declarationB -> . ID dimensionsOpt declarationC

    ID              shift and go to state 36

    declarationB                   shift and go to state 35

state 17

    (89) type -> FLOAT .

    ID              reduce using rule 89 (type -> FLOAT .)


state 18

    (91) type -> BOOL .

    ID              reduce using rule 91 (type -> BOOL .)


state 19

    (16) declarationsOpt -> declaration . declarationsOpt
    (16) declarationsOpt -> . declaration declarationsOpt
    (17) declarationsOpt -> . empty
    (18) declaration -> . type declarationB
    (122) empty -> .
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . STRING
    (91) type -> . BOOL

    DEF             reduce using rule 122 (empty -> .)
    MAIN            reduce using rule 122 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    declarationsOpt                shift and go to state 37
    type                           shift and go to state 16
    empty                          shift and go to state 20
    declaration                    shift and go to state 19

state 20

    (17) declarationsOpt -> empty .

    DEF             reduce using rule 17 (declarationsOpt -> empty .)
    MAIN            reduce using rule 17 (declarationsOpt -> empty .)


state 21

    (8) options -> ALL .

    VARSCONFIG      reduce using rule 8 (options -> ALL .)
    DECISIONSCONFIG reduce using rule 8 (options -> ALL .)
    COMPLEXITYCONFIG reduce using rule 8 (options -> ALL .)
    INT             reduce using rule 8 (options -> ALL .)
    FLOAT           reduce using rule 8 (options -> ALL .)
    STRING          reduce using rule 8 (options -> ALL .)
    BOOL            reduce using rule 8 (options -> ALL .)
    DEF             reduce using rule 8 (options -> ALL .)
    MAIN            reduce using rule 8 (options -> ALL .)


state 22

    (7) options -> SOME .

    VARSCONFIG      reduce using rule 7 (options -> SOME .)
    DECISIONSCONFIG reduce using rule 7 (options -> SOME .)
    COMPLEXITYCONFIG reduce using rule 7 (options -> SOME .)
    INT             reduce using rule 7 (options -> SOME .)
    FLOAT           reduce using rule 7 (options -> SOME .)
    STRING          reduce using rule 7 (options -> SOME .)
    BOOL            reduce using rule 7 (options -> SOME .)
    DEF             reduce using rule 7 (options -> SOME .)
    MAIN            reduce using rule 7 (options -> SOME .)


state 23

    (10) options -> NONE .

    VARSCONFIG      reduce using rule 10 (options -> NONE .)
    DECISIONSCONFIG reduce using rule 10 (options -> NONE .)
    COMPLEXITYCONFIG reduce using rule 10 (options -> NONE .)
    INT             reduce using rule 10 (options -> NONE .)
    FLOAT           reduce using rule 10 (options -> NONE .)
    STRING          reduce using rule 10 (options -> NONE .)
    BOOL            reduce using rule 10 (options -> NONE .)
    DEF             reduce using rule 10 (options -> NONE .)
    MAIN            reduce using rule 10 (options -> NONE .)


state 24

    (9) options -> MOST .

    VARSCONFIG      reduce using rule 9 (options -> MOST .)
    DECISIONSCONFIG reduce using rule 9 (options -> MOST .)
    COMPLEXITYCONFIG reduce using rule 9 (options -> MOST .)
    INT             reduce using rule 9 (options -> MOST .)
    FLOAT           reduce using rule 9 (options -> MOST .)
    STRING          reduce using rule 9 (options -> MOST .)
    BOOL            reduce using rule 9 (options -> MOST .)
    DEF             reduce using rule 9 (options -> MOST .)
    MAIN            reduce using rule 9 (options -> MOST .)


state 25

    (5) configdirective -> DECISIONSCONFIG = options .

    VARSCONFIG      reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    INT             reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    FLOAT           reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    STRING          reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    BOOL            reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    DEF             reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    MAIN            reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)


state 26

    (4) configdirective -> VARSCONFIG = options .

    VARSCONFIG      reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    INT             reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    FLOAT           reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    STRING          reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    BOOL            reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    DEF             reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    MAIN            reduce using rule 4 (configdirective -> VARSCONFIG = options .)


state 27

    (11) optionsyesno -> YES .

    VARSCONFIG      reduce using rule 11 (optionsyesno -> YES .)
    DECISIONSCONFIG reduce using rule 11 (optionsyesno -> YES .)
    COMPLEXITYCONFIG reduce using rule 11 (optionsyesno -> YES .)
    INT             reduce using rule 11 (optionsyesno -> YES .)
    FLOAT           reduce using rule 11 (optionsyesno -> YES .)
    STRING          reduce using rule 11 (optionsyesno -> YES .)
    BOOL            reduce using rule 11 (optionsyesno -> YES .)
    DEF             reduce using rule 11 (optionsyesno -> YES .)
    MAIN            reduce using rule 11 (optionsyesno -> YES .)


state 28

    (6) configdirective -> COMPLEXITYCONFIG = optionsyesno .

    VARSCONFIG      reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DECISIONSCONFIG reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    COMPLEXITYCONFIG reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    INT             reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    FLOAT           reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    STRING          reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    BOOL            reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DEF             reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    MAIN            reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)


state 29

    (12) optionsyesno -> NO .

    VARSCONFIG      reduce using rule 12 (optionsyesno -> NO .)
    DECISIONSCONFIG reduce using rule 12 (optionsyesno -> NO .)
    COMPLEXITYCONFIG reduce using rule 12 (optionsyesno -> NO .)
    INT             reduce using rule 12 (optionsyesno -> NO .)
    FLOAT           reduce using rule 12 (optionsyesno -> NO .)
    STRING          reduce using rule 12 (optionsyesno -> NO .)
    BOOL            reduce using rule 12 (optionsyesno -> NO .)
    DEF             reduce using rule 12 (optionsyesno -> NO .)
    MAIN            reduce using rule 12 (optionsyesno -> NO .)


state 30

    (14) funcsOpt -> suprafunc . funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (26) suprafunc -> . func block
    (122) empty -> .
    (27) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 122 (empty -> .)
    $end            reduce using rule 122 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 38
    empty                          shift and go to state 34
    func                           shift and go to state 32

state 31

    (13) body -> declarationsOpt funcsOpt . main funcsOpt
    (25) main -> . MAIN ( ) block

    MAIN            shift and go to state 39

    main                           shift and go to state 40

state 32

    (26) suprafunc -> func . block
    (30) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 42

state 33

    (27) func -> DEF . returntype ID ( paramsOpt )
    (92) returntype -> . VOID
    (93) returntype -> . type
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . STRING
    (91) type -> . BOOL

    VOID            shift and go to state 43
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    returntype                     shift and go to state 44
    type                           shift and go to state 45

state 34

    (15) funcsOpt -> empty .

    MAIN            reduce using rule 15 (funcsOpt -> empty .)
    $end            reduce using rule 15 (funcsOpt -> empty .)


state 35

    (18) declaration -> type declarationB .

    INT             reduce using rule 18 (declaration -> type declarationB .)
    FLOAT           reduce using rule 18 (declaration -> type declarationB .)
    STRING          reduce using rule 18 (declaration -> type declarationB .)
    BOOL            reduce using rule 18 (declaration -> type declarationB .)
    DEF             reduce using rule 18 (declaration -> type declarationB .)
    MAIN            reduce using rule 18 (declaration -> type declarationB .)
    ID              reduce using rule 18 (declaration -> type declarationB .)
    PRINT           reduce using rule 18 (declaration -> type declarationB .)
    RETURN          reduce using rule 18 (declaration -> type declarationB .)
    INPUT           reduce using rule 18 (declaration -> type declarationB .)
    IF              reduce using rule 18 (declaration -> type declarationB .)
    WHILE           reduce using rule 18 (declaration -> type declarationB .)
    FOR             reduce using rule 18 (declaration -> type declarationB .)
    #               reduce using rule 18 (declaration -> type declarationB .)
    TRACKDECISION   reduce using rule 18 (declaration -> type declarationB .)
    FORGETDECISION  reduce using rule 18 (declaration -> type declarationB .)
    }               reduce using rule 18 (declaration -> type declarationB .)


state 36

    (19) declarationB -> ID . dimensionsOpt declarationC
    (35) dimensionsOpt -> . dimensions
    (36) dimensionsOpt -> . empty
    (115) dimensions -> . [ superexpression ] dimensionsB
    (122) empty -> .

    [               shift and go to state 48
    =               reduce using rule 122 (empty -> .)
    ,               reduce using rule 122 (empty -> .)
    ;               reduce using rule 122 (empty -> .)

    dimensionsOpt                  shift and go to state 46
    dimensions                     shift and go to state 47
    empty                          shift and go to state 49

state 37

    (16) declarationsOpt -> declaration declarationsOpt .

    DEF             reduce using rule 16 (declarationsOpt -> declaration declarationsOpt .)
    MAIN            reduce using rule 16 (declarationsOpt -> declaration declarationsOpt .)


state 38

    (14) funcsOpt -> suprafunc funcsOpt .

    MAIN            reduce using rule 14 (funcsOpt -> suprafunc funcsOpt .)
    $end            reduce using rule 14 (funcsOpt -> suprafunc funcsOpt .)


state 39

    (25) main -> MAIN . ( ) block

    (               shift and go to state 50


state 40

    (13) body -> declarationsOpt funcsOpt main . funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (26) suprafunc -> . func block
    (122) empty -> .
    (27) func -> . DEF returntype ID ( paramsOpt )

    $end            reduce using rule 122 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 51
    func                           shift and go to state 32
    empty                          shift and go to state 34

state 41

    (30) block -> { . instructionsOpt }
    (31) instructionsOpt -> . instruction instructionsOpt
    (32) instructionsOpt -> . empty
    (40) instruction -> . assignfunccall ;
    (41) instruction -> . output ;
    (42) instruction -> . return ;
    (43) instruction -> . input ;
    (44) instruction -> . declaration
    (45) instruction -> . condition
    (46) instruction -> . whileloop
    (47) instruction -> . forloop
    (48) instruction -> . localdirective
    (122) empty -> .
    (49) assignfunccall -> . ID assignfunccallB
    (98) output -> . PRINT ( outputB
    (118) return -> . RETURN superexpression
    (95) input -> . INPUT ( ID inputB )
    (18) declaration -> . type declarationB
    (37) condition -> . IF ( superexpression ) block else
    (87) whileloop -> . WHILE ( superexpression ) block
    (94) forloop -> . FOR ( assign ; superexpression ; superexpression ) block
    (52) localdirective -> . localvardirective
    (53) localdirective -> . localdecisiondirective
    (54) localdirective -> . localmsgdirective
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . STRING
    (91) type -> . BOOL
    (103) localvardirective -> . # localvardirectiveB ID
    (107) localdecisiondirective -> . TRACKDECISION
    (108) localdecisiondirective -> . FORGETDECISION
    (109) localdecisiondirective -> . empty
    (106) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 122 (empty -> .)
    ID              shift and go to state 70
    PRINT           shift and go to state 55
    RETURN          shift and go to state 52
    INPUT           shift and go to state 69
    IF              shift and go to state 72
    WHILE           shift and go to state 54
    FOR             shift and go to state 64
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    #               shift and go to state 57
    TRACKDECISION   shift and go to state 59
    FORGETDECISION  shift and go to state 66

  ! ID              [ reduce using rule 122 (empty -> .) ]
  ! PRINT           [ reduce using rule 122 (empty -> .) ]
  ! RETURN          [ reduce using rule 122 (empty -> .) ]
  ! INPUT           [ reduce using rule 122 (empty -> .) ]
  ! IF              [ reduce using rule 122 (empty -> .) ]
  ! WHILE           [ reduce using rule 122 (empty -> .) ]
  ! FOR             [ reduce using rule 122 (empty -> .) ]
  ! INT             [ reduce using rule 122 (empty -> .) ]
  ! FLOAT           [ reduce using rule 122 (empty -> .) ]
  ! STRING          [ reduce using rule 122 (empty -> .) ]
  ! BOOL            [ reduce using rule 122 (empty -> .) ]
  ! #               [ reduce using rule 122 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 122 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 122 (empty -> .) ]

    assignfunccall                 shift and go to state 53
    whileloop                      shift and go to state 56
    localvardirective              shift and go to state 58
    input                          shift and go to state 60
    type                           shift and go to state 16
    empty                          shift and go to state 61
    forloop                        shift and go to state 62
    return                         shift and go to state 63
    instructionsOpt                shift and go to state 65
    localdirective                 shift and go to state 67
    declaration                    shift and go to state 68
    condition                      shift and go to state 71
    instruction                    shift and go to state 73
    localmsgdirective              shift and go to state 74
    localdecisiondirective         shift and go to state 75
    output                         shift and go to state 76

state 42

    (26) suprafunc -> func block .

    DEF             reduce using rule 26 (suprafunc -> func block .)
    $end            reduce using rule 26 (suprafunc -> func block .)
    MAIN            reduce using rule 26 (suprafunc -> func block .)


state 43

    (92) returntype -> VOID .

    ID              reduce using rule 92 (returntype -> VOID .)


state 44

    (27) func -> DEF returntype . ID ( paramsOpt )

    ID              shift and go to state 77


state 45

    (93) returntype -> type .

    ID              reduce using rule 93 (returntype -> type .)


state 46

    (19) declarationB -> ID dimensionsOpt . declarationC
    (20) declarationC -> . = superexpression declarationD
    (21) declarationC -> . , declarationB
    (22) declarationC -> . ;

    =               shift and go to state 78
    ,               shift and go to state 79
    ;               shift and go to state 80

    declarationC                   shift and go to state 81

state 47

    (35) dimensionsOpt -> dimensions .

    =               reduce using rule 35 (dimensionsOpt -> dimensions .)
    /               reduce using rule 35 (dimensionsOpt -> dimensions .)
    *               reduce using rule 35 (dimensionsOpt -> dimensions .)
    -               reduce using rule 35 (dimensionsOpt -> dimensions .)
    +               reduce using rule 35 (dimensionsOpt -> dimensions .)
    <               reduce using rule 35 (dimensionsOpt -> dimensions .)
    >               reduce using rule 35 (dimensionsOpt -> dimensions .)
    &               reduce using rule 35 (dimensionsOpt -> dimensions .)
    |               reduce using rule 35 (dimensionsOpt -> dimensions .)
    ]               reduce using rule 35 (dimensionsOpt -> dimensions .)
    ;               reduce using rule 35 (dimensionsOpt -> dimensions .)
    ,               reduce using rule 35 (dimensionsOpt -> dimensions .)
    )               reduce using rule 35 (dimensionsOpt -> dimensions .)


state 48

    (115) dimensions -> [ . superexpression ] dimensionsB
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 90
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 49

    (36) dimensionsOpt -> empty .

    =               reduce using rule 36 (dimensionsOpt -> empty .)
    /               reduce using rule 36 (dimensionsOpt -> empty .)
    *               reduce using rule 36 (dimensionsOpt -> empty .)
    -               reduce using rule 36 (dimensionsOpt -> empty .)
    +               reduce using rule 36 (dimensionsOpt -> empty .)
    <               reduce using rule 36 (dimensionsOpt -> empty .)
    >               reduce using rule 36 (dimensionsOpt -> empty .)
    &               reduce using rule 36 (dimensionsOpt -> empty .)
    |               reduce using rule 36 (dimensionsOpt -> empty .)
    ]               reduce using rule 36 (dimensionsOpt -> empty .)
    ;               reduce using rule 36 (dimensionsOpt -> empty .)
    ,               reduce using rule 36 (dimensionsOpt -> empty .)
    )               reduce using rule 36 (dimensionsOpt -> empty .)


state 50

    (25) main -> MAIN ( . ) block

    )               shift and go to state 95


state 51

    (13) body -> declarationsOpt funcsOpt main funcsOpt .

    $end            reduce using rule 13 (body -> declarationsOpt funcsOpt main funcsOpt .)


state 52

    (118) return -> RETURN . superexpression
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 96
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 53

    (40) instruction -> assignfunccall . ;

    ;               shift and go to state 97


state 54

    (87) whileloop -> WHILE . ( superexpression ) block

    (               shift and go to state 98


state 55

    (98) output -> PRINT . ( outputB

    (               shift and go to state 99


state 56

    (46) instruction -> whileloop .

    ID              reduce using rule 46 (instruction -> whileloop .)
    PRINT           reduce using rule 46 (instruction -> whileloop .)
    RETURN          reduce using rule 46 (instruction -> whileloop .)
    INPUT           reduce using rule 46 (instruction -> whileloop .)
    IF              reduce using rule 46 (instruction -> whileloop .)
    WHILE           reduce using rule 46 (instruction -> whileloop .)
    FOR             reduce using rule 46 (instruction -> whileloop .)
    INT             reduce using rule 46 (instruction -> whileloop .)
    FLOAT           reduce using rule 46 (instruction -> whileloop .)
    STRING          reduce using rule 46 (instruction -> whileloop .)
    BOOL            reduce using rule 46 (instruction -> whileloop .)
    #               reduce using rule 46 (instruction -> whileloop .)
    TRACKDECISION   reduce using rule 46 (instruction -> whileloop .)
    FORGETDECISION  reduce using rule 46 (instruction -> whileloop .)
    }               reduce using rule 46 (instruction -> whileloop .)


state 57

    (103) localvardirective -> # . localvardirectiveB ID
    (106) localmsgdirective -> # . SHOW SCONST
    (104) localvardirectiveB -> . TRACK
    (105) localvardirectiveB -> . FORGET

    SHOW            shift and go to state 101
    TRACK           shift and go to state 102
    FORGET          shift and go to state 100

    localvardirectiveB             shift and go to state 103

state 58

    (52) localdirective -> localvardirective .

    ID              reduce using rule 52 (localdirective -> localvardirective .)
    PRINT           reduce using rule 52 (localdirective -> localvardirective .)
    RETURN          reduce using rule 52 (localdirective -> localvardirective .)
    INPUT           reduce using rule 52 (localdirective -> localvardirective .)
    IF              reduce using rule 52 (localdirective -> localvardirective .)
    WHILE           reduce using rule 52 (localdirective -> localvardirective .)
    FOR             reduce using rule 52 (localdirective -> localvardirective .)
    INT             reduce using rule 52 (localdirective -> localvardirective .)
    FLOAT           reduce using rule 52 (localdirective -> localvardirective .)
    STRING          reduce using rule 52 (localdirective -> localvardirective .)
    BOOL            reduce using rule 52 (localdirective -> localvardirective .)
    #               reduce using rule 52 (localdirective -> localvardirective .)
    TRACKDECISION   reduce using rule 52 (localdirective -> localvardirective .)
    FORGETDECISION  reduce using rule 52 (localdirective -> localvardirective .)
    }               reduce using rule 52 (localdirective -> localvardirective .)


state 59

    (107) localdecisiondirective -> TRACKDECISION .

    ID              reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    PRINT           reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    RETURN          reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    INPUT           reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    IF              reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    WHILE           reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    FOR             reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    INT             reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    FLOAT           reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    STRING          reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    BOOL            reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    #               reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    TRACKDECISION   reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    FORGETDECISION  reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)
    }               reduce using rule 107 (localdecisiondirective -> TRACKDECISION .)


state 60

    (43) instruction -> input . ;

    ;               shift and go to state 104


state 61

    (32) instructionsOpt -> empty .
    (109) localdecisiondirective -> empty .

  ! reduce/reduce conflict for } resolved using rule 32 (instructionsOpt -> empty .)
    }               reduce using rule 32 (instructionsOpt -> empty .)
    ID              reduce using rule 109 (localdecisiondirective -> empty .)
    PRINT           reduce using rule 109 (localdecisiondirective -> empty .)
    RETURN          reduce using rule 109 (localdecisiondirective -> empty .)
    INPUT           reduce using rule 109 (localdecisiondirective -> empty .)
    IF              reduce using rule 109 (localdecisiondirective -> empty .)
    WHILE           reduce using rule 109 (localdecisiondirective -> empty .)
    FOR             reduce using rule 109 (localdecisiondirective -> empty .)
    INT             reduce using rule 109 (localdecisiondirective -> empty .)
    FLOAT           reduce using rule 109 (localdecisiondirective -> empty .)
    STRING          reduce using rule 109 (localdecisiondirective -> empty .)
    BOOL            reduce using rule 109 (localdecisiondirective -> empty .)
    #               reduce using rule 109 (localdecisiondirective -> empty .)
    TRACKDECISION   reduce using rule 109 (localdecisiondirective -> empty .)
    FORGETDECISION  reduce using rule 109 (localdecisiondirective -> empty .)

  ! }               [ reduce using rule 109 (localdecisiondirective -> empty .) ]


state 62

    (47) instruction -> forloop .

    ID              reduce using rule 47 (instruction -> forloop .)
    PRINT           reduce using rule 47 (instruction -> forloop .)
    RETURN          reduce using rule 47 (instruction -> forloop .)
    INPUT           reduce using rule 47 (instruction -> forloop .)
    IF              reduce using rule 47 (instruction -> forloop .)
    WHILE           reduce using rule 47 (instruction -> forloop .)
    FOR             reduce using rule 47 (instruction -> forloop .)
    INT             reduce using rule 47 (instruction -> forloop .)
    FLOAT           reduce using rule 47 (instruction -> forloop .)
    STRING          reduce using rule 47 (instruction -> forloop .)
    BOOL            reduce using rule 47 (instruction -> forloop .)
    #               reduce using rule 47 (instruction -> forloop .)
    TRACKDECISION   reduce using rule 47 (instruction -> forloop .)
    FORGETDECISION  reduce using rule 47 (instruction -> forloop .)
    }               reduce using rule 47 (instruction -> forloop .)


state 63

    (42) instruction -> return . ;

    ;               shift and go to state 105


state 64

    (94) forloop -> FOR . ( assign ; superexpression ; superexpression ) block

    (               shift and go to state 106


state 65

    (30) block -> { instructionsOpt . }

    }               shift and go to state 107


state 66

    (108) localdecisiondirective -> FORGETDECISION .

    ID              reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    PRINT           reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    RETURN          reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    INPUT           reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    IF              reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    WHILE           reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    FOR             reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    INT             reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    FLOAT           reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    STRING          reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    BOOL            reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    #               reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    TRACKDECISION   reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    FORGETDECISION  reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)
    }               reduce using rule 108 (localdecisiondirective -> FORGETDECISION .)


state 67

    (48) instruction -> localdirective .

    ID              reduce using rule 48 (instruction -> localdirective .)
    PRINT           reduce using rule 48 (instruction -> localdirective .)
    RETURN          reduce using rule 48 (instruction -> localdirective .)
    INPUT           reduce using rule 48 (instruction -> localdirective .)
    IF              reduce using rule 48 (instruction -> localdirective .)
    WHILE           reduce using rule 48 (instruction -> localdirective .)
    FOR             reduce using rule 48 (instruction -> localdirective .)
    INT             reduce using rule 48 (instruction -> localdirective .)
    FLOAT           reduce using rule 48 (instruction -> localdirective .)
    STRING          reduce using rule 48 (instruction -> localdirective .)
    BOOL            reduce using rule 48 (instruction -> localdirective .)
    #               reduce using rule 48 (instruction -> localdirective .)
    TRACKDECISION   reduce using rule 48 (instruction -> localdirective .)
    FORGETDECISION  reduce using rule 48 (instruction -> localdirective .)
    }               reduce using rule 48 (instruction -> localdirective .)


state 68

    (44) instruction -> declaration .

    ID              reduce using rule 44 (instruction -> declaration .)
    PRINT           reduce using rule 44 (instruction -> declaration .)
    RETURN          reduce using rule 44 (instruction -> declaration .)
    INPUT           reduce using rule 44 (instruction -> declaration .)
    IF              reduce using rule 44 (instruction -> declaration .)
    WHILE           reduce using rule 44 (instruction -> declaration .)
    FOR             reduce using rule 44 (instruction -> declaration .)
    INT             reduce using rule 44 (instruction -> declaration .)
    FLOAT           reduce using rule 44 (instruction -> declaration .)
    STRING          reduce using rule 44 (instruction -> declaration .)
    BOOL            reduce using rule 44 (instruction -> declaration .)
    #               reduce using rule 44 (instruction -> declaration .)
    TRACKDECISION   reduce using rule 44 (instruction -> declaration .)
    FORGETDECISION  reduce using rule 44 (instruction -> declaration .)
    }               reduce using rule 44 (instruction -> declaration .)


state 69

    (95) input -> INPUT . ( ID inputB )

    (               shift and go to state 108


state 70

    (49) assignfunccall -> ID . assignfunccallB
    (50) assignfunccallB -> . ( funccallB
    (51) assignfunccallB -> . assignB
    (34) assignB -> . dimensionsOpt = superexpression
    (35) dimensionsOpt -> . dimensions
    (36) dimensionsOpt -> . empty
    (115) dimensions -> . [ superexpression ] dimensionsB
    (122) empty -> .

    (               shift and go to state 110
    [               shift and go to state 48
    =               reduce using rule 122 (empty -> .)

    dimensions                     shift and go to state 47
    assignfunccallB                shift and go to state 109
    assignB                        shift and go to state 111
    dimensionsOpt                  shift and go to state 112
    empty                          shift and go to state 49

state 71

    (45) instruction -> condition .

    ID              reduce using rule 45 (instruction -> condition .)
    PRINT           reduce using rule 45 (instruction -> condition .)
    RETURN          reduce using rule 45 (instruction -> condition .)
    INPUT           reduce using rule 45 (instruction -> condition .)
    IF              reduce using rule 45 (instruction -> condition .)
    WHILE           reduce using rule 45 (instruction -> condition .)
    FOR             reduce using rule 45 (instruction -> condition .)
    INT             reduce using rule 45 (instruction -> condition .)
    FLOAT           reduce using rule 45 (instruction -> condition .)
    STRING          reduce using rule 45 (instruction -> condition .)
    BOOL            reduce using rule 45 (instruction -> condition .)
    #               reduce using rule 45 (instruction -> condition .)
    TRACKDECISION   reduce using rule 45 (instruction -> condition .)
    FORGETDECISION  reduce using rule 45 (instruction -> condition .)
    }               reduce using rule 45 (instruction -> condition .)


state 72

    (37) condition -> IF . ( superexpression ) block else

    (               shift and go to state 113


state 73

    (31) instructionsOpt -> instruction . instructionsOpt
    (31) instructionsOpt -> . instruction instructionsOpt
    (32) instructionsOpt -> . empty
    (40) instruction -> . assignfunccall ;
    (41) instruction -> . output ;
    (42) instruction -> . return ;
    (43) instruction -> . input ;
    (44) instruction -> . declaration
    (45) instruction -> . condition
    (46) instruction -> . whileloop
    (47) instruction -> . forloop
    (48) instruction -> . localdirective
    (122) empty -> .
    (49) assignfunccall -> . ID assignfunccallB
    (98) output -> . PRINT ( outputB
    (118) return -> . RETURN superexpression
    (95) input -> . INPUT ( ID inputB )
    (18) declaration -> . type declarationB
    (37) condition -> . IF ( superexpression ) block else
    (87) whileloop -> . WHILE ( superexpression ) block
    (94) forloop -> . FOR ( assign ; superexpression ; superexpression ) block
    (52) localdirective -> . localvardirective
    (53) localdirective -> . localdecisiondirective
    (54) localdirective -> . localmsgdirective
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . STRING
    (91) type -> . BOOL
    (103) localvardirective -> . # localvardirectiveB ID
    (107) localdecisiondirective -> . TRACKDECISION
    (108) localdecisiondirective -> . FORGETDECISION
    (109) localdecisiondirective -> . empty
    (106) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 122 (empty -> .)
    ID              shift and go to state 70
    PRINT           shift and go to state 55
    RETURN          shift and go to state 52
    INPUT           shift and go to state 69
    IF              shift and go to state 72
    WHILE           shift and go to state 54
    FOR             shift and go to state 64
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    #               shift and go to state 57
    TRACKDECISION   shift and go to state 59
    FORGETDECISION  shift and go to state 66

  ! ID              [ reduce using rule 122 (empty -> .) ]
  ! PRINT           [ reduce using rule 122 (empty -> .) ]
  ! RETURN          [ reduce using rule 122 (empty -> .) ]
  ! INPUT           [ reduce using rule 122 (empty -> .) ]
  ! IF              [ reduce using rule 122 (empty -> .) ]
  ! WHILE           [ reduce using rule 122 (empty -> .) ]
  ! FOR             [ reduce using rule 122 (empty -> .) ]
  ! INT             [ reduce using rule 122 (empty -> .) ]
  ! FLOAT           [ reduce using rule 122 (empty -> .) ]
  ! STRING          [ reduce using rule 122 (empty -> .) ]
  ! BOOL            [ reduce using rule 122 (empty -> .) ]
  ! #               [ reduce using rule 122 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 122 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 122 (empty -> .) ]

    assignfunccall                 shift and go to state 53
    whileloop                      shift and go to state 56
    localvardirective              shift and go to state 58
    input                          shift and go to state 60
    type                           shift and go to state 16
    empty                          shift and go to state 61
    forloop                        shift and go to state 62
    return                         shift and go to state 63
    instructionsOpt                shift and go to state 114
    localdirective                 shift and go to state 67
    declaration                    shift and go to state 68
    condition                      shift and go to state 71
    instruction                    shift and go to state 73
    localmsgdirective              shift and go to state 74
    localdecisiondirective         shift and go to state 75
    output                         shift and go to state 76

state 74

    (54) localdirective -> localmsgdirective .

    ID              reduce using rule 54 (localdirective -> localmsgdirective .)
    PRINT           reduce using rule 54 (localdirective -> localmsgdirective .)
    RETURN          reduce using rule 54 (localdirective -> localmsgdirective .)
    INPUT           reduce using rule 54 (localdirective -> localmsgdirective .)
    IF              reduce using rule 54 (localdirective -> localmsgdirective .)
    WHILE           reduce using rule 54 (localdirective -> localmsgdirective .)
    FOR             reduce using rule 54 (localdirective -> localmsgdirective .)
    INT             reduce using rule 54 (localdirective -> localmsgdirective .)
    FLOAT           reduce using rule 54 (localdirective -> localmsgdirective .)
    STRING          reduce using rule 54 (localdirective -> localmsgdirective .)
    BOOL            reduce using rule 54 (localdirective -> localmsgdirective .)
    #               reduce using rule 54 (localdirective -> localmsgdirective .)
    TRACKDECISION   reduce using rule 54 (localdirective -> localmsgdirective .)
    FORGETDECISION  reduce using rule 54 (localdirective -> localmsgdirective .)
    }               reduce using rule 54 (localdirective -> localmsgdirective .)


state 75

    (53) localdirective -> localdecisiondirective .

    ID              reduce using rule 53 (localdirective -> localdecisiondirective .)
    PRINT           reduce using rule 53 (localdirective -> localdecisiondirective .)
    RETURN          reduce using rule 53 (localdirective -> localdecisiondirective .)
    INPUT           reduce using rule 53 (localdirective -> localdecisiondirective .)
    IF              reduce using rule 53 (localdirective -> localdecisiondirective .)
    WHILE           reduce using rule 53 (localdirective -> localdecisiondirective .)
    FOR             reduce using rule 53 (localdirective -> localdecisiondirective .)
    INT             reduce using rule 53 (localdirective -> localdecisiondirective .)
    FLOAT           reduce using rule 53 (localdirective -> localdecisiondirective .)
    STRING          reduce using rule 53 (localdirective -> localdecisiondirective .)
    BOOL            reduce using rule 53 (localdirective -> localdecisiondirective .)
    #               reduce using rule 53 (localdirective -> localdecisiondirective .)
    TRACKDECISION   reduce using rule 53 (localdirective -> localdecisiondirective .)
    FORGETDECISION  reduce using rule 53 (localdirective -> localdecisiondirective .)
    }               reduce using rule 53 (localdirective -> localdecisiondirective .)


state 76

    (41) instruction -> output . ;

    ;               shift and go to state 115


state 77

    (27) func -> DEF returntype ID . ( paramsOpt )

    (               shift and go to state 116


state 78

    (20) declarationC -> = . superexpression declarationD
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 117
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 79

    (21) declarationC -> , . declarationB
    (19) declarationB -> . ID dimensionsOpt declarationC

    ID              shift and go to state 36

    declarationB                   shift and go to state 118

state 80

    (22) declarationC -> ; .

    INT             reduce using rule 22 (declarationC -> ; .)
    FLOAT           reduce using rule 22 (declarationC -> ; .)
    STRING          reduce using rule 22 (declarationC -> ; .)
    BOOL            reduce using rule 22 (declarationC -> ; .)
    DEF             reduce using rule 22 (declarationC -> ; .)
    MAIN            reduce using rule 22 (declarationC -> ; .)
    ID              reduce using rule 22 (declarationC -> ; .)
    PRINT           reduce using rule 22 (declarationC -> ; .)
    RETURN          reduce using rule 22 (declarationC -> ; .)
    INPUT           reduce using rule 22 (declarationC -> ; .)
    IF              reduce using rule 22 (declarationC -> ; .)
    WHILE           reduce using rule 22 (declarationC -> ; .)
    FOR             reduce using rule 22 (declarationC -> ; .)
    #               reduce using rule 22 (declarationC -> ; .)
    TRACKDECISION   reduce using rule 22 (declarationC -> ; .)
    FORGETDECISION  reduce using rule 22 (declarationC -> ; .)
    }               reduce using rule 22 (declarationC -> ; .)


state 81

    (19) declarationB -> ID dimensionsOpt declarationC .

    INT             reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    FLOAT           reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    STRING          reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    BOOL            reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    DEF             reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    MAIN            reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    ID              reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    PRINT           reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    RETURN          reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    INPUT           reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    IF              reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    WHILE           reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    FOR             reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    #               reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    TRACKDECISION   reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    FORGETDECISION  reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)
    }               reduce using rule 19 (declarationB -> ID dimensionsOpt declarationC .)


state 82

    (79) signB -> sign .

    FCONST          reduce using rule 79 (signB -> sign .)
    ICONST          reduce using rule 79 (signB -> sign .)
    TRUE            reduce using rule 79 (signB -> sign .)
    FALSE           reduce using rule 79 (signB -> sign .)


state 83

    (75) factor -> signB . constant
    (81) constant -> . FCONST
    (82) constant -> . ICONST
    (83) constant -> . TRUE
    (84) constant -> . FALSE

    FCONST          shift and go to state 120
    ICONST          shift and go to state 121
    TRUE            shift and go to state 123
    FALSE           shift and go to state 119

    constant                       shift and go to state 122

state 84

    (76) factor -> ( . superexpression )
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 124
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 85

    (85) sign -> + .

    FCONST          reduce using rule 85 (sign -> + .)
    ICONST          reduce using rule 85 (sign -> + .)
    TRUE            reduce using rule 85 (sign -> + .)
    FALSE           reduce using rule 85 (sign -> + .)


state 86

    (86) sign -> - .

    FCONST          reduce using rule 86 (sign -> - .)
    ICONST          reduce using rule 86 (sign -> - .)
    TRUE            reduce using rule 86 (sign -> - .)
    FALSE           reduce using rule 86 (sign -> - .)


state 87

    (71) term -> factor . termB
    (72) termB -> . / term
    (73) termB -> . * term
    (74) termB -> . empty
    (122) empty -> .

    /               shift and go to state 126
    *               shift and go to state 125
    -               reduce using rule 122 (empty -> .)
    +               reduce using rule 122 (empty -> .)
    <               reduce using rule 122 (empty -> .)
    >               reduce using rule 122 (empty -> .)
    =               reduce using rule 122 (empty -> .)
    &               reduce using rule 122 (empty -> .)
    |               reduce using rule 122 (empty -> .)
    ]               reduce using rule 122 (empty -> .)
    ;               reduce using rule 122 (empty -> .)
    ,               reduce using rule 122 (empty -> .)
    )               reduce using rule 122 (empty -> .)

    termB                          shift and go to state 127
    empty                          shift and go to state 128

state 88

    (80) signB -> empty .

    FCONST          reduce using rule 80 (signB -> empty .)
    ICONST          reduce using rule 80 (signB -> empty .)
    TRUE            reduce using rule 80 (signB -> empty .)
    FALSE           reduce using rule 80 (signB -> empty .)


state 89

    (77) factor -> funccall .

    /               reduce using rule 77 (factor -> funccall .)
    *               reduce using rule 77 (factor -> funccall .)
    -               reduce using rule 77 (factor -> funccall .)
    +               reduce using rule 77 (factor -> funccall .)
    <               reduce using rule 77 (factor -> funccall .)
    >               reduce using rule 77 (factor -> funccall .)
    =               reduce using rule 77 (factor -> funccall .)
    &               reduce using rule 77 (factor -> funccall .)
    |               reduce using rule 77 (factor -> funccall .)
    )               reduce using rule 77 (factor -> funccall .)
    ]               reduce using rule 77 (factor -> funccall .)
    ;               reduce using rule 77 (factor -> funccall .)
    ,               reduce using rule 77 (factor -> funccall .)


state 90

    (115) dimensions -> [ superexpression . ] dimensionsB

    ]               shift and go to state 129


state 91

    (78) factor -> ID . dimensionsOpt
    (110) funccall -> ID . ( funccallB
    (35) dimensionsOpt -> . dimensions
    (36) dimensionsOpt -> . empty
    (115) dimensions -> . [ superexpression ] dimensionsB
    (122) empty -> .

    (               shift and go to state 130
    [               shift and go to state 48
    /               reduce using rule 122 (empty -> .)
    *               reduce using rule 122 (empty -> .)
    -               reduce using rule 122 (empty -> .)
    +               reduce using rule 122 (empty -> .)
    <               reduce using rule 122 (empty -> .)
    >               reduce using rule 122 (empty -> .)
    =               reduce using rule 122 (empty -> .)
    &               reduce using rule 122 (empty -> .)
    |               reduce using rule 122 (empty -> .)
    ]               reduce using rule 122 (empty -> .)
    ;               reduce using rule 122 (empty -> .)
    ,               reduce using rule 122 (empty -> .)
    )               reduce using rule 122 (empty -> .)

    dimensions                     shift and go to state 47
    dimensionsOpt                  shift and go to state 131
    empty                          shift and go to state 49

state 92

    (67) exp -> term . expB
    (68) expB -> . - exp
    (69) expB -> . + exp
    (70) expB -> . empty
    (122) empty -> .

    -               shift and go to state 133
    +               shift and go to state 132
    <               reduce using rule 122 (empty -> .)
    >               reduce using rule 122 (empty -> .)
    =               reduce using rule 122 (empty -> .)
    &               reduce using rule 122 (empty -> .)
    |               reduce using rule 122 (empty -> .)
    ]               reduce using rule 122 (empty -> .)
    ;               reduce using rule 122 (empty -> .)
    ,               reduce using rule 122 (empty -> .)
    )               reduce using rule 122 (empty -> .)

    expB                           shift and go to state 134
    empty                          shift and go to state 135

state 93

    (59) expression -> exp . expressionB
    (60) expressionB -> . < exp
    (61) expressionB -> . > exp
    (62) expressionB -> . < > exp
    (63) expressionB -> . = = exp
    (64) expressionB -> . < = exp
    (65) expressionB -> . > = exp
    (66) expressionB -> . empty
    (122) empty -> .

    <               shift and go to state 138
    >               shift and go to state 140
    =               shift and go to state 137
    &               reduce using rule 122 (empty -> .)
    |               reduce using rule 122 (empty -> .)
    ]               reduce using rule 122 (empty -> .)
    ;               reduce using rule 122 (empty -> .)
    ,               reduce using rule 122 (empty -> .)
    )               reduce using rule 122 (empty -> .)

    expressionB                    shift and go to state 136
    empty                          shift and go to state 139

state 94

    (55) superexpression -> expression . superexpressionB
    (56) superexpressionB -> . & & superexpression
    (57) superexpressionB -> . | | superexpression
    (58) superexpressionB -> . empty
    (122) empty -> .

    &               shift and go to state 141
    |               shift and go to state 143
    ]               reduce using rule 122 (empty -> .)
    ;               reduce using rule 122 (empty -> .)
    ,               reduce using rule 122 (empty -> .)
    )               reduce using rule 122 (empty -> .)

    empty                          shift and go to state 144
    superexpressionB               shift and go to state 142

state 95

    (25) main -> MAIN ( ) . block
    (30) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 145

state 96

    (118) return -> RETURN superexpression .

    ;               reduce using rule 118 (return -> RETURN superexpression .)


state 97

    (40) instruction -> assignfunccall ; .

    ID              reduce using rule 40 (instruction -> assignfunccall ; .)
    PRINT           reduce using rule 40 (instruction -> assignfunccall ; .)
    RETURN          reduce using rule 40 (instruction -> assignfunccall ; .)
    INPUT           reduce using rule 40 (instruction -> assignfunccall ; .)
    IF              reduce using rule 40 (instruction -> assignfunccall ; .)
    WHILE           reduce using rule 40 (instruction -> assignfunccall ; .)
    FOR             reduce using rule 40 (instruction -> assignfunccall ; .)
    INT             reduce using rule 40 (instruction -> assignfunccall ; .)
    FLOAT           reduce using rule 40 (instruction -> assignfunccall ; .)
    STRING          reduce using rule 40 (instruction -> assignfunccall ; .)
    BOOL            reduce using rule 40 (instruction -> assignfunccall ; .)
    #               reduce using rule 40 (instruction -> assignfunccall ; .)
    TRACKDECISION   reduce using rule 40 (instruction -> assignfunccall ; .)
    FORGETDECISION  reduce using rule 40 (instruction -> assignfunccall ; .)
    }               reduce using rule 40 (instruction -> assignfunccall ; .)


state 98

    (87) whileloop -> WHILE ( . superexpression ) block
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 146
    empty                          shift and go to state 88
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94

state 99

    (98) output -> PRINT ( . outputB
    (99) outputB -> . SCONST outputC
    (100) outputB -> . superexpression outputC
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    SCONST          shift and go to state 147
    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    factor                         shift and go to state 87
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 148
    exp                            shift and go to state 93
    outputB                        shift and go to state 149
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 100

    (105) localvardirectiveB -> FORGET .

    ID              reduce using rule 105 (localvardirectiveB -> FORGET .)


state 101

    (106) localmsgdirective -> # SHOW . SCONST

    SCONST          shift and go to state 150


state 102

    (104) localvardirectiveB -> TRACK .

    ID              reduce using rule 104 (localvardirectiveB -> TRACK .)


state 103

    (103) localvardirective -> # localvardirectiveB . ID

    ID              shift and go to state 151


state 104

    (43) instruction -> input ; .

    ID              reduce using rule 43 (instruction -> input ; .)
    PRINT           reduce using rule 43 (instruction -> input ; .)
    RETURN          reduce using rule 43 (instruction -> input ; .)
    INPUT           reduce using rule 43 (instruction -> input ; .)
    IF              reduce using rule 43 (instruction -> input ; .)
    WHILE           reduce using rule 43 (instruction -> input ; .)
    FOR             reduce using rule 43 (instruction -> input ; .)
    INT             reduce using rule 43 (instruction -> input ; .)
    FLOAT           reduce using rule 43 (instruction -> input ; .)
    STRING          reduce using rule 43 (instruction -> input ; .)
    BOOL            reduce using rule 43 (instruction -> input ; .)
    #               reduce using rule 43 (instruction -> input ; .)
    TRACKDECISION   reduce using rule 43 (instruction -> input ; .)
    FORGETDECISION  reduce using rule 43 (instruction -> input ; .)
    }               reduce using rule 43 (instruction -> input ; .)


state 105

    (42) instruction -> return ; .

    ID              reduce using rule 42 (instruction -> return ; .)
    PRINT           reduce using rule 42 (instruction -> return ; .)
    RETURN          reduce using rule 42 (instruction -> return ; .)
    INPUT           reduce using rule 42 (instruction -> return ; .)
    IF              reduce using rule 42 (instruction -> return ; .)
    WHILE           reduce using rule 42 (instruction -> return ; .)
    FOR             reduce using rule 42 (instruction -> return ; .)
    INT             reduce using rule 42 (instruction -> return ; .)
    FLOAT           reduce using rule 42 (instruction -> return ; .)
    STRING          reduce using rule 42 (instruction -> return ; .)
    BOOL            reduce using rule 42 (instruction -> return ; .)
    #               reduce using rule 42 (instruction -> return ; .)
    TRACKDECISION   reduce using rule 42 (instruction -> return ; .)
    FORGETDECISION  reduce using rule 42 (instruction -> return ; .)
    }               reduce using rule 42 (instruction -> return ; .)


state 106

    (94) forloop -> FOR ( . assign ; superexpression ; superexpression ) block
    (33) assign -> . ID dimensionsOpt = superexpression

    ID              shift and go to state 152

    assign                         shift and go to state 153

state 107

    (30) block -> { instructionsOpt } .

    DEF             reduce using rule 30 (block -> { instructionsOpt } .)
    $end            reduce using rule 30 (block -> { instructionsOpt } .)
    ID              reduce using rule 30 (block -> { instructionsOpt } .)
    PRINT           reduce using rule 30 (block -> { instructionsOpt } .)
    RETURN          reduce using rule 30 (block -> { instructionsOpt } .)
    INPUT           reduce using rule 30 (block -> { instructionsOpt } .)
    IF              reduce using rule 30 (block -> { instructionsOpt } .)
    WHILE           reduce using rule 30 (block -> { instructionsOpt } .)
    FOR             reduce using rule 30 (block -> { instructionsOpt } .)
    INT             reduce using rule 30 (block -> { instructionsOpt } .)
    FLOAT           reduce using rule 30 (block -> { instructionsOpt } .)
    STRING          reduce using rule 30 (block -> { instructionsOpt } .)
    BOOL            reduce using rule 30 (block -> { instructionsOpt } .)
    #               reduce using rule 30 (block -> { instructionsOpt } .)
    TRACKDECISION   reduce using rule 30 (block -> { instructionsOpt } .)
    FORGETDECISION  reduce using rule 30 (block -> { instructionsOpt } .)
    }               reduce using rule 30 (block -> { instructionsOpt } .)
    ELSE            reduce using rule 30 (block -> { instructionsOpt } .)
    MAIN            reduce using rule 30 (block -> { instructionsOpt } .)


state 108

    (95) input -> INPUT ( . ID inputB )

    ID              shift and go to state 154


state 109

    (49) assignfunccall -> ID assignfunccallB .

    ;               reduce using rule 49 (assignfunccall -> ID assignfunccallB .)


state 110

    (50) assignfunccallB -> ( . funccallB
    (111) funccallB -> . superexpression funccallC
    (112) funccallB -> . )
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    )               shift and go to state 156
    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    funccallB                      shift and go to state 155
    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 157
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 111

    (51) assignfunccallB -> assignB .

    ;               reduce using rule 51 (assignfunccallB -> assignB .)


state 112

    (34) assignB -> dimensionsOpt . = superexpression

    =               shift and go to state 158


state 113

    (37) condition -> IF ( . superexpression ) block else
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 159
    empty                          shift and go to state 88
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94

state 114

    (31) instructionsOpt -> instruction instructionsOpt .

    }               reduce using rule 31 (instructionsOpt -> instruction instructionsOpt .)


state 115

    (41) instruction -> output ; .

    ID              reduce using rule 41 (instruction -> output ; .)
    PRINT           reduce using rule 41 (instruction -> output ; .)
    RETURN          reduce using rule 41 (instruction -> output ; .)
    INPUT           reduce using rule 41 (instruction -> output ; .)
    IF              reduce using rule 41 (instruction -> output ; .)
    WHILE           reduce using rule 41 (instruction -> output ; .)
    FOR             reduce using rule 41 (instruction -> output ; .)
    INT             reduce using rule 41 (instruction -> output ; .)
    FLOAT           reduce using rule 41 (instruction -> output ; .)
    STRING          reduce using rule 41 (instruction -> output ; .)
    BOOL            reduce using rule 41 (instruction -> output ; .)
    #               reduce using rule 41 (instruction -> output ; .)
    TRACKDECISION   reduce using rule 41 (instruction -> output ; .)
    FORGETDECISION  reduce using rule 41 (instruction -> output ; .)
    }               reduce using rule 41 (instruction -> output ; .)


state 116

    (27) func -> DEF returntype ID ( . paramsOpt )
    (28) paramsOpt -> . params
    (29) paramsOpt -> . empty
    (119) params -> . type ID paramsB
    (122) empty -> .
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . STRING
    (91) type -> . BOOL

    )               reduce using rule 122 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    paramsOpt                      shift and go to state 160
    params                         shift and go to state 161
    type                           shift and go to state 163
    empty                          shift and go to state 162

state 117

    (20) declarationC -> = superexpression . declarationD
    (23) declarationD -> . , declarationB
    (24) declarationD -> . ;

    ,               shift and go to state 164
    ;               shift and go to state 166

    declarationD                   shift and go to state 165

state 118

    (21) declarationC -> , declarationB .

    INT             reduce using rule 21 (declarationC -> , declarationB .)
    FLOAT           reduce using rule 21 (declarationC -> , declarationB .)
    STRING          reduce using rule 21 (declarationC -> , declarationB .)
    BOOL            reduce using rule 21 (declarationC -> , declarationB .)
    DEF             reduce using rule 21 (declarationC -> , declarationB .)
    MAIN            reduce using rule 21 (declarationC -> , declarationB .)
    ID              reduce using rule 21 (declarationC -> , declarationB .)
    PRINT           reduce using rule 21 (declarationC -> , declarationB .)
    RETURN          reduce using rule 21 (declarationC -> , declarationB .)
    INPUT           reduce using rule 21 (declarationC -> , declarationB .)
    IF              reduce using rule 21 (declarationC -> , declarationB .)
    WHILE           reduce using rule 21 (declarationC -> , declarationB .)
    FOR             reduce using rule 21 (declarationC -> , declarationB .)
    #               reduce using rule 21 (declarationC -> , declarationB .)
    TRACKDECISION   reduce using rule 21 (declarationC -> , declarationB .)
    FORGETDECISION  reduce using rule 21 (declarationC -> , declarationB .)
    }               reduce using rule 21 (declarationC -> , declarationB .)


state 119

    (84) constant -> FALSE .

    /               reduce using rule 84 (constant -> FALSE .)
    *               reduce using rule 84 (constant -> FALSE .)
    -               reduce using rule 84 (constant -> FALSE .)
    +               reduce using rule 84 (constant -> FALSE .)
    <               reduce using rule 84 (constant -> FALSE .)
    >               reduce using rule 84 (constant -> FALSE .)
    =               reduce using rule 84 (constant -> FALSE .)
    &               reduce using rule 84 (constant -> FALSE .)
    |               reduce using rule 84 (constant -> FALSE .)
    ]               reduce using rule 84 (constant -> FALSE .)
    ;               reduce using rule 84 (constant -> FALSE .)
    ,               reduce using rule 84 (constant -> FALSE .)
    )               reduce using rule 84 (constant -> FALSE .)


state 120

    (81) constant -> FCONST .

    /               reduce using rule 81 (constant -> FCONST .)
    *               reduce using rule 81 (constant -> FCONST .)
    -               reduce using rule 81 (constant -> FCONST .)
    +               reduce using rule 81 (constant -> FCONST .)
    <               reduce using rule 81 (constant -> FCONST .)
    >               reduce using rule 81 (constant -> FCONST .)
    =               reduce using rule 81 (constant -> FCONST .)
    &               reduce using rule 81 (constant -> FCONST .)
    |               reduce using rule 81 (constant -> FCONST .)
    ]               reduce using rule 81 (constant -> FCONST .)
    ;               reduce using rule 81 (constant -> FCONST .)
    ,               reduce using rule 81 (constant -> FCONST .)
    )               reduce using rule 81 (constant -> FCONST .)


state 121

    (82) constant -> ICONST .

    /               reduce using rule 82 (constant -> ICONST .)
    *               reduce using rule 82 (constant -> ICONST .)
    -               reduce using rule 82 (constant -> ICONST .)
    +               reduce using rule 82 (constant -> ICONST .)
    <               reduce using rule 82 (constant -> ICONST .)
    >               reduce using rule 82 (constant -> ICONST .)
    =               reduce using rule 82 (constant -> ICONST .)
    &               reduce using rule 82 (constant -> ICONST .)
    |               reduce using rule 82 (constant -> ICONST .)
    ]               reduce using rule 82 (constant -> ICONST .)
    ;               reduce using rule 82 (constant -> ICONST .)
    ,               reduce using rule 82 (constant -> ICONST .)
    )               reduce using rule 82 (constant -> ICONST .)


state 122

    (75) factor -> signB constant .

    /               reduce using rule 75 (factor -> signB constant .)
    *               reduce using rule 75 (factor -> signB constant .)
    -               reduce using rule 75 (factor -> signB constant .)
    +               reduce using rule 75 (factor -> signB constant .)
    <               reduce using rule 75 (factor -> signB constant .)
    >               reduce using rule 75 (factor -> signB constant .)
    =               reduce using rule 75 (factor -> signB constant .)
    &               reduce using rule 75 (factor -> signB constant .)
    |               reduce using rule 75 (factor -> signB constant .)
    )               reduce using rule 75 (factor -> signB constant .)
    ]               reduce using rule 75 (factor -> signB constant .)
    ;               reduce using rule 75 (factor -> signB constant .)
    ,               reduce using rule 75 (factor -> signB constant .)


state 123

    (83) constant -> TRUE .

    /               reduce using rule 83 (constant -> TRUE .)
    *               reduce using rule 83 (constant -> TRUE .)
    -               reduce using rule 83 (constant -> TRUE .)
    +               reduce using rule 83 (constant -> TRUE .)
    <               reduce using rule 83 (constant -> TRUE .)
    >               reduce using rule 83 (constant -> TRUE .)
    =               reduce using rule 83 (constant -> TRUE .)
    &               reduce using rule 83 (constant -> TRUE .)
    |               reduce using rule 83 (constant -> TRUE .)
    ]               reduce using rule 83 (constant -> TRUE .)
    ;               reduce using rule 83 (constant -> TRUE .)
    ,               reduce using rule 83 (constant -> TRUE .)
    )               reduce using rule 83 (constant -> TRUE .)


state 124

    (76) factor -> ( superexpression . )

    )               shift and go to state 167


state 125

    (73) termB -> * . term
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 168
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    factor                         shift and go to state 87
    empty                          shift and go to state 88

state 126

    (72) termB -> / . term
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 169
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    factor                         shift and go to state 87
    empty                          shift and go to state 88

state 127

    (71) term -> factor termB .

    -               reduce using rule 71 (term -> factor termB .)
    +               reduce using rule 71 (term -> factor termB .)
    &               reduce using rule 71 (term -> factor termB .)
    |               reduce using rule 71 (term -> factor termB .)
    ]               reduce using rule 71 (term -> factor termB .)
    ;               reduce using rule 71 (term -> factor termB .)
    ,               reduce using rule 71 (term -> factor termB .)
    )               reduce using rule 71 (term -> factor termB .)
    <               reduce using rule 71 (term -> factor termB .)
    >               reduce using rule 71 (term -> factor termB .)
    =               reduce using rule 71 (term -> factor termB .)


state 128

    (74) termB -> empty .

    -               reduce using rule 74 (termB -> empty .)
    +               reduce using rule 74 (termB -> empty .)
    <               reduce using rule 74 (termB -> empty .)
    >               reduce using rule 74 (termB -> empty .)
    =               reduce using rule 74 (termB -> empty .)
    &               reduce using rule 74 (termB -> empty .)
    |               reduce using rule 74 (termB -> empty .)
    ]               reduce using rule 74 (termB -> empty .)
    ;               reduce using rule 74 (termB -> empty .)
    ,               reduce using rule 74 (termB -> empty .)
    )               reduce using rule 74 (termB -> empty .)


state 129

    (115) dimensions -> [ superexpression ] . dimensionsB
    (116) dimensionsB -> . [ superexpression ]
    (117) dimensionsB -> . empty
    (122) empty -> .

    [               shift and go to state 171
    =               reduce using rule 122 (empty -> .)
    ,               reduce using rule 122 (empty -> .)
    ;               reduce using rule 122 (empty -> .)
    /               reduce using rule 122 (empty -> .)
    *               reduce using rule 122 (empty -> .)
    -               reduce using rule 122 (empty -> .)
    +               reduce using rule 122 (empty -> .)
    <               reduce using rule 122 (empty -> .)
    >               reduce using rule 122 (empty -> .)
    &               reduce using rule 122 (empty -> .)
    |               reduce using rule 122 (empty -> .)
    ]               reduce using rule 122 (empty -> .)
    )               reduce using rule 122 (empty -> .)

    dimensionsB                    shift and go to state 170
    empty                          shift and go to state 172

state 130

    (110) funccall -> ID ( . funccallB
    (111) funccallB -> . superexpression funccallC
    (112) funccallB -> . )
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    )               shift and go to state 156
    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    funccallB                      shift and go to state 173
    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 157
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 131

    (78) factor -> ID dimensionsOpt .

    /               reduce using rule 78 (factor -> ID dimensionsOpt .)
    *               reduce using rule 78 (factor -> ID dimensionsOpt .)
    -               reduce using rule 78 (factor -> ID dimensionsOpt .)
    +               reduce using rule 78 (factor -> ID dimensionsOpt .)
    <               reduce using rule 78 (factor -> ID dimensionsOpt .)
    >               reduce using rule 78 (factor -> ID dimensionsOpt .)
    =               reduce using rule 78 (factor -> ID dimensionsOpt .)
    &               reduce using rule 78 (factor -> ID dimensionsOpt .)
    |               reduce using rule 78 (factor -> ID dimensionsOpt .)
    )               reduce using rule 78 (factor -> ID dimensionsOpt .)
    ]               reduce using rule 78 (factor -> ID dimensionsOpt .)
    ;               reduce using rule 78 (factor -> ID dimensionsOpt .)
    ,               reduce using rule 78 (factor -> ID dimensionsOpt .)


state 132

    (69) expB -> + . exp
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    exp                            shift and go to state 174
    factor                         shift and go to state 87
    empty                          shift and go to state 88

state 133

    (68) expB -> - . exp
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    exp                            shift and go to state 175
    factor                         shift and go to state 87
    empty                          shift and go to state 88

state 134

    (67) exp -> term expB .

    <               reduce using rule 67 (exp -> term expB .)
    >               reduce using rule 67 (exp -> term expB .)
    =               reduce using rule 67 (exp -> term expB .)
    &               reduce using rule 67 (exp -> term expB .)
    |               reduce using rule 67 (exp -> term expB .)
    )               reduce using rule 67 (exp -> term expB .)
    ,               reduce using rule 67 (exp -> term expB .)
    ]               reduce using rule 67 (exp -> term expB .)
    ;               reduce using rule 67 (exp -> term expB .)


state 135

    (70) expB -> empty .

    <               reduce using rule 70 (expB -> empty .)
    >               reduce using rule 70 (expB -> empty .)
    =               reduce using rule 70 (expB -> empty .)
    &               reduce using rule 70 (expB -> empty .)
    |               reduce using rule 70 (expB -> empty .)
    ]               reduce using rule 70 (expB -> empty .)
    ;               reduce using rule 70 (expB -> empty .)
    ,               reduce using rule 70 (expB -> empty .)
    )               reduce using rule 70 (expB -> empty .)


state 136

    (59) expression -> exp expressionB .

    &               reduce using rule 59 (expression -> exp expressionB .)
    |               reduce using rule 59 (expression -> exp expressionB .)
    ;               reduce using rule 59 (expression -> exp expressionB .)
    )               reduce using rule 59 (expression -> exp expressionB .)
    ,               reduce using rule 59 (expression -> exp expressionB .)
    ]               reduce using rule 59 (expression -> exp expressionB .)


state 137

    (63) expressionB -> = . = exp

    =               shift and go to state 176


state 138

    (60) expressionB -> < . exp
    (62) expressionB -> < . > exp
    (64) expressionB -> < . = exp
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    >               shift and go to state 179
    =               shift and go to state 178
    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    exp                            shift and go to state 177
    factor                         shift and go to state 87
    empty                          shift and go to state 88

state 139

    (66) expressionB -> empty .

    &               reduce using rule 66 (expressionB -> empty .)
    |               reduce using rule 66 (expressionB -> empty .)
    ]               reduce using rule 66 (expressionB -> empty .)
    ;               reduce using rule 66 (expressionB -> empty .)
    ,               reduce using rule 66 (expressionB -> empty .)
    )               reduce using rule 66 (expressionB -> empty .)


state 140

    (61) expressionB -> > . exp
    (65) expressionB -> > . = exp
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    =               shift and go to state 181
    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    exp                            shift and go to state 180
    factor                         shift and go to state 87
    empty                          shift and go to state 88

state 141

    (56) superexpressionB -> & . & superexpression

    &               shift and go to state 182


state 142

    (55) superexpression -> expression superexpressionB .

    ,               reduce using rule 55 (superexpression -> expression superexpressionB .)
    )               reduce using rule 55 (superexpression -> expression superexpressionB .)
    ;               reduce using rule 55 (superexpression -> expression superexpressionB .)
    ]               reduce using rule 55 (superexpression -> expression superexpressionB .)


state 143

    (57) superexpressionB -> | . | superexpression

    |               shift and go to state 183


state 144

    (58) superexpressionB -> empty .

    ]               reduce using rule 58 (superexpressionB -> empty .)
    ;               reduce using rule 58 (superexpressionB -> empty .)
    ,               reduce using rule 58 (superexpressionB -> empty .)
    )               reduce using rule 58 (superexpressionB -> empty .)


state 145

    (25) main -> MAIN ( ) block .

    DEF             reduce using rule 25 (main -> MAIN ( ) block .)
    $end            reduce using rule 25 (main -> MAIN ( ) block .)


state 146

    (87) whileloop -> WHILE ( superexpression . ) block

    )               shift and go to state 184


state 147

    (99) outputB -> SCONST . outputC
    (101) outputC -> . )
    (102) outputC -> . , outputB

    )               shift and go to state 185
    ,               shift and go to state 187

    outputC                        shift and go to state 186

state 148

    (100) outputB -> superexpression . outputC
    (101) outputC -> . )
    (102) outputC -> . , outputB

    )               shift and go to state 185
    ,               shift and go to state 187

    outputC                        shift and go to state 188

state 149

    (98) output -> PRINT ( outputB .

    ;               reduce using rule 98 (output -> PRINT ( outputB .)


state 150

    (106) localmsgdirective -> # SHOW SCONST .

    ID              reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    PRINT           reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    RETURN          reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    INPUT           reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    IF              reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    WHILE           reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    FOR             reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    INT             reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    FLOAT           reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    STRING          reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    BOOL            reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    #               reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    TRACKDECISION   reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    FORGETDECISION  reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)
    }               reduce using rule 106 (localmsgdirective -> # SHOW SCONST .)


state 151

    (103) localvardirective -> # localvardirectiveB ID .

    ID              reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    PRINT           reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    RETURN          reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    INPUT           reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    IF              reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    WHILE           reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    FOR             reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    INT             reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    FLOAT           reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    STRING          reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    BOOL            reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    #               reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    TRACKDECISION   reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    FORGETDECISION  reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)
    }               reduce using rule 103 (localvardirective -> # localvardirectiveB ID .)


state 152

    (33) assign -> ID . dimensionsOpt = superexpression
    (35) dimensionsOpt -> . dimensions
    (36) dimensionsOpt -> . empty
    (115) dimensions -> . [ superexpression ] dimensionsB
    (122) empty -> .

    [               shift and go to state 48
    =               reduce using rule 122 (empty -> .)

    dimensionsOpt                  shift and go to state 189
    dimensions                     shift and go to state 47
    empty                          shift and go to state 49

state 153

    (94) forloop -> FOR ( assign . ; superexpression ; superexpression ) block

    ;               shift and go to state 190


state 154

    (95) input -> INPUT ( ID . inputB )
    (96) inputB -> . , ID inputB
    (97) inputB -> . empty
    (122) empty -> .

    ,               shift and go to state 191
    )               reduce using rule 122 (empty -> .)

    inputB                         shift and go to state 192
    empty                          shift and go to state 193

state 155

    (50) assignfunccallB -> ( funccallB .

    ;               reduce using rule 50 (assignfunccallB -> ( funccallB .)


state 156

    (112) funccallB -> ) .

    /               reduce using rule 112 (funccallB -> ) .)
    *               reduce using rule 112 (funccallB -> ) .)
    -               reduce using rule 112 (funccallB -> ) .)
    +               reduce using rule 112 (funccallB -> ) .)
    <               reduce using rule 112 (funccallB -> ) .)
    >               reduce using rule 112 (funccallB -> ) .)
    =               reduce using rule 112 (funccallB -> ) .)
    &               reduce using rule 112 (funccallB -> ) .)
    |               reduce using rule 112 (funccallB -> ) .)
    ]               reduce using rule 112 (funccallB -> ) .)
    ;               reduce using rule 112 (funccallB -> ) .)
    ,               reduce using rule 112 (funccallB -> ) .)
    )               reduce using rule 112 (funccallB -> ) .)


state 157

    (111) funccallB -> superexpression . funccallC
    (113) funccallC -> . , superexpression funccallC
    (114) funccallC -> . )

    ,               shift and go to state 196
    )               shift and go to state 195

    funccallC                      shift and go to state 194

state 158

    (34) assignB -> dimensionsOpt = . superexpression
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 197
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 159

    (37) condition -> IF ( superexpression . ) block else

    )               shift and go to state 198


state 160

    (27) func -> DEF returntype ID ( paramsOpt . )

    )               shift and go to state 199


state 161

    (28) paramsOpt -> params .

    )               reduce using rule 28 (paramsOpt -> params .)


state 162

    (29) paramsOpt -> empty .

    )               reduce using rule 29 (paramsOpt -> empty .)


state 163

    (119) params -> type . ID paramsB

    ID              shift and go to state 200


state 164

    (23) declarationD -> , . declarationB
    (19) declarationB -> . ID dimensionsOpt declarationC

    ID              shift and go to state 36

    declarationB                   shift and go to state 201

state 165

    (20) declarationC -> = superexpression declarationD .

    INT             reduce using rule 20 (declarationC -> = superexpression declarationD .)
    FLOAT           reduce using rule 20 (declarationC -> = superexpression declarationD .)
    STRING          reduce using rule 20 (declarationC -> = superexpression declarationD .)
    BOOL            reduce using rule 20 (declarationC -> = superexpression declarationD .)
    DEF             reduce using rule 20 (declarationC -> = superexpression declarationD .)
    MAIN            reduce using rule 20 (declarationC -> = superexpression declarationD .)
    ID              reduce using rule 20 (declarationC -> = superexpression declarationD .)
    PRINT           reduce using rule 20 (declarationC -> = superexpression declarationD .)
    RETURN          reduce using rule 20 (declarationC -> = superexpression declarationD .)
    INPUT           reduce using rule 20 (declarationC -> = superexpression declarationD .)
    IF              reduce using rule 20 (declarationC -> = superexpression declarationD .)
    WHILE           reduce using rule 20 (declarationC -> = superexpression declarationD .)
    FOR             reduce using rule 20 (declarationC -> = superexpression declarationD .)
    #               reduce using rule 20 (declarationC -> = superexpression declarationD .)
    TRACKDECISION   reduce using rule 20 (declarationC -> = superexpression declarationD .)
    FORGETDECISION  reduce using rule 20 (declarationC -> = superexpression declarationD .)
    }               reduce using rule 20 (declarationC -> = superexpression declarationD .)


state 166

    (24) declarationD -> ; .

    INT             reduce using rule 24 (declarationD -> ; .)
    FLOAT           reduce using rule 24 (declarationD -> ; .)
    STRING          reduce using rule 24 (declarationD -> ; .)
    BOOL            reduce using rule 24 (declarationD -> ; .)
    DEF             reduce using rule 24 (declarationD -> ; .)
    MAIN            reduce using rule 24 (declarationD -> ; .)
    ID              reduce using rule 24 (declarationD -> ; .)
    PRINT           reduce using rule 24 (declarationD -> ; .)
    RETURN          reduce using rule 24 (declarationD -> ; .)
    INPUT           reduce using rule 24 (declarationD -> ; .)
    IF              reduce using rule 24 (declarationD -> ; .)
    WHILE           reduce using rule 24 (declarationD -> ; .)
    FOR             reduce using rule 24 (declarationD -> ; .)
    #               reduce using rule 24 (declarationD -> ; .)
    TRACKDECISION   reduce using rule 24 (declarationD -> ; .)
    FORGETDECISION  reduce using rule 24 (declarationD -> ; .)
    }               reduce using rule 24 (declarationD -> ; .)


state 167

    (76) factor -> ( superexpression ) .

    /               reduce using rule 76 (factor -> ( superexpression ) .)
    *               reduce using rule 76 (factor -> ( superexpression ) .)
    -               reduce using rule 76 (factor -> ( superexpression ) .)
    +               reduce using rule 76 (factor -> ( superexpression ) .)
    <               reduce using rule 76 (factor -> ( superexpression ) .)
    >               reduce using rule 76 (factor -> ( superexpression ) .)
    =               reduce using rule 76 (factor -> ( superexpression ) .)
    &               reduce using rule 76 (factor -> ( superexpression ) .)
    |               reduce using rule 76 (factor -> ( superexpression ) .)
    )               reduce using rule 76 (factor -> ( superexpression ) .)
    ]               reduce using rule 76 (factor -> ( superexpression ) .)
    ;               reduce using rule 76 (factor -> ( superexpression ) .)
    ,               reduce using rule 76 (factor -> ( superexpression ) .)


state 168

    (73) termB -> * term .

    -               reduce using rule 73 (termB -> * term .)
    +               reduce using rule 73 (termB -> * term .)
    <               reduce using rule 73 (termB -> * term .)
    >               reduce using rule 73 (termB -> * term .)
    =               reduce using rule 73 (termB -> * term .)
    &               reduce using rule 73 (termB -> * term .)
    |               reduce using rule 73 (termB -> * term .)
    ]               reduce using rule 73 (termB -> * term .)
    ;               reduce using rule 73 (termB -> * term .)
    ,               reduce using rule 73 (termB -> * term .)
    )               reduce using rule 73 (termB -> * term .)


state 169

    (72) termB -> / term .

    -               reduce using rule 72 (termB -> / term .)
    +               reduce using rule 72 (termB -> / term .)
    <               reduce using rule 72 (termB -> / term .)
    >               reduce using rule 72 (termB -> / term .)
    =               reduce using rule 72 (termB -> / term .)
    &               reduce using rule 72 (termB -> / term .)
    |               reduce using rule 72 (termB -> / term .)
    ]               reduce using rule 72 (termB -> / term .)
    ;               reduce using rule 72 (termB -> / term .)
    ,               reduce using rule 72 (termB -> / term .)
    )               reduce using rule 72 (termB -> / term .)


state 170

    (115) dimensions -> [ superexpression ] dimensionsB .

    =               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    ,               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    ;               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    /               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    *               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    -               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    +               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    <               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    >               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    &               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    |               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    ]               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)
    )               reduce using rule 115 (dimensions -> [ superexpression ] dimensionsB .)


state 171

    (116) dimensionsB -> [ . superexpression ]
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 202
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 172

    (117) dimensionsB -> empty .

    =               reduce using rule 117 (dimensionsB -> empty .)
    ,               reduce using rule 117 (dimensionsB -> empty .)
    ;               reduce using rule 117 (dimensionsB -> empty .)
    /               reduce using rule 117 (dimensionsB -> empty .)
    *               reduce using rule 117 (dimensionsB -> empty .)
    -               reduce using rule 117 (dimensionsB -> empty .)
    +               reduce using rule 117 (dimensionsB -> empty .)
    <               reduce using rule 117 (dimensionsB -> empty .)
    >               reduce using rule 117 (dimensionsB -> empty .)
    &               reduce using rule 117 (dimensionsB -> empty .)
    |               reduce using rule 117 (dimensionsB -> empty .)
    ]               reduce using rule 117 (dimensionsB -> empty .)
    )               reduce using rule 117 (dimensionsB -> empty .)


state 173

    (110) funccall -> ID ( funccallB .

    /               reduce using rule 110 (funccall -> ID ( funccallB .)
    *               reduce using rule 110 (funccall -> ID ( funccallB .)
    -               reduce using rule 110 (funccall -> ID ( funccallB .)
    +               reduce using rule 110 (funccall -> ID ( funccallB .)
    <               reduce using rule 110 (funccall -> ID ( funccallB .)
    >               reduce using rule 110 (funccall -> ID ( funccallB .)
    =               reduce using rule 110 (funccall -> ID ( funccallB .)
    &               reduce using rule 110 (funccall -> ID ( funccallB .)
    |               reduce using rule 110 (funccall -> ID ( funccallB .)
    ,               reduce using rule 110 (funccall -> ID ( funccallB .)
    )               reduce using rule 110 (funccall -> ID ( funccallB .)
    ]               reduce using rule 110 (funccall -> ID ( funccallB .)
    ;               reduce using rule 110 (funccall -> ID ( funccallB .)


state 174

    (69) expB -> + exp .

    <               reduce using rule 69 (expB -> + exp .)
    >               reduce using rule 69 (expB -> + exp .)
    =               reduce using rule 69 (expB -> + exp .)
    &               reduce using rule 69 (expB -> + exp .)
    |               reduce using rule 69 (expB -> + exp .)
    ]               reduce using rule 69 (expB -> + exp .)
    ;               reduce using rule 69 (expB -> + exp .)
    ,               reduce using rule 69 (expB -> + exp .)
    )               reduce using rule 69 (expB -> + exp .)


state 175

    (68) expB -> - exp .

    <               reduce using rule 68 (expB -> - exp .)
    >               reduce using rule 68 (expB -> - exp .)
    =               reduce using rule 68 (expB -> - exp .)
    &               reduce using rule 68 (expB -> - exp .)
    |               reduce using rule 68 (expB -> - exp .)
    ]               reduce using rule 68 (expB -> - exp .)
    ;               reduce using rule 68 (expB -> - exp .)
    ,               reduce using rule 68 (expB -> - exp .)
    )               reduce using rule 68 (expB -> - exp .)


state 176

    (63) expressionB -> = = . exp
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    exp                            shift and go to state 203
    factor                         shift and go to state 87
    empty                          shift and go to state 88

state 177

    (60) expressionB -> < exp .

    &               reduce using rule 60 (expressionB -> < exp .)
    |               reduce using rule 60 (expressionB -> < exp .)
    ]               reduce using rule 60 (expressionB -> < exp .)
    ;               reduce using rule 60 (expressionB -> < exp .)
    ,               reduce using rule 60 (expressionB -> < exp .)
    )               reduce using rule 60 (expressionB -> < exp .)


state 178

    (64) expressionB -> < = . exp
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    exp                            shift and go to state 204
    factor                         shift and go to state 87
    empty                          shift and go to state 88

state 179

    (62) expressionB -> < > . exp
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    exp                            shift and go to state 205
    factor                         shift and go to state 87
    empty                          shift and go to state 88

state 180

    (61) expressionB -> > exp .

    &               reduce using rule 61 (expressionB -> > exp .)
    |               reduce using rule 61 (expressionB -> > exp .)
    ]               reduce using rule 61 (expressionB -> > exp .)
    ;               reduce using rule 61 (expressionB -> > exp .)
    ,               reduce using rule 61 (expressionB -> > exp .)
    )               reduce using rule 61 (expressionB -> > exp .)


state 181

    (65) expressionB -> > = . exp
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    exp                            shift and go to state 206
    factor                         shift and go to state 87
    empty                          shift and go to state 88

state 182

    (56) superexpressionB -> & & . superexpression
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 207
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 183

    (57) superexpressionB -> | | . superexpression
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 208
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 184

    (87) whileloop -> WHILE ( superexpression ) . block
    (30) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 209

state 185

    (101) outputC -> ) .

    ;               reduce using rule 101 (outputC -> ) .)


state 186

    (99) outputB -> SCONST outputC .

    ;               reduce using rule 99 (outputB -> SCONST outputC .)


state 187

    (102) outputC -> , . outputB
    (99) outputB -> . SCONST outputC
    (100) outputB -> . superexpression outputC
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    SCONST          shift and go to state 147
    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    factor                         shift and go to state 87
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 148
    exp                            shift and go to state 93
    outputB                        shift and go to state 210
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 188

    (100) outputB -> superexpression outputC .

    ;               reduce using rule 100 (outputB -> superexpression outputC .)


state 189

    (33) assign -> ID dimensionsOpt . = superexpression

    =               shift and go to state 211


state 190

    (94) forloop -> FOR ( assign ; . superexpression ; superexpression ) block
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 212
    empty                          shift and go to state 88
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94

state 191

    (96) inputB -> , . ID inputB

    ID              shift and go to state 213


state 192

    (95) input -> INPUT ( ID inputB . )

    )               shift and go to state 214


state 193

    (97) inputB -> empty .

    )               reduce using rule 97 (inputB -> empty .)


state 194

    (111) funccallB -> superexpression funccallC .

    /               reduce using rule 111 (funccallB -> superexpression funccallC .)
    *               reduce using rule 111 (funccallB -> superexpression funccallC .)
    -               reduce using rule 111 (funccallB -> superexpression funccallC .)
    +               reduce using rule 111 (funccallB -> superexpression funccallC .)
    <               reduce using rule 111 (funccallB -> superexpression funccallC .)
    >               reduce using rule 111 (funccallB -> superexpression funccallC .)
    =               reduce using rule 111 (funccallB -> superexpression funccallC .)
    &               reduce using rule 111 (funccallB -> superexpression funccallC .)
    |               reduce using rule 111 (funccallB -> superexpression funccallC .)
    ]               reduce using rule 111 (funccallB -> superexpression funccallC .)
    ;               reduce using rule 111 (funccallB -> superexpression funccallC .)
    ,               reduce using rule 111 (funccallB -> superexpression funccallC .)
    )               reduce using rule 111 (funccallB -> superexpression funccallC .)


state 195

    (114) funccallC -> ) .

    ;               reduce using rule 114 (funccallC -> ) .)
    /               reduce using rule 114 (funccallC -> ) .)
    *               reduce using rule 114 (funccallC -> ) .)
    -               reduce using rule 114 (funccallC -> ) .)
    +               reduce using rule 114 (funccallC -> ) .)
    <               reduce using rule 114 (funccallC -> ) .)
    >               reduce using rule 114 (funccallC -> ) .)
    =               reduce using rule 114 (funccallC -> ) .)
    &               reduce using rule 114 (funccallC -> ) .)
    |               reduce using rule 114 (funccallC -> ) .)
    ]               reduce using rule 114 (funccallC -> ) .)
    ,               reduce using rule 114 (funccallC -> ) .)
    )               reduce using rule 114 (funccallC -> ) .)


state 196

    (113) funccallC -> , . superexpression funccallC
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 215
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 197

    (34) assignB -> dimensionsOpt = superexpression .

    ;               reduce using rule 34 (assignB -> dimensionsOpt = superexpression .)


state 198

    (37) condition -> IF ( superexpression ) . block else
    (30) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 216

state 199

    (27) func -> DEF returntype ID ( paramsOpt ) .

    {               reduce using rule 27 (func -> DEF returntype ID ( paramsOpt ) .)


state 200

    (119) params -> type ID . paramsB
    (120) paramsB -> . , type ID paramsB
    (121) paramsB -> . empty
    (122) empty -> .

    ,               shift and go to state 219
    )               reduce using rule 122 (empty -> .)

    paramsB                        shift and go to state 217
    empty                          shift and go to state 218

state 201

    (23) declarationD -> , declarationB .

    INT             reduce using rule 23 (declarationD -> , declarationB .)
    FLOAT           reduce using rule 23 (declarationD -> , declarationB .)
    STRING          reduce using rule 23 (declarationD -> , declarationB .)
    BOOL            reduce using rule 23 (declarationD -> , declarationB .)
    DEF             reduce using rule 23 (declarationD -> , declarationB .)
    MAIN            reduce using rule 23 (declarationD -> , declarationB .)
    ID              reduce using rule 23 (declarationD -> , declarationB .)
    PRINT           reduce using rule 23 (declarationD -> , declarationB .)
    RETURN          reduce using rule 23 (declarationD -> , declarationB .)
    INPUT           reduce using rule 23 (declarationD -> , declarationB .)
    IF              reduce using rule 23 (declarationD -> , declarationB .)
    WHILE           reduce using rule 23 (declarationD -> , declarationB .)
    FOR             reduce using rule 23 (declarationD -> , declarationB .)
    #               reduce using rule 23 (declarationD -> , declarationB .)
    TRACKDECISION   reduce using rule 23 (declarationD -> , declarationB .)
    FORGETDECISION  reduce using rule 23 (declarationD -> , declarationB .)
    }               reduce using rule 23 (declarationD -> , declarationB .)


state 202

    (116) dimensionsB -> [ superexpression . ]

    ]               shift and go to state 220


state 203

    (63) expressionB -> = = exp .

    &               reduce using rule 63 (expressionB -> = = exp .)
    |               reduce using rule 63 (expressionB -> = = exp .)
    ]               reduce using rule 63 (expressionB -> = = exp .)
    ;               reduce using rule 63 (expressionB -> = = exp .)
    ,               reduce using rule 63 (expressionB -> = = exp .)
    )               reduce using rule 63 (expressionB -> = = exp .)


state 204

    (64) expressionB -> < = exp .

    &               reduce using rule 64 (expressionB -> < = exp .)
    |               reduce using rule 64 (expressionB -> < = exp .)
    ]               reduce using rule 64 (expressionB -> < = exp .)
    ;               reduce using rule 64 (expressionB -> < = exp .)
    ,               reduce using rule 64 (expressionB -> < = exp .)
    )               reduce using rule 64 (expressionB -> < = exp .)


state 205

    (62) expressionB -> < > exp .

    &               reduce using rule 62 (expressionB -> < > exp .)
    |               reduce using rule 62 (expressionB -> < > exp .)
    ]               reduce using rule 62 (expressionB -> < > exp .)
    ;               reduce using rule 62 (expressionB -> < > exp .)
    ,               reduce using rule 62 (expressionB -> < > exp .)
    )               reduce using rule 62 (expressionB -> < > exp .)


state 206

    (65) expressionB -> > = exp .

    &               reduce using rule 65 (expressionB -> > = exp .)
    |               reduce using rule 65 (expressionB -> > = exp .)
    ]               reduce using rule 65 (expressionB -> > = exp .)
    ;               reduce using rule 65 (expressionB -> > = exp .)
    ,               reduce using rule 65 (expressionB -> > = exp .)
    )               reduce using rule 65 (expressionB -> > = exp .)


state 207

    (56) superexpressionB -> & & superexpression .

    ]               reduce using rule 56 (superexpressionB -> & & superexpression .)
    ;               reduce using rule 56 (superexpressionB -> & & superexpression .)
    ,               reduce using rule 56 (superexpressionB -> & & superexpression .)
    )               reduce using rule 56 (superexpressionB -> & & superexpression .)


state 208

    (57) superexpressionB -> | | superexpression .

    ]               reduce using rule 57 (superexpressionB -> | | superexpression .)
    ;               reduce using rule 57 (superexpressionB -> | | superexpression .)
    ,               reduce using rule 57 (superexpressionB -> | | superexpression .)
    )               reduce using rule 57 (superexpressionB -> | | superexpression .)


state 209

    (87) whileloop -> WHILE ( superexpression ) block .

    ID              reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    PRINT           reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    RETURN          reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    INPUT           reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    IF              reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    WHILE           reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    FOR             reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    INT             reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    FLOAT           reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    STRING          reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    BOOL            reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    #               reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    TRACKDECISION   reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    FORGETDECISION  reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)
    }               reduce using rule 87 (whileloop -> WHILE ( superexpression ) block .)


state 210

    (102) outputC -> , outputB .

    ;               reduce using rule 102 (outputC -> , outputB .)


state 211

    (33) assign -> ID dimensionsOpt = . superexpression
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 221
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94
    empty                          shift and go to state 88

state 212

    (94) forloop -> FOR ( assign ; superexpression . ; superexpression ) block

    ;               shift and go to state 222


state 213

    (96) inputB -> , ID . inputB
    (96) inputB -> . , ID inputB
    (97) inputB -> . empty
    (122) empty -> .

    ,               shift and go to state 191
    )               reduce using rule 122 (empty -> .)

    inputB                         shift and go to state 223
    empty                          shift and go to state 193

state 214

    (95) input -> INPUT ( ID inputB ) .

    ;               reduce using rule 95 (input -> INPUT ( ID inputB ) .)


state 215

    (113) funccallC -> , superexpression . funccallC
    (113) funccallC -> . , superexpression funccallC
    (114) funccallC -> . )

    ,               shift and go to state 196
    )               shift and go to state 195

    funccallC                      shift and go to state 224

state 216

    (37) condition -> IF ( superexpression ) block . else
    (38) else -> . ELSE block
    (39) else -> . empty
    (122) empty -> .

    ELSE            shift and go to state 227
    ID              reduce using rule 122 (empty -> .)
    PRINT           reduce using rule 122 (empty -> .)
    RETURN          reduce using rule 122 (empty -> .)
    INPUT           reduce using rule 122 (empty -> .)
    IF              reduce using rule 122 (empty -> .)
    WHILE           reduce using rule 122 (empty -> .)
    FOR             reduce using rule 122 (empty -> .)
    INT             reduce using rule 122 (empty -> .)
    FLOAT           reduce using rule 122 (empty -> .)
    STRING          reduce using rule 122 (empty -> .)
    BOOL            reduce using rule 122 (empty -> .)
    #               reduce using rule 122 (empty -> .)
    TRACKDECISION   reduce using rule 122 (empty -> .)
    FORGETDECISION  reduce using rule 122 (empty -> .)
    }               reduce using rule 122 (empty -> .)

    empty                          shift and go to state 226
    else                           shift and go to state 225

state 217

    (119) params -> type ID paramsB .

    )               reduce using rule 119 (params -> type ID paramsB .)


state 218

    (121) paramsB -> empty .

    )               reduce using rule 121 (paramsB -> empty .)


state 219

    (120) paramsB -> , . type ID paramsB
    (88) type -> . INT
    (89) type -> . FLOAT
    (90) type -> . STRING
    (91) type -> . BOOL

    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    type                           shift and go to state 228

state 220

    (116) dimensionsB -> [ superexpression ] .

    =               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    ,               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    ;               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    /               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    *               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    -               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    +               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    <               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    >               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    &               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    |               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    ]               reduce using rule 116 (dimensionsB -> [ superexpression ] .)
    )               reduce using rule 116 (dimensionsB -> [ superexpression ] .)


state 221

    (33) assign -> ID dimensionsOpt = superexpression .

    ;               reduce using rule 33 (assign -> ID dimensionsOpt = superexpression .)


state 222

    (94) forloop -> FOR ( assign ; superexpression ; . superexpression ) block
    (55) superexpression -> . expression superexpressionB
    (59) expression -> . exp expressionB
    (67) exp -> . term expB
    (71) term -> . factor termB
    (75) factor -> . signB constant
    (76) factor -> . ( superexpression )
    (77) factor -> . funccall
    (78) factor -> . ID dimensionsOpt
    (79) signB -> . sign
    (80) signB -> . empty
    (110) funccall -> . ID ( funccallB
    (85) sign -> . +
    (86) sign -> . -
    (122) empty -> .

    (               shift and go to state 84
    ID              shift and go to state 91
    +               shift and go to state 85
    -               shift and go to state 86
    FCONST          reduce using rule 122 (empty -> .)
    ICONST          reduce using rule 122 (empty -> .)
    TRUE            reduce using rule 122 (empty -> .)
    FALSE           reduce using rule 122 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 89
    signB                          shift and go to state 83
    sign                           shift and go to state 82
    superexpression                shift and go to state 229
    empty                          shift and go to state 88
    exp                            shift and go to state 93
    factor                         shift and go to state 87
    expression                     shift and go to state 94

state 223

    (96) inputB -> , ID inputB .

    )               reduce using rule 96 (inputB -> , ID inputB .)


state 224

    (113) funccallC -> , superexpression funccallC .

    ;               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    /               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    *               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    -               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    +               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    <               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    >               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    =               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    &               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    |               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    ]               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    ,               reduce using rule 113 (funccallC -> , superexpression funccallC .)
    )               reduce using rule 113 (funccallC -> , superexpression funccallC .)


state 225

    (37) condition -> IF ( superexpression ) block else .

    ID              reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    PRINT           reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    RETURN          reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    INPUT           reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    IF              reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    WHILE           reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    FOR             reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    INT             reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    FLOAT           reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    STRING          reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    BOOL            reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    #               reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    TRACKDECISION   reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    FORGETDECISION  reduce using rule 37 (condition -> IF ( superexpression ) block else .)
    }               reduce using rule 37 (condition -> IF ( superexpression ) block else .)


state 226

    (39) else -> empty .

    ID              reduce using rule 39 (else -> empty .)
    PRINT           reduce using rule 39 (else -> empty .)
    RETURN          reduce using rule 39 (else -> empty .)
    INPUT           reduce using rule 39 (else -> empty .)
    IF              reduce using rule 39 (else -> empty .)
    WHILE           reduce using rule 39 (else -> empty .)
    FOR             reduce using rule 39 (else -> empty .)
    INT             reduce using rule 39 (else -> empty .)
    FLOAT           reduce using rule 39 (else -> empty .)
    STRING          reduce using rule 39 (else -> empty .)
    BOOL            reduce using rule 39 (else -> empty .)
    #               reduce using rule 39 (else -> empty .)
    TRACKDECISION   reduce using rule 39 (else -> empty .)
    FORGETDECISION  reduce using rule 39 (else -> empty .)
    }               reduce using rule 39 (else -> empty .)


state 227

    (38) else -> ELSE . block
    (30) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 230

state 228

    (120) paramsB -> , type . ID paramsB

    ID              shift and go to state 231


state 229

    (94) forloop -> FOR ( assign ; superexpression ; superexpression . ) block

    )               shift and go to state 232


state 230

    (38) else -> ELSE block .

    ID              reduce using rule 38 (else -> ELSE block .)
    PRINT           reduce using rule 38 (else -> ELSE block .)
    RETURN          reduce using rule 38 (else -> ELSE block .)
    INPUT           reduce using rule 38 (else -> ELSE block .)
    IF              reduce using rule 38 (else -> ELSE block .)
    WHILE           reduce using rule 38 (else -> ELSE block .)
    FOR             reduce using rule 38 (else -> ELSE block .)
    INT             reduce using rule 38 (else -> ELSE block .)
    FLOAT           reduce using rule 38 (else -> ELSE block .)
    STRING          reduce using rule 38 (else -> ELSE block .)
    BOOL            reduce using rule 38 (else -> ELSE block .)
    #               reduce using rule 38 (else -> ELSE block .)
    TRACKDECISION   reduce using rule 38 (else -> ELSE block .)
    FORGETDECISION  reduce using rule 38 (else -> ELSE block .)
    }               reduce using rule 38 (else -> ELSE block .)


state 231

    (120) paramsB -> , type ID . paramsB
    (120) paramsB -> . , type ID paramsB
    (121) paramsB -> . empty
    (122) empty -> .

    ,               shift and go to state 219
    )               reduce using rule 122 (empty -> .)

    paramsB                        shift and go to state 233
    empty                          shift and go to state 218

state 232

    (94) forloop -> FOR ( assign ; superexpression ; superexpression ) . block
    (30) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 234

state 233

    (120) paramsB -> , type ID paramsB .

    )               reduce using rule 120 (paramsB -> , type ID paramsB .)


state 234

    (94) forloop -> FOR ( assign ; superexpression ; superexpression ) block .

    ID              reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    PRINT           reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    RETURN          reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    INPUT           reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    IF              reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    WHILE           reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    FOR             reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    INT             reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    FLOAT           reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    STRING          reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    BOOL            reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    #               reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    TRACKDECISION   reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    FORGETDECISION  reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    }               reduce using rule 94 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 41 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 41 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 41 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 41 resolved as shift
WARNING: shift/reduce conflict for FOR in state 41 resolved as shift
WARNING: shift/reduce conflict for INT in state 41 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 41 resolved as shift
WARNING: shift/reduce conflict for STRING in state 41 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 41 resolved as shift
WARNING: shift/reduce conflict for # in state 41 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 41 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 73 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 73 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 73 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 73 resolved as shift
WARNING: shift/reduce conflict for IF in state 73 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 73 resolved as shift
WARNING: shift/reduce conflict for FOR in state 73 resolved as shift
WARNING: shift/reduce conflict for INT in state 73 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 73 resolved as shift
WARNING: shift/reduce conflict for STRING in state 73 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 73 resolved as shift
WARNING: shift/reduce conflict for # in state 73 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 73 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 73 resolved as shift
WARNING: reduce/reduce conflict in state 61 resolved using rule (instructionsOpt -> empty)
WARNING: rejected rule (localdecisiondirective -> empty) in state 61
