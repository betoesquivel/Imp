Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> start_quadruple config body
Rule 2     start_quadruple -> <empty>
Rule 3     config -> configdirective config
Rule 4     config -> empty
Rule 5     configdirective -> VARSCONFIG = options
Rule 6     configdirective -> DECISIONSCONFIG = options
Rule 7     configdirective -> COMPLEXITYCONFIG = optionsyesno
Rule 8     options -> SOME
Rule 9     options -> ALL
Rule 10    options -> MOST
Rule 11    options -> NONE
Rule 12    optionsyesno -> YES
Rule 13    optionsyesno -> NO
Rule 14    body -> declarationsOpt funcsOpt main funcsOpt
Rule 15    funcsOpt -> suprafunc funcsOpt
Rule 16    funcsOpt -> empty
Rule 17    declarationsOpt -> declaration declarationsOpt
Rule 18    declarationsOpt -> empty
Rule 19    declaration -> type push_type declarationB declarationC
Rule 20    declarationB -> ID push_operand dimensionsOpt
Rule 21    push_operand -> <empty>
Rule 22    push_type -> <empty>
Rule 23    repush_type -> <empty>
Rule 24    push_operator -> <empty>
Rule 25    quadruple_assign -> <empty>
Rule 26    declarationC -> = push_operator hyperexpression quadruple_assign declarationD
Rule 27    declarationC -> , repush_type declarationB declarationC
Rule 28    declarationC -> ;
Rule 29    declarationD -> , repush_type declarationB declarationC
Rule 30    declarationD -> ;
Rule 31    main -> MAIN ( ) seen_main block
Rule 32    seen_main -> <empty>
Rule 33    suprafunc -> func block
Rule 34    func -> DEF returntype ID ( paramsOpt )
Rule 35    paramsOpt -> params paramsB
Rule 36    paramsOpt -> empty
Rule 37    block -> { instructionsOpt }
Rule 38    instructionsOpt -> instruction instructionsOpt
Rule 39    instructionsOpt -> empty
Rule 40    assign -> ID push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign
Rule 41    assignB -> dimensionsOpt = push_operator hyperexpression quadruple_assign
Rule 42    dimensionsOpt -> dimensions
Rule 43    dimensionsOpt -> empty
Rule 44    condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple
Rule 45    else -> ELSE elsecondition_quadruple block
Rule 46    else -> empty
Rule 47    condition_quadruple -> <empty>
Rule 48    elsecondition_quadruple -> <empty>
Rule 49    endcondition_quadruple -> <empty>
Rule 50    instruction -> assignfunccall ;
Rule 51    instruction -> output ;
Rule 52    instruction -> return ;
Rule 53    instruction -> read ;
Rule 54    instruction -> declaration
Rule 55    instruction -> condition
Rule 56    instruction -> whileloop
Rule 57    instruction -> forloop
Rule 58    instruction -> localdirective
Rule 59    assignfunccall -> ID seen_funccall push_operand assignfunccallB
Rule 60    seen_funccall -> <empty>
Rule 61    pop_operand -> <empty>
Rule 62    assignfunccallB -> ( pop_operand seen_a_funccall funccallB funccallC
Rule 63    assignfunccallB -> assignB
Rule 64    seen_a_funccall -> <empty>
Rule 65    localdirective -> localvardirective
Rule 66    localdirective -> localdecisiondirective
Rule 67    localdirective -> localmsgdirective
Rule 68    hyperexpression -> superexpression hyperexpressionB
Rule 69    hyperexpressionB -> OR push_operator hyperexpression
Rule 70    hyperexpressionB -> empty
Rule 71    superexpression -> expression superexpressionB
Rule 72    superexpressionB -> AND push_operator superexpression
Rule 73    superexpressionB -> empty
Rule 74    expression -> exp expressionB
Rule 75    expressionB -> < push_operator exp
Rule 76    expressionB -> > push_operator exp
Rule 77    expressionB -> DIFF push_operator exp
Rule 78    expressionB -> EQ push_operator exp
Rule 79    expressionB -> LTEQ push_operator exp
Rule 80    expressionB -> GTEQ push_operator exp
Rule 81    expressionB -> empty
Rule 82    exp -> term seen_term expB
Rule 83    seen_term -> <empty>
Rule 84    expB -> - push_operator exp
Rule 85    expB -> + push_operator exp
Rule 86    expB -> empty
Rule 87    term -> factor seen_factor termB
Rule 88    seen_factor -> <empty>
Rule 89    termB -> / push_operator term
Rule 90    termB -> * push_operator term
Rule 91    termB -> empty
Rule 92    factor -> signB constant
Rule 93    factor -> ( seen_parentheses hyperexpression )
Rule 94    factor -> funccall seen_factor_funccall
Rule 95    factor -> ID seen_ID dimensionsOpt
Rule 96    seen_factor_funccall -> <empty>
Rule 97    seen_parentheses -> <empty>
Rule 98    seen_ID -> <empty>
Rule 99    signB -> sign
Rule 100   signB -> empty
Rule 101   seen_fconst -> <empty>
Rule 102   seen_iconst -> <empty>
Rule 103   seen_sconst -> <empty>
Rule 104   seen_true -> <empty>
Rule 105   seen_false -> <empty>
Rule 106   constant -> FCONST seen_fconst
Rule 107   constant -> ICONST seen_iconst
Rule 108   constant -> SCONST seen_sconst
Rule 109   constant -> TRUE seen_true
Rule 110   constant -> FALSE seen_false
Rule 111   sign -> +
Rule 112   sign -> -
Rule 113   whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
Rule 114   init_while -> <empty>
Rule 115   while_quadruple -> <empty>
Rule 116   endwhile_quadruple -> <empty>
Rule 117   type -> INT
Rule 118   type -> FLOAT
Rule 119   type -> STRING
Rule 120   type -> BOOL
Rule 121   returntype -> VOID
Rule 122   returntype -> type
Rule 123   forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
Rule 124   for_quadruple -> <empty>
Rule 125   for_expression -> <empty>
Rule 126   endfor_quadruple -> <empty>
Rule 127   read -> READ ( validate_id push_operand read_quadruple readB )
Rule 128   validate_id -> ID
Rule 129   read_quadruple -> <empty>
Rule 130   readB -> , validate_id push_operand read_quadruple readB
Rule 131   readB -> empty
Rule 132   output -> PRINT ( outputB
Rule 133   outputB -> hyperexpression print_quadruple outputC
Rule 134   print_quadruple -> <empty>
Rule 135   outputC -> )
Rule 136   outputC -> , outputB
Rule 137   localvardirective -> # localvardirectiveB ID
Rule 138   localvardirectiveB -> TRACK
Rule 139   localvardirectiveB -> FORGET
Rule 140   localmsgdirective -> # SHOW SCONST
Rule 141   localdecisiondirective -> TRACKDECISION
Rule 142   localdecisiondirective -> FORGETDECISION
Rule 143   localdecisiondirective -> empty
Rule 144   funccall -> ID seen_a_factor_funccall ( funccallB funccallC
Rule 145   seen_a_factor_funccall -> <empty>
Rule 146   funccallB -> hyperexpression seen_param
Rule 147   funccallB -> empty
Rule 148   seen_param -> <empty>
Rule 149   funccallC -> , funccallB funccallC
Rule 150   funccallC -> )
Rule 151   dimensions -> [ hyperexpression ] dimensionsB
Rule 152   dimensionsB -> [ hyperexpression ]
Rule 153   dimensionsB -> empty
Rule 154   return -> RETURN hyperexpression return_quadruple
Rule 155   return_quadruple -> <empty>
Rule 156   params -> type ID
Rule 157   paramsB -> , params paramsB
Rule 158   paramsB -> empty
Rule 159   empty -> <empty>

Terminals, with rules where they appear

#                    : 137 140
(                    : 31 34 44 62 93 113 123 127 132 144
)                    : 31 34 44 93 113 123 127 135 150
*                    : 90
+                    : 85 111
,                    : 27 29 130 136 149 157
-                    : 84 112
/                    : 89
;                    : 28 30 50 51 52 53 123 123
<                    : 75
=                    : 5 6 7 26 40 41
>                    : 76
ALL                  : 9
AND                  : 72
BOOL                 : 120
COMPLEXITYCONFIG     : 7
DECISIONSCONFIG      : 6
DEF                  : 34
DIFF                 : 77
ELSE                 : 45
EQ                   : 78
FALSE                : 110
FCONST               : 106
FLOAT                : 118
FOR                  : 123
FORGET               : 139
FORGETDECISION       : 142
GTEQ                 : 80
ICONST               : 107
ID                   : 20 34 40 59 95 128 137 144 156
IF                   : 44
INT                  : 117
LTEQ                 : 79
MAIN                 : 31
MOST                 : 10
NO                   : 13
NONE                 : 11
OR                   : 69
PRINT                : 132
READ                 : 127
RETURN               : 154
SCONST               : 108 140
SHOW                 : 140
SOME                 : 8
STRING               : 119
TRACK                : 138
TRACKDECISION        : 141
TRUE                 : 109
VARSCONFIG           : 5
VOID                 : 121
WHILE                : 113
YES                  : 12
[                    : 151 152
]                    : 151 152
error                : 
{                    : 37
}                    : 37

Nonterminals, with rules where they appear

assign               : 123
assignB              : 63
assignfunccall       : 50
assignfunccallB      : 59
block                : 31 33 44 45 113 123
body                 : 1
condition            : 55
condition_quadruple  : 44
config               : 1 3
configdirective      : 3
constant             : 92
declaration          : 17 54
declarationB         : 19 27 29
declarationC         : 19 27 29
declarationD         : 26
declarationsOpt      : 14 17
dimensions           : 42
dimensionsB          : 151
dimensionsOpt        : 20 40 41 95
else                 : 44
elsecondition_quadruple : 45
empty                : 4 16 18 36 39 43 46 70 73 81 86 91 100 131 143 147 153 158
endcondition_quadruple : 44
endfor_quadruple     : 123
endwhile_quadruple   : 113
exp                  : 74 75 76 77 78 79 80 84 85
expB                 : 82
expression           : 71
expressionB          : 74
factor               : 87
for_expression       : 123
for_quadruple        : 123
forloop              : 57
func                 : 33
funccall             : 94
funccallB            : 62 144 149
funccallC            : 62 144 149
funcsOpt             : 14 14 15
hyperexpression      : 26 40 41 44 69 93 113 123 123 133 146 151 152 154
hyperexpressionB     : 68
init_while           : 113 123
instruction          : 38
instructionsOpt      : 37 38
localdecisiondirective : 66
localdirective       : 58
localmsgdirective    : 67
localvardirective    : 65
localvardirectiveB   : 137
main                 : 14
options              : 5 6
optionsyesno         : 7
output               : 51
outputB              : 132 136
outputC              : 133
params               : 35 157
paramsB              : 35 157
paramsOpt            : 34
pop_operand          : 62
print_quadruple      : 133
program              : 0
push_operand         : 20 40 59 127 130
push_operator        : 26 40 41 69 72 75 76 77 78 79 80 84 85 89 90
push_type            : 19
quadruple_assign     : 26 40 41
read                 : 53
readB                : 127 130
read_quadruple       : 127 130
repush_type          : 27 29
return               : 52
return_quadruple     : 154
returntype           : 34
seen_ID              : 95
seen_a_factor_funccall : 144
seen_a_funccall      : 62
seen_factor          : 87
seen_factor_funccall : 94
seen_false           : 110
seen_fconst          : 106
seen_funccall        : 59
seen_iconst          : 107
seen_main            : 31
seen_param           : 146
seen_parentheses     : 93
seen_sconst          : 108
seen_term            : 82
seen_true            : 109
sign                 : 99
signB                : 92
start_quadruple      : 1
superexpression      : 68 72
superexpressionB     : 71
suprafunc            : 15
term                 : 82 89 90
termB                : 87
type                 : 19 122 156
validate_id          : 127 130
while_quadruple      : 113
whileloop            : 56

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . start_quadruple config body
    (2) start_quadruple -> .

    VARSCONFIG      reduce using rule 2 (start_quadruple -> .)
    DECISIONSCONFIG reduce using rule 2 (start_quadruple -> .)
    COMPLEXITYCONFIG reduce using rule 2 (start_quadruple -> .)
    INT             reduce using rule 2 (start_quadruple -> .)
    FLOAT           reduce using rule 2 (start_quadruple -> .)
    STRING          reduce using rule 2 (start_quadruple -> .)
    BOOL            reduce using rule 2 (start_quadruple -> .)
    DEF             reduce using rule 2 (start_quadruple -> .)
    MAIN            reduce using rule 2 (start_quadruple -> .)

    start_quadruple                shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> start_quadruple . config body
    (3) config -> . configdirective config
    (4) config -> . empty
    (5) configdirective -> . VARSCONFIG = options
    (6) configdirective -> . DECISIONSCONFIG = options
    (7) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (159) empty -> .

    VARSCONFIG      shift and go to state 4
    DECISIONSCONFIG shift and go to state 3
    COMPLEXITYCONFIG shift and go to state 6
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    DEF             reduce using rule 159 (empty -> .)
    MAIN            reduce using rule 159 (empty -> .)

    configdirective                shift and go to state 5
    config                         shift and go to state 7
    empty                          shift and go to state 8

state 2

    (0) S' -> program .



state 3

    (6) configdirective -> DECISIONSCONFIG . = options

    =               shift and go to state 9


state 4

    (5) configdirective -> VARSCONFIG . = options

    =               shift and go to state 10


state 5

    (3) config -> configdirective . config
    (3) config -> . configdirective config
    (4) config -> . empty
    (5) configdirective -> . VARSCONFIG = options
    (6) configdirective -> . DECISIONSCONFIG = options
    (7) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (159) empty -> .

    VARSCONFIG      shift and go to state 4
    DECISIONSCONFIG shift and go to state 3
    COMPLEXITYCONFIG shift and go to state 6
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    DEF             reduce using rule 159 (empty -> .)
    MAIN            reduce using rule 159 (empty -> .)

    config                         shift and go to state 11
    empty                          shift and go to state 8
    configdirective                shift and go to state 5

state 6

    (7) configdirective -> COMPLEXITYCONFIG . = optionsyesno

    =               shift and go to state 12


state 7

    (1) program -> start_quadruple config . body
    (14) body -> . declarationsOpt funcsOpt main funcsOpt
    (17) declarationsOpt -> . declaration declarationsOpt
    (18) declarationsOpt -> . empty
    (19) declaration -> . type push_type declarationB declarationC
    (159) empty -> .
    (117) type -> . INT
    (118) type -> . FLOAT
    (119) type -> . STRING
    (120) type -> . BOOL

    DEF             reduce using rule 159 (empty -> .)
    MAIN            reduce using rule 159 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 16
    BOOL            shift and go to state 19

    body                           shift and go to state 13
    declarationsOpt                shift and go to state 14
    type                           shift and go to state 15
    declaration                    shift and go to state 20
    empty                          shift and go to state 21

state 8

    (4) config -> empty .

    INT             reduce using rule 4 (config -> empty .)
    FLOAT           reduce using rule 4 (config -> empty .)
    STRING          reduce using rule 4 (config -> empty .)
    BOOL            reduce using rule 4 (config -> empty .)
    DEF             reduce using rule 4 (config -> empty .)
    MAIN            reduce using rule 4 (config -> empty .)


state 9

    (6) configdirective -> DECISIONSCONFIG = . options
    (8) options -> . SOME
    (9) options -> . ALL
    (10) options -> . MOST
    (11) options -> . NONE

    SOME            shift and go to state 23
    ALL             shift and go to state 22
    MOST            shift and go to state 25
    NONE            shift and go to state 24

    options                        shift and go to state 26

state 10

    (5) configdirective -> VARSCONFIG = . options
    (8) options -> . SOME
    (9) options -> . ALL
    (10) options -> . MOST
    (11) options -> . NONE

    SOME            shift and go to state 23
    ALL             shift and go to state 22
    MOST            shift and go to state 25
    NONE            shift and go to state 24

    options                        shift and go to state 27

state 11

    (3) config -> configdirective config .

    INT             reduce using rule 3 (config -> configdirective config .)
    FLOAT           reduce using rule 3 (config -> configdirective config .)
    STRING          reduce using rule 3 (config -> configdirective config .)
    BOOL            reduce using rule 3 (config -> configdirective config .)
    DEF             reduce using rule 3 (config -> configdirective config .)
    MAIN            reduce using rule 3 (config -> configdirective config .)


state 12

    (7) configdirective -> COMPLEXITYCONFIG = . optionsyesno
    (12) optionsyesno -> . YES
    (13) optionsyesno -> . NO

    YES             shift and go to state 28
    NO              shift and go to state 30

    optionsyesno                   shift and go to state 29

state 13

    (1) program -> start_quadruple config body .

    $end            reduce using rule 1 (program -> start_quadruple config body .)


state 14

    (14) body -> declarationsOpt . funcsOpt main funcsOpt
    (15) funcsOpt -> . suprafunc funcsOpt
    (16) funcsOpt -> . empty
    (33) suprafunc -> . func block
    (159) empty -> .
    (34) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 159 (empty -> .)
    DEF             shift and go to state 34

    suprafunc                      shift and go to state 31
    funcsOpt                       shift and go to state 32
    func                           shift and go to state 33
    empty                          shift and go to state 35

state 15

    (19) declaration -> type . push_type declarationB declarationC
    (22) push_type -> .

    ID              reduce using rule 22 (push_type -> .)

    push_type                      shift and go to state 36

state 16

    (119) type -> STRING .

    ID              reduce using rule 119 (type -> STRING .)


state 17

    (117) type -> INT .

    ID              reduce using rule 117 (type -> INT .)


state 18

    (118) type -> FLOAT .

    ID              reduce using rule 118 (type -> FLOAT .)


state 19

    (120) type -> BOOL .

    ID              reduce using rule 120 (type -> BOOL .)


state 20

    (17) declarationsOpt -> declaration . declarationsOpt
    (17) declarationsOpt -> . declaration declarationsOpt
    (18) declarationsOpt -> . empty
    (19) declaration -> . type push_type declarationB declarationC
    (159) empty -> .
    (117) type -> . INT
    (118) type -> . FLOAT
    (119) type -> . STRING
    (120) type -> . BOOL

    DEF             reduce using rule 159 (empty -> .)
    MAIN            reduce using rule 159 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 16
    BOOL            shift and go to state 19

    declarationsOpt                shift and go to state 37
    declaration                    shift and go to state 20
    type                           shift and go to state 15
    empty                          shift and go to state 21

state 21

    (18) declarationsOpt -> empty .

    DEF             reduce using rule 18 (declarationsOpt -> empty .)
    MAIN            reduce using rule 18 (declarationsOpt -> empty .)


state 22

    (9) options -> ALL .

    VARSCONFIG      reduce using rule 9 (options -> ALL .)
    DECISIONSCONFIG reduce using rule 9 (options -> ALL .)
    COMPLEXITYCONFIG reduce using rule 9 (options -> ALL .)
    INT             reduce using rule 9 (options -> ALL .)
    FLOAT           reduce using rule 9 (options -> ALL .)
    STRING          reduce using rule 9 (options -> ALL .)
    BOOL            reduce using rule 9 (options -> ALL .)
    DEF             reduce using rule 9 (options -> ALL .)
    MAIN            reduce using rule 9 (options -> ALL .)


state 23

    (8) options -> SOME .

    VARSCONFIG      reduce using rule 8 (options -> SOME .)
    DECISIONSCONFIG reduce using rule 8 (options -> SOME .)
    COMPLEXITYCONFIG reduce using rule 8 (options -> SOME .)
    INT             reduce using rule 8 (options -> SOME .)
    FLOAT           reduce using rule 8 (options -> SOME .)
    STRING          reduce using rule 8 (options -> SOME .)
    BOOL            reduce using rule 8 (options -> SOME .)
    DEF             reduce using rule 8 (options -> SOME .)
    MAIN            reduce using rule 8 (options -> SOME .)


state 24

    (11) options -> NONE .

    VARSCONFIG      reduce using rule 11 (options -> NONE .)
    DECISIONSCONFIG reduce using rule 11 (options -> NONE .)
    COMPLEXITYCONFIG reduce using rule 11 (options -> NONE .)
    INT             reduce using rule 11 (options -> NONE .)
    FLOAT           reduce using rule 11 (options -> NONE .)
    STRING          reduce using rule 11 (options -> NONE .)
    BOOL            reduce using rule 11 (options -> NONE .)
    DEF             reduce using rule 11 (options -> NONE .)
    MAIN            reduce using rule 11 (options -> NONE .)


state 25

    (10) options -> MOST .

    VARSCONFIG      reduce using rule 10 (options -> MOST .)
    DECISIONSCONFIG reduce using rule 10 (options -> MOST .)
    COMPLEXITYCONFIG reduce using rule 10 (options -> MOST .)
    INT             reduce using rule 10 (options -> MOST .)
    FLOAT           reduce using rule 10 (options -> MOST .)
    STRING          reduce using rule 10 (options -> MOST .)
    BOOL            reduce using rule 10 (options -> MOST .)
    DEF             reduce using rule 10 (options -> MOST .)
    MAIN            reduce using rule 10 (options -> MOST .)


state 26

    (6) configdirective -> DECISIONSCONFIG = options .

    VARSCONFIG      reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    INT             reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    FLOAT           reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    STRING          reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    BOOL            reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    DEF             reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)
    MAIN            reduce using rule 6 (configdirective -> DECISIONSCONFIG = options .)


state 27

    (5) configdirective -> VARSCONFIG = options .

    VARSCONFIG      reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    INT             reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    FLOAT           reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    STRING          reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    BOOL            reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    DEF             reduce using rule 5 (configdirective -> VARSCONFIG = options .)
    MAIN            reduce using rule 5 (configdirective -> VARSCONFIG = options .)


state 28

    (12) optionsyesno -> YES .

    VARSCONFIG      reduce using rule 12 (optionsyesno -> YES .)
    DECISIONSCONFIG reduce using rule 12 (optionsyesno -> YES .)
    COMPLEXITYCONFIG reduce using rule 12 (optionsyesno -> YES .)
    INT             reduce using rule 12 (optionsyesno -> YES .)
    FLOAT           reduce using rule 12 (optionsyesno -> YES .)
    STRING          reduce using rule 12 (optionsyesno -> YES .)
    BOOL            reduce using rule 12 (optionsyesno -> YES .)
    DEF             reduce using rule 12 (optionsyesno -> YES .)
    MAIN            reduce using rule 12 (optionsyesno -> YES .)


state 29

    (7) configdirective -> COMPLEXITYCONFIG = optionsyesno .

    VARSCONFIG      reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DECISIONSCONFIG reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    COMPLEXITYCONFIG reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    INT             reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    FLOAT           reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    STRING          reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    BOOL            reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DEF             reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    MAIN            reduce using rule 7 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)


state 30

    (13) optionsyesno -> NO .

    VARSCONFIG      reduce using rule 13 (optionsyesno -> NO .)
    DECISIONSCONFIG reduce using rule 13 (optionsyesno -> NO .)
    COMPLEXITYCONFIG reduce using rule 13 (optionsyesno -> NO .)
    INT             reduce using rule 13 (optionsyesno -> NO .)
    FLOAT           reduce using rule 13 (optionsyesno -> NO .)
    STRING          reduce using rule 13 (optionsyesno -> NO .)
    BOOL            reduce using rule 13 (optionsyesno -> NO .)
    DEF             reduce using rule 13 (optionsyesno -> NO .)
    MAIN            reduce using rule 13 (optionsyesno -> NO .)


state 31

    (15) funcsOpt -> suprafunc . funcsOpt
    (15) funcsOpt -> . suprafunc funcsOpt
    (16) funcsOpt -> . empty
    (33) suprafunc -> . func block
    (159) empty -> .
    (34) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 159 (empty -> .)
    $end            reduce using rule 159 (empty -> .)
    DEF             shift and go to state 34

    suprafunc                      shift and go to state 31
    funcsOpt                       shift and go to state 38
    empty                          shift and go to state 35
    func                           shift and go to state 33

state 32

    (14) body -> declarationsOpt funcsOpt . main funcsOpt
    (31) main -> . MAIN ( ) seen_main block

    MAIN            shift and go to state 39

    main                           shift and go to state 40

state 33

    (33) suprafunc -> func . block
    (37) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 42

state 34

    (34) func -> DEF . returntype ID ( paramsOpt )
    (121) returntype -> . VOID
    (122) returntype -> . type
    (117) type -> . INT
    (118) type -> . FLOAT
    (119) type -> . STRING
    (120) type -> . BOOL

    VOID            shift and go to state 43
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 16
    BOOL            shift and go to state 19

    returntype                     shift and go to state 44
    type                           shift and go to state 45

state 35

    (16) funcsOpt -> empty .

    MAIN            reduce using rule 16 (funcsOpt -> empty .)
    $end            reduce using rule 16 (funcsOpt -> empty .)


state 36

    (19) declaration -> type push_type . declarationB declarationC
    (20) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 46

    declarationB                   shift and go to state 47

state 37

    (17) declarationsOpt -> declaration declarationsOpt .

    DEF             reduce using rule 17 (declarationsOpt -> declaration declarationsOpt .)
    MAIN            reduce using rule 17 (declarationsOpt -> declaration declarationsOpt .)


state 38

    (15) funcsOpt -> suprafunc funcsOpt .

    MAIN            reduce using rule 15 (funcsOpt -> suprafunc funcsOpt .)
    $end            reduce using rule 15 (funcsOpt -> suprafunc funcsOpt .)


state 39

    (31) main -> MAIN . ( ) seen_main block

    (               shift and go to state 48


state 40

    (14) body -> declarationsOpt funcsOpt main . funcsOpt
    (15) funcsOpt -> . suprafunc funcsOpt
    (16) funcsOpt -> . empty
    (33) suprafunc -> . func block
    (159) empty -> .
    (34) func -> . DEF returntype ID ( paramsOpt )

    $end            reduce using rule 159 (empty -> .)
    DEF             shift and go to state 34

    suprafunc                      shift and go to state 31
    funcsOpt                       shift and go to state 49
    func                           shift and go to state 33
    empty                          shift and go to state 35

state 41

    (37) block -> { . instructionsOpt }
    (38) instructionsOpt -> . instruction instructionsOpt
    (39) instructionsOpt -> . empty
    (50) instruction -> . assignfunccall ;
    (51) instruction -> . output ;
    (52) instruction -> . return ;
    (53) instruction -> . read ;
    (54) instruction -> . declaration
    (55) instruction -> . condition
    (56) instruction -> . whileloop
    (57) instruction -> . forloop
    (58) instruction -> . localdirective
    (159) empty -> .
    (59) assignfunccall -> . ID seen_funccall push_operand assignfunccallB
    (132) output -> . PRINT ( outputB
    (154) return -> . RETURN hyperexpression return_quadruple
    (127) read -> . READ ( validate_id push_operand read_quadruple readB )
    (19) declaration -> . type push_type declarationB declarationC
    (44) condition -> . IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple
    (113) whileloop -> . WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
    (123) forloop -> . FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (65) localdirective -> . localvardirective
    (66) localdirective -> . localdecisiondirective
    (67) localdirective -> . localmsgdirective
    (117) type -> . INT
    (118) type -> . FLOAT
    (119) type -> . STRING
    (120) type -> . BOOL
    (137) localvardirective -> . # localvardirectiveB ID
    (141) localdecisiondirective -> . TRACKDECISION
    (142) localdecisiondirective -> . FORGETDECISION
    (143) localdecisiondirective -> . empty
    (140) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 159 (empty -> .)
    ID              shift and go to state 69
    PRINT           shift and go to state 53
    RETURN          shift and go to state 50
    READ            shift and go to state 51
    IF              shift and go to state 71
    WHILE           shift and go to state 52
    FOR             shift and go to state 62
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 16
    BOOL            shift and go to state 19
    #               shift and go to state 55
    TRACKDECISION   shift and go to state 57
    FORGETDECISION  shift and go to state 66

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! PRINT           [ reduce using rule 159 (empty -> .) ]
  ! RETURN          [ reduce using rule 159 (empty -> .) ]
  ! READ            [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! INT             [ reduce using rule 159 (empty -> .) ]
  ! FLOAT           [ reduce using rule 159 (empty -> .) ]
  ! STRING          [ reduce using rule 159 (empty -> .) ]
  ! BOOL            [ reduce using rule 159 (empty -> .) ]
  ! #               [ reduce using rule 159 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 159 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 159 (empty -> .) ]

    whileloop                      shift and go to state 54
    localvardirective              shift and go to state 56
    localmsgdirective              shift and go to state 58
    type                           shift and go to state 15
    empty                          shift and go to state 59
    forloop                        shift and go to state 60
    return                         shift and go to state 61
    read                           shift and go to state 63
    instructionsOpt                shift and go to state 64
    assignfunccall                 shift and go to state 65
    localdirective                 shift and go to state 67
    declaration                    shift and go to state 68
    condition                      shift and go to state 70
    instruction                    shift and go to state 72
    localdecisiondirective         shift and go to state 73
    output                         shift and go to state 74

state 42

    (33) suprafunc -> func block .

    DEF             reduce using rule 33 (suprafunc -> func block .)
    $end            reduce using rule 33 (suprafunc -> func block .)
    MAIN            reduce using rule 33 (suprafunc -> func block .)


state 43

    (121) returntype -> VOID .

    ID              reduce using rule 121 (returntype -> VOID .)


state 44

    (34) func -> DEF returntype . ID ( paramsOpt )

    ID              shift and go to state 75


state 45

    (122) returntype -> type .

    ID              reduce using rule 122 (returntype -> type .)


state 46

    (20) declarationB -> ID . push_operand dimensionsOpt
    (21) push_operand -> .

    [               reduce using rule 21 (push_operand -> .)
    =               reduce using rule 21 (push_operand -> .)
    ,               reduce using rule 21 (push_operand -> .)
    ;               reduce using rule 21 (push_operand -> .)

    push_operand                   shift and go to state 76

state 47

    (19) declaration -> type push_type declarationB . declarationC
    (26) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (27) declarationC -> . , repush_type declarationB declarationC
    (28) declarationC -> . ;

    =               shift and go to state 80
    ,               shift and go to state 77
    ;               shift and go to state 78

    declarationC                   shift and go to state 79

state 48

    (31) main -> MAIN ( . ) seen_main block

    )               shift and go to state 81


state 49

    (14) body -> declarationsOpt funcsOpt main funcsOpt .

    $end            reduce using rule 14 (body -> declarationsOpt funcsOpt main funcsOpt .)


state 50

    (154) return -> RETURN . hyperexpression return_quadruple
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    sign                           shift and go to state 91
    signB                          shift and go to state 82
    hyperexpression                shift and go to state 86
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 51

    (127) read -> READ . ( validate_id push_operand read_quadruple readB )

    (               shift and go to state 96


state 52

    (113) whileloop -> WHILE . init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
    (114) init_while -> .

    (               reduce using rule 114 (init_while -> .)

    init_while                     shift and go to state 97

state 53

    (132) output -> PRINT . ( outputB

    (               shift and go to state 98


state 54

    (56) instruction -> whileloop .

    ID              reduce using rule 56 (instruction -> whileloop .)
    PRINT           reduce using rule 56 (instruction -> whileloop .)
    RETURN          reduce using rule 56 (instruction -> whileloop .)
    READ            reduce using rule 56 (instruction -> whileloop .)
    IF              reduce using rule 56 (instruction -> whileloop .)
    WHILE           reduce using rule 56 (instruction -> whileloop .)
    FOR             reduce using rule 56 (instruction -> whileloop .)
    INT             reduce using rule 56 (instruction -> whileloop .)
    FLOAT           reduce using rule 56 (instruction -> whileloop .)
    STRING          reduce using rule 56 (instruction -> whileloop .)
    BOOL            reduce using rule 56 (instruction -> whileloop .)
    #               reduce using rule 56 (instruction -> whileloop .)
    TRACKDECISION   reduce using rule 56 (instruction -> whileloop .)
    FORGETDECISION  reduce using rule 56 (instruction -> whileloop .)
    }               reduce using rule 56 (instruction -> whileloop .)


state 55

    (137) localvardirective -> # . localvardirectiveB ID
    (140) localmsgdirective -> # . SHOW SCONST
    (138) localvardirectiveB -> . TRACK
    (139) localvardirectiveB -> . FORGET

    SHOW            shift and go to state 100
    TRACK           shift and go to state 101
    FORGET          shift and go to state 99

    localvardirectiveB             shift and go to state 102

state 56

    (65) localdirective -> localvardirective .

    ID              reduce using rule 65 (localdirective -> localvardirective .)
    PRINT           reduce using rule 65 (localdirective -> localvardirective .)
    RETURN          reduce using rule 65 (localdirective -> localvardirective .)
    READ            reduce using rule 65 (localdirective -> localvardirective .)
    IF              reduce using rule 65 (localdirective -> localvardirective .)
    WHILE           reduce using rule 65 (localdirective -> localvardirective .)
    FOR             reduce using rule 65 (localdirective -> localvardirective .)
    INT             reduce using rule 65 (localdirective -> localvardirective .)
    FLOAT           reduce using rule 65 (localdirective -> localvardirective .)
    STRING          reduce using rule 65 (localdirective -> localvardirective .)
    BOOL            reduce using rule 65 (localdirective -> localvardirective .)
    #               reduce using rule 65 (localdirective -> localvardirective .)
    TRACKDECISION   reduce using rule 65 (localdirective -> localvardirective .)
    FORGETDECISION  reduce using rule 65 (localdirective -> localvardirective .)
    }               reduce using rule 65 (localdirective -> localvardirective .)


state 57

    (141) localdecisiondirective -> TRACKDECISION .

    ID              reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    PRINT           reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    RETURN          reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    READ            reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    IF              reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    WHILE           reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    FOR             reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    INT             reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    FLOAT           reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    STRING          reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    BOOL            reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    #               reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    TRACKDECISION   reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    FORGETDECISION  reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)
    }               reduce using rule 141 (localdecisiondirective -> TRACKDECISION .)


state 58

    (67) localdirective -> localmsgdirective .

    ID              reduce using rule 67 (localdirective -> localmsgdirective .)
    PRINT           reduce using rule 67 (localdirective -> localmsgdirective .)
    RETURN          reduce using rule 67 (localdirective -> localmsgdirective .)
    READ            reduce using rule 67 (localdirective -> localmsgdirective .)
    IF              reduce using rule 67 (localdirective -> localmsgdirective .)
    WHILE           reduce using rule 67 (localdirective -> localmsgdirective .)
    FOR             reduce using rule 67 (localdirective -> localmsgdirective .)
    INT             reduce using rule 67 (localdirective -> localmsgdirective .)
    FLOAT           reduce using rule 67 (localdirective -> localmsgdirective .)
    STRING          reduce using rule 67 (localdirective -> localmsgdirective .)
    BOOL            reduce using rule 67 (localdirective -> localmsgdirective .)
    #               reduce using rule 67 (localdirective -> localmsgdirective .)
    TRACKDECISION   reduce using rule 67 (localdirective -> localmsgdirective .)
    FORGETDECISION  reduce using rule 67 (localdirective -> localmsgdirective .)
    }               reduce using rule 67 (localdirective -> localmsgdirective .)


state 59

    (39) instructionsOpt -> empty .
    (143) localdecisiondirective -> empty .

  ! reduce/reduce conflict for } resolved using rule 39 (instructionsOpt -> empty .)
    }               reduce using rule 39 (instructionsOpt -> empty .)
    ID              reduce using rule 143 (localdecisiondirective -> empty .)
    PRINT           reduce using rule 143 (localdecisiondirective -> empty .)
    RETURN          reduce using rule 143 (localdecisiondirective -> empty .)
    READ            reduce using rule 143 (localdecisiondirective -> empty .)
    IF              reduce using rule 143 (localdecisiondirective -> empty .)
    WHILE           reduce using rule 143 (localdecisiondirective -> empty .)
    FOR             reduce using rule 143 (localdecisiondirective -> empty .)
    INT             reduce using rule 143 (localdecisiondirective -> empty .)
    FLOAT           reduce using rule 143 (localdecisiondirective -> empty .)
    STRING          reduce using rule 143 (localdecisiondirective -> empty .)
    BOOL            reduce using rule 143 (localdecisiondirective -> empty .)
    #               reduce using rule 143 (localdecisiondirective -> empty .)
    TRACKDECISION   reduce using rule 143 (localdecisiondirective -> empty .)
    FORGETDECISION  reduce using rule 143 (localdecisiondirective -> empty .)

  ! }               [ reduce using rule 143 (localdecisiondirective -> empty .) ]


state 60

    (57) instruction -> forloop .

    ID              reduce using rule 57 (instruction -> forloop .)
    PRINT           reduce using rule 57 (instruction -> forloop .)
    RETURN          reduce using rule 57 (instruction -> forloop .)
    READ            reduce using rule 57 (instruction -> forloop .)
    IF              reduce using rule 57 (instruction -> forloop .)
    WHILE           reduce using rule 57 (instruction -> forloop .)
    FOR             reduce using rule 57 (instruction -> forloop .)
    INT             reduce using rule 57 (instruction -> forloop .)
    FLOAT           reduce using rule 57 (instruction -> forloop .)
    STRING          reduce using rule 57 (instruction -> forloop .)
    BOOL            reduce using rule 57 (instruction -> forloop .)
    #               reduce using rule 57 (instruction -> forloop .)
    TRACKDECISION   reduce using rule 57 (instruction -> forloop .)
    FORGETDECISION  reduce using rule 57 (instruction -> forloop .)
    }               reduce using rule 57 (instruction -> forloop .)


state 61

    (52) instruction -> return . ;

    ;               shift and go to state 103


state 62

    (123) forloop -> FOR . ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple

    (               shift and go to state 104


state 63

    (53) instruction -> read . ;

    ;               shift and go to state 105


state 64

    (37) block -> { instructionsOpt . }

    }               shift and go to state 106


state 65

    (50) instruction -> assignfunccall . ;

    ;               shift and go to state 107


state 66

    (142) localdecisiondirective -> FORGETDECISION .

    ID              reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    PRINT           reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    RETURN          reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    READ            reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    IF              reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    WHILE           reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    FOR             reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    INT             reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    FLOAT           reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    STRING          reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    BOOL            reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    #               reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    TRACKDECISION   reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    FORGETDECISION  reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)
    }               reduce using rule 142 (localdecisiondirective -> FORGETDECISION .)


state 67

    (58) instruction -> localdirective .

    ID              reduce using rule 58 (instruction -> localdirective .)
    PRINT           reduce using rule 58 (instruction -> localdirective .)
    RETURN          reduce using rule 58 (instruction -> localdirective .)
    READ            reduce using rule 58 (instruction -> localdirective .)
    IF              reduce using rule 58 (instruction -> localdirective .)
    WHILE           reduce using rule 58 (instruction -> localdirective .)
    FOR             reduce using rule 58 (instruction -> localdirective .)
    INT             reduce using rule 58 (instruction -> localdirective .)
    FLOAT           reduce using rule 58 (instruction -> localdirective .)
    STRING          reduce using rule 58 (instruction -> localdirective .)
    BOOL            reduce using rule 58 (instruction -> localdirective .)
    #               reduce using rule 58 (instruction -> localdirective .)
    TRACKDECISION   reduce using rule 58 (instruction -> localdirective .)
    FORGETDECISION  reduce using rule 58 (instruction -> localdirective .)
    }               reduce using rule 58 (instruction -> localdirective .)


state 68

    (54) instruction -> declaration .

    ID              reduce using rule 54 (instruction -> declaration .)
    PRINT           reduce using rule 54 (instruction -> declaration .)
    RETURN          reduce using rule 54 (instruction -> declaration .)
    READ            reduce using rule 54 (instruction -> declaration .)
    IF              reduce using rule 54 (instruction -> declaration .)
    WHILE           reduce using rule 54 (instruction -> declaration .)
    FOR             reduce using rule 54 (instruction -> declaration .)
    INT             reduce using rule 54 (instruction -> declaration .)
    FLOAT           reduce using rule 54 (instruction -> declaration .)
    STRING          reduce using rule 54 (instruction -> declaration .)
    BOOL            reduce using rule 54 (instruction -> declaration .)
    #               reduce using rule 54 (instruction -> declaration .)
    TRACKDECISION   reduce using rule 54 (instruction -> declaration .)
    FORGETDECISION  reduce using rule 54 (instruction -> declaration .)
    }               reduce using rule 54 (instruction -> declaration .)


state 69

    (59) assignfunccall -> ID . seen_funccall push_operand assignfunccallB
    (60) seen_funccall -> .

    (               reduce using rule 60 (seen_funccall -> .)
    [               reduce using rule 60 (seen_funccall -> .)
    =               reduce using rule 60 (seen_funccall -> .)

    seen_funccall                  shift and go to state 108

state 70

    (55) instruction -> condition .

    ID              reduce using rule 55 (instruction -> condition .)
    PRINT           reduce using rule 55 (instruction -> condition .)
    RETURN          reduce using rule 55 (instruction -> condition .)
    READ            reduce using rule 55 (instruction -> condition .)
    IF              reduce using rule 55 (instruction -> condition .)
    WHILE           reduce using rule 55 (instruction -> condition .)
    FOR             reduce using rule 55 (instruction -> condition .)
    INT             reduce using rule 55 (instruction -> condition .)
    FLOAT           reduce using rule 55 (instruction -> condition .)
    STRING          reduce using rule 55 (instruction -> condition .)
    BOOL            reduce using rule 55 (instruction -> condition .)
    #               reduce using rule 55 (instruction -> condition .)
    TRACKDECISION   reduce using rule 55 (instruction -> condition .)
    FORGETDECISION  reduce using rule 55 (instruction -> condition .)
    }               reduce using rule 55 (instruction -> condition .)


state 71

    (44) condition -> IF . ( hyperexpression condition_quadruple ) block else endcondition_quadruple

    (               shift and go to state 109


state 72

    (38) instructionsOpt -> instruction . instructionsOpt
    (38) instructionsOpt -> . instruction instructionsOpt
    (39) instructionsOpt -> . empty
    (50) instruction -> . assignfunccall ;
    (51) instruction -> . output ;
    (52) instruction -> . return ;
    (53) instruction -> . read ;
    (54) instruction -> . declaration
    (55) instruction -> . condition
    (56) instruction -> . whileloop
    (57) instruction -> . forloop
    (58) instruction -> . localdirective
    (159) empty -> .
    (59) assignfunccall -> . ID seen_funccall push_operand assignfunccallB
    (132) output -> . PRINT ( outputB
    (154) return -> . RETURN hyperexpression return_quadruple
    (127) read -> . READ ( validate_id push_operand read_quadruple readB )
    (19) declaration -> . type push_type declarationB declarationC
    (44) condition -> . IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple
    (113) whileloop -> . WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
    (123) forloop -> . FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (65) localdirective -> . localvardirective
    (66) localdirective -> . localdecisiondirective
    (67) localdirective -> . localmsgdirective
    (117) type -> . INT
    (118) type -> . FLOAT
    (119) type -> . STRING
    (120) type -> . BOOL
    (137) localvardirective -> . # localvardirectiveB ID
    (141) localdecisiondirective -> . TRACKDECISION
    (142) localdecisiondirective -> . FORGETDECISION
    (143) localdecisiondirective -> . empty
    (140) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 159 (empty -> .)
    ID              shift and go to state 69
    PRINT           shift and go to state 53
    RETURN          shift and go to state 50
    READ            shift and go to state 51
    IF              shift and go to state 71
    WHILE           shift and go to state 52
    FOR             shift and go to state 62
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 16
    BOOL            shift and go to state 19
    #               shift and go to state 55
    TRACKDECISION   shift and go to state 57
    FORGETDECISION  shift and go to state 66

  ! ID              [ reduce using rule 159 (empty -> .) ]
  ! PRINT           [ reduce using rule 159 (empty -> .) ]
  ! RETURN          [ reduce using rule 159 (empty -> .) ]
  ! READ            [ reduce using rule 159 (empty -> .) ]
  ! IF              [ reduce using rule 159 (empty -> .) ]
  ! WHILE           [ reduce using rule 159 (empty -> .) ]
  ! FOR             [ reduce using rule 159 (empty -> .) ]
  ! INT             [ reduce using rule 159 (empty -> .) ]
  ! FLOAT           [ reduce using rule 159 (empty -> .) ]
  ! STRING          [ reduce using rule 159 (empty -> .) ]
  ! BOOL            [ reduce using rule 159 (empty -> .) ]
  ! #               [ reduce using rule 159 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 159 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 159 (empty -> .) ]

    whileloop                      shift and go to state 54
    localvardirective              shift and go to state 56
    localmsgdirective              shift and go to state 58
    type                           shift and go to state 15
    empty                          shift and go to state 59
    forloop                        shift and go to state 60
    return                         shift and go to state 61
    read                           shift and go to state 63
    instructionsOpt                shift and go to state 110
    assignfunccall                 shift and go to state 65
    localdirective                 shift and go to state 67
    declaration                    shift and go to state 68
    condition                      shift and go to state 70
    instruction                    shift and go to state 72
    localdecisiondirective         shift and go to state 73
    output                         shift and go to state 74

state 73

    (66) localdirective -> localdecisiondirective .

    ID              reduce using rule 66 (localdirective -> localdecisiondirective .)
    PRINT           reduce using rule 66 (localdirective -> localdecisiondirective .)
    RETURN          reduce using rule 66 (localdirective -> localdecisiondirective .)
    READ            reduce using rule 66 (localdirective -> localdecisiondirective .)
    IF              reduce using rule 66 (localdirective -> localdecisiondirective .)
    WHILE           reduce using rule 66 (localdirective -> localdecisiondirective .)
    FOR             reduce using rule 66 (localdirective -> localdecisiondirective .)
    INT             reduce using rule 66 (localdirective -> localdecisiondirective .)
    FLOAT           reduce using rule 66 (localdirective -> localdecisiondirective .)
    STRING          reduce using rule 66 (localdirective -> localdecisiondirective .)
    BOOL            reduce using rule 66 (localdirective -> localdecisiondirective .)
    #               reduce using rule 66 (localdirective -> localdecisiondirective .)
    TRACKDECISION   reduce using rule 66 (localdirective -> localdecisiondirective .)
    FORGETDECISION  reduce using rule 66 (localdirective -> localdecisiondirective .)
    }               reduce using rule 66 (localdirective -> localdecisiondirective .)


state 74

    (51) instruction -> output . ;

    ;               shift and go to state 111


state 75

    (34) func -> DEF returntype ID . ( paramsOpt )

    (               shift and go to state 112


state 76

    (20) declarationB -> ID push_operand . dimensionsOpt
    (42) dimensionsOpt -> . dimensions
    (43) dimensionsOpt -> . empty
    (151) dimensions -> . [ hyperexpression ] dimensionsB
    (159) empty -> .

    [               shift and go to state 114
    =               reduce using rule 159 (empty -> .)
    ,               reduce using rule 159 (empty -> .)
    ;               reduce using rule 159 (empty -> .)

    dimensions                     shift and go to state 113
    dimensionsOpt                  shift and go to state 115
    empty                          shift and go to state 116

state 77

    (27) declarationC -> , . repush_type declarationB declarationC
    (23) repush_type -> .

    ID              reduce using rule 23 (repush_type -> .)

    repush_type                    shift and go to state 117

state 78

    (28) declarationC -> ; .

    INT             reduce using rule 28 (declarationC -> ; .)
    FLOAT           reduce using rule 28 (declarationC -> ; .)
    STRING          reduce using rule 28 (declarationC -> ; .)
    BOOL            reduce using rule 28 (declarationC -> ; .)
    DEF             reduce using rule 28 (declarationC -> ; .)
    MAIN            reduce using rule 28 (declarationC -> ; .)
    ID              reduce using rule 28 (declarationC -> ; .)
    PRINT           reduce using rule 28 (declarationC -> ; .)
    RETURN          reduce using rule 28 (declarationC -> ; .)
    READ            reduce using rule 28 (declarationC -> ; .)
    IF              reduce using rule 28 (declarationC -> ; .)
    WHILE           reduce using rule 28 (declarationC -> ; .)
    FOR             reduce using rule 28 (declarationC -> ; .)
    #               reduce using rule 28 (declarationC -> ; .)
    TRACKDECISION   reduce using rule 28 (declarationC -> ; .)
    FORGETDECISION  reduce using rule 28 (declarationC -> ; .)
    }               reduce using rule 28 (declarationC -> ; .)


state 79

    (19) declaration -> type push_type declarationB declarationC .

    INT             reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    FLOAT           reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    STRING          reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    BOOL            reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    DEF             reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    MAIN            reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    ID              reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    PRINT           reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    RETURN          reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    READ            reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    IF              reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    WHILE           reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    FOR             reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    #               reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 19 (declaration -> type push_type declarationB declarationC .)
    }               reduce using rule 19 (declaration -> type push_type declarationB declarationC .)


state 80

    (26) declarationC -> = . push_operator hyperexpression quadruple_assign declarationD
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 118

state 81

    (31) main -> MAIN ( ) . seen_main block
    (32) seen_main -> .

    {               reduce using rule 32 (seen_main -> .)

    seen_main                      shift and go to state 119

state 82

    (92) factor -> signB . constant
    (106) constant -> . FCONST seen_fconst
    (107) constant -> . ICONST seen_iconst
    (108) constant -> . SCONST seen_sconst
    (109) constant -> . TRUE seen_true
    (110) constant -> . FALSE seen_false

    FCONST          shift and go to state 121
    ICONST          shift and go to state 123
    SCONST          shift and go to state 122
    TRUE            shift and go to state 125
    FALSE           shift and go to state 124

    constant                       shift and go to state 120

state 83

    (93) factor -> ( . seen_parentheses hyperexpression )
    (97) seen_parentheses -> .

    (               reduce using rule 97 (seen_parentheses -> .)
    ID              reduce using rule 97 (seen_parentheses -> .)
    +               reduce using rule 97 (seen_parentheses -> .)
    -               reduce using rule 97 (seen_parentheses -> .)
    FCONST          reduce using rule 97 (seen_parentheses -> .)
    ICONST          reduce using rule 97 (seen_parentheses -> .)
    SCONST          reduce using rule 97 (seen_parentheses -> .)
    TRUE            reduce using rule 97 (seen_parentheses -> .)
    FALSE           reduce using rule 97 (seen_parentheses -> .)

    seen_parentheses               shift and go to state 126

state 84

    (111) sign -> + .

    FCONST          reduce using rule 111 (sign -> + .)
    ICONST          reduce using rule 111 (sign -> + .)
    SCONST          reduce using rule 111 (sign -> + .)
    TRUE            reduce using rule 111 (sign -> + .)
    FALSE           reduce using rule 111 (sign -> + .)


state 85

    (112) sign -> - .

    FCONST          reduce using rule 112 (sign -> - .)
    ICONST          reduce using rule 112 (sign -> - .)
    SCONST          reduce using rule 112 (sign -> - .)
    TRUE            reduce using rule 112 (sign -> - .)
    FALSE           reduce using rule 112 (sign -> - .)


state 86

    (154) return -> RETURN hyperexpression . return_quadruple
    (155) return_quadruple -> .

    ;               reduce using rule 155 (return_quadruple -> .)

    return_quadruple               shift and go to state 127

state 87

    (87) term -> factor . seen_factor termB
    (88) seen_factor -> .

    /               reduce using rule 88 (seen_factor -> .)
    *               reduce using rule 88 (seen_factor -> .)
    -               reduce using rule 88 (seen_factor -> .)
    +               reduce using rule 88 (seen_factor -> .)
    <               reduce using rule 88 (seen_factor -> .)
    >               reduce using rule 88 (seen_factor -> .)
    DIFF            reduce using rule 88 (seen_factor -> .)
    EQ              reduce using rule 88 (seen_factor -> .)
    LTEQ            reduce using rule 88 (seen_factor -> .)
    GTEQ            reduce using rule 88 (seen_factor -> .)
    AND             reduce using rule 88 (seen_factor -> .)
    OR              reduce using rule 88 (seen_factor -> .)
    ;               reduce using rule 88 (seen_factor -> .)
    )               reduce using rule 88 (seen_factor -> .)
    ,               reduce using rule 88 (seen_factor -> .)
    ]               reduce using rule 88 (seen_factor -> .)

    seen_factor                    shift and go to state 128

state 88

    (100) signB -> empty .

    FCONST          reduce using rule 100 (signB -> empty .)
    ICONST          reduce using rule 100 (signB -> empty .)
    SCONST          reduce using rule 100 (signB -> empty .)
    TRUE            reduce using rule 100 (signB -> empty .)
    FALSE           reduce using rule 100 (signB -> empty .)


state 89

    (94) factor -> funccall . seen_factor_funccall
    (96) seen_factor_funccall -> .

    /               reduce using rule 96 (seen_factor_funccall -> .)
    *               reduce using rule 96 (seen_factor_funccall -> .)
    -               reduce using rule 96 (seen_factor_funccall -> .)
    +               reduce using rule 96 (seen_factor_funccall -> .)
    <               reduce using rule 96 (seen_factor_funccall -> .)
    >               reduce using rule 96 (seen_factor_funccall -> .)
    DIFF            reduce using rule 96 (seen_factor_funccall -> .)
    EQ              reduce using rule 96 (seen_factor_funccall -> .)
    LTEQ            reduce using rule 96 (seen_factor_funccall -> .)
    GTEQ            reduce using rule 96 (seen_factor_funccall -> .)
    AND             reduce using rule 96 (seen_factor_funccall -> .)
    OR              reduce using rule 96 (seen_factor_funccall -> .)
    ;               reduce using rule 96 (seen_factor_funccall -> .)
    )               reduce using rule 96 (seen_factor_funccall -> .)
    ,               reduce using rule 96 (seen_factor_funccall -> .)
    ]               reduce using rule 96 (seen_factor_funccall -> .)

    seen_factor_funccall           shift and go to state 129

state 90

    (68) hyperexpression -> superexpression . hyperexpressionB
    (69) hyperexpressionB -> . OR push_operator hyperexpression
    (70) hyperexpressionB -> . empty
    (159) empty -> .

    OR              shift and go to state 131
    ;               reduce using rule 159 (empty -> .)
    )               reduce using rule 159 (empty -> .)
    ,               reduce using rule 159 (empty -> .)
    ]               reduce using rule 159 (empty -> .)

    hyperexpressionB               shift and go to state 130
    empty                          shift and go to state 132

state 91

    (99) signB -> sign .

    FCONST          reduce using rule 99 (signB -> sign .)
    ICONST          reduce using rule 99 (signB -> sign .)
    SCONST          reduce using rule 99 (signB -> sign .)
    TRUE            reduce using rule 99 (signB -> sign .)
    FALSE           reduce using rule 99 (signB -> sign .)


state 92

    (95) factor -> ID . seen_ID dimensionsOpt
    (144) funccall -> ID . seen_a_factor_funccall ( funccallB funccallC
    (98) seen_ID -> .
    (145) seen_a_factor_funccall -> .

    [               reduce using rule 98 (seen_ID -> .)
    /               reduce using rule 98 (seen_ID -> .)
    *               reduce using rule 98 (seen_ID -> .)
    -               reduce using rule 98 (seen_ID -> .)
    +               reduce using rule 98 (seen_ID -> .)
    <               reduce using rule 98 (seen_ID -> .)
    >               reduce using rule 98 (seen_ID -> .)
    DIFF            reduce using rule 98 (seen_ID -> .)
    EQ              reduce using rule 98 (seen_ID -> .)
    LTEQ            reduce using rule 98 (seen_ID -> .)
    GTEQ            reduce using rule 98 (seen_ID -> .)
    AND             reduce using rule 98 (seen_ID -> .)
    OR              reduce using rule 98 (seen_ID -> .)
    ;               reduce using rule 98 (seen_ID -> .)
    )               reduce using rule 98 (seen_ID -> .)
    ,               reduce using rule 98 (seen_ID -> .)
    ]               reduce using rule 98 (seen_ID -> .)
    (               reduce using rule 145 (seen_a_factor_funccall -> .)

    seen_ID                        shift and go to state 134
    seen_a_factor_funccall         shift and go to state 133

state 93

    (82) exp -> term . seen_term expB
    (83) seen_term -> .

    -               reduce using rule 83 (seen_term -> .)
    +               reduce using rule 83 (seen_term -> .)
    <               reduce using rule 83 (seen_term -> .)
    >               reduce using rule 83 (seen_term -> .)
    DIFF            reduce using rule 83 (seen_term -> .)
    EQ              reduce using rule 83 (seen_term -> .)
    LTEQ            reduce using rule 83 (seen_term -> .)
    GTEQ            reduce using rule 83 (seen_term -> .)
    AND             reduce using rule 83 (seen_term -> .)
    OR              reduce using rule 83 (seen_term -> .)
    ;               reduce using rule 83 (seen_term -> .)
    )               reduce using rule 83 (seen_term -> .)
    ,               reduce using rule 83 (seen_term -> .)
    ]               reduce using rule 83 (seen_term -> .)

    seen_term                      shift and go to state 135

state 94

    (74) expression -> exp . expressionB
    (75) expressionB -> . < push_operator exp
    (76) expressionB -> . > push_operator exp
    (77) expressionB -> . DIFF push_operator exp
    (78) expressionB -> . EQ push_operator exp
    (79) expressionB -> . LTEQ push_operator exp
    (80) expressionB -> . GTEQ push_operator exp
    (81) expressionB -> . empty
    (159) empty -> .

    <               shift and go to state 141
    >               shift and go to state 143
    DIFF            shift and go to state 139
    EQ              shift and go to state 140
    LTEQ            shift and go to state 137
    GTEQ            shift and go to state 136
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    ;               reduce using rule 159 (empty -> .)
    )               reduce using rule 159 (empty -> .)
    ,               reduce using rule 159 (empty -> .)
    ]               reduce using rule 159 (empty -> .)

    empty                          shift and go to state 142
    expressionB                    shift and go to state 138

state 95

    (71) superexpression -> expression . superexpressionB
    (72) superexpressionB -> . AND push_operator superexpression
    (73) superexpressionB -> . empty
    (159) empty -> .

    AND             shift and go to state 144
    OR              reduce using rule 159 (empty -> .)
    ;               reduce using rule 159 (empty -> .)
    )               reduce using rule 159 (empty -> .)
    ,               reduce using rule 159 (empty -> .)
    ]               reduce using rule 159 (empty -> .)

    empty                          shift and go to state 146
    superexpressionB               shift and go to state 145

state 96

    (127) read -> READ ( . validate_id push_operand read_quadruple readB )
    (128) validate_id -> . ID

    ID              shift and go to state 148

    validate_id                    shift and go to state 147

state 97

    (113) whileloop -> WHILE init_while . ( hyperexpression ) while_quadruple block endwhile_quadruple

    (               shift and go to state 149


state 98

    (132) output -> PRINT ( . outputB
    (133) outputB -> . hyperexpression print_quadruple outputC
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    signB                          shift and go to state 82
    hyperexpression                shift and go to state 150
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    outputB                        shift and go to state 151
    expression                     shift and go to state 95

state 99

    (139) localvardirectiveB -> FORGET .

    ID              reduce using rule 139 (localvardirectiveB -> FORGET .)


state 100

    (140) localmsgdirective -> # SHOW . SCONST

    SCONST          shift and go to state 152


state 101

    (138) localvardirectiveB -> TRACK .

    ID              reduce using rule 138 (localvardirectiveB -> TRACK .)


state 102

    (137) localvardirective -> # localvardirectiveB . ID

    ID              shift and go to state 153


state 103

    (52) instruction -> return ; .

    ID              reduce using rule 52 (instruction -> return ; .)
    PRINT           reduce using rule 52 (instruction -> return ; .)
    RETURN          reduce using rule 52 (instruction -> return ; .)
    READ            reduce using rule 52 (instruction -> return ; .)
    IF              reduce using rule 52 (instruction -> return ; .)
    WHILE           reduce using rule 52 (instruction -> return ; .)
    FOR             reduce using rule 52 (instruction -> return ; .)
    INT             reduce using rule 52 (instruction -> return ; .)
    FLOAT           reduce using rule 52 (instruction -> return ; .)
    STRING          reduce using rule 52 (instruction -> return ; .)
    BOOL            reduce using rule 52 (instruction -> return ; .)
    #               reduce using rule 52 (instruction -> return ; .)
    TRACKDECISION   reduce using rule 52 (instruction -> return ; .)
    FORGETDECISION  reduce using rule 52 (instruction -> return ; .)
    }               reduce using rule 52 (instruction -> return ; .)


state 104

    (123) forloop -> FOR ( . assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (40) assign -> . ID push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign

    ID              shift and go to state 154

    assign                         shift and go to state 155

state 105

    (53) instruction -> read ; .

    ID              reduce using rule 53 (instruction -> read ; .)
    PRINT           reduce using rule 53 (instruction -> read ; .)
    RETURN          reduce using rule 53 (instruction -> read ; .)
    READ            reduce using rule 53 (instruction -> read ; .)
    IF              reduce using rule 53 (instruction -> read ; .)
    WHILE           reduce using rule 53 (instruction -> read ; .)
    FOR             reduce using rule 53 (instruction -> read ; .)
    INT             reduce using rule 53 (instruction -> read ; .)
    FLOAT           reduce using rule 53 (instruction -> read ; .)
    STRING          reduce using rule 53 (instruction -> read ; .)
    BOOL            reduce using rule 53 (instruction -> read ; .)
    #               reduce using rule 53 (instruction -> read ; .)
    TRACKDECISION   reduce using rule 53 (instruction -> read ; .)
    FORGETDECISION  reduce using rule 53 (instruction -> read ; .)
    }               reduce using rule 53 (instruction -> read ; .)


state 106

    (37) block -> { instructionsOpt } .

    DEF             reduce using rule 37 (block -> { instructionsOpt } .)
    MAIN            reduce using rule 37 (block -> { instructionsOpt } .)
    $end            reduce using rule 37 (block -> { instructionsOpt } .)
    ID              reduce using rule 37 (block -> { instructionsOpt } .)
    PRINT           reduce using rule 37 (block -> { instructionsOpt } .)
    RETURN          reduce using rule 37 (block -> { instructionsOpt } .)
    READ            reduce using rule 37 (block -> { instructionsOpt } .)
    IF              reduce using rule 37 (block -> { instructionsOpt } .)
    WHILE           reduce using rule 37 (block -> { instructionsOpt } .)
    FOR             reduce using rule 37 (block -> { instructionsOpt } .)
    INT             reduce using rule 37 (block -> { instructionsOpt } .)
    FLOAT           reduce using rule 37 (block -> { instructionsOpt } .)
    STRING          reduce using rule 37 (block -> { instructionsOpt } .)
    BOOL            reduce using rule 37 (block -> { instructionsOpt } .)
    #               reduce using rule 37 (block -> { instructionsOpt } .)
    TRACKDECISION   reduce using rule 37 (block -> { instructionsOpt } .)
    FORGETDECISION  reduce using rule 37 (block -> { instructionsOpt } .)
    }               reduce using rule 37 (block -> { instructionsOpt } .)
    ELSE            reduce using rule 37 (block -> { instructionsOpt } .)


state 107

    (50) instruction -> assignfunccall ; .

    ID              reduce using rule 50 (instruction -> assignfunccall ; .)
    PRINT           reduce using rule 50 (instruction -> assignfunccall ; .)
    RETURN          reduce using rule 50 (instruction -> assignfunccall ; .)
    READ            reduce using rule 50 (instruction -> assignfunccall ; .)
    IF              reduce using rule 50 (instruction -> assignfunccall ; .)
    WHILE           reduce using rule 50 (instruction -> assignfunccall ; .)
    FOR             reduce using rule 50 (instruction -> assignfunccall ; .)
    INT             reduce using rule 50 (instruction -> assignfunccall ; .)
    FLOAT           reduce using rule 50 (instruction -> assignfunccall ; .)
    STRING          reduce using rule 50 (instruction -> assignfunccall ; .)
    BOOL            reduce using rule 50 (instruction -> assignfunccall ; .)
    #               reduce using rule 50 (instruction -> assignfunccall ; .)
    TRACKDECISION   reduce using rule 50 (instruction -> assignfunccall ; .)
    FORGETDECISION  reduce using rule 50 (instruction -> assignfunccall ; .)
    }               reduce using rule 50 (instruction -> assignfunccall ; .)


state 108

    (59) assignfunccall -> ID seen_funccall . push_operand assignfunccallB
    (21) push_operand -> .

    (               reduce using rule 21 (push_operand -> .)
    [               reduce using rule 21 (push_operand -> .)
    =               reduce using rule 21 (push_operand -> .)

    push_operand                   shift and go to state 156

state 109

    (44) condition -> IF ( . hyperexpression condition_quadruple ) block else endcondition_quadruple
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    signB                          shift and go to state 82
    hyperexpression                shift and go to state 157
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 110

    (38) instructionsOpt -> instruction instructionsOpt .

    }               reduce using rule 38 (instructionsOpt -> instruction instructionsOpt .)


state 111

    (51) instruction -> output ; .

    ID              reduce using rule 51 (instruction -> output ; .)
    PRINT           reduce using rule 51 (instruction -> output ; .)
    RETURN          reduce using rule 51 (instruction -> output ; .)
    READ            reduce using rule 51 (instruction -> output ; .)
    IF              reduce using rule 51 (instruction -> output ; .)
    WHILE           reduce using rule 51 (instruction -> output ; .)
    FOR             reduce using rule 51 (instruction -> output ; .)
    INT             reduce using rule 51 (instruction -> output ; .)
    FLOAT           reduce using rule 51 (instruction -> output ; .)
    STRING          reduce using rule 51 (instruction -> output ; .)
    BOOL            reduce using rule 51 (instruction -> output ; .)
    #               reduce using rule 51 (instruction -> output ; .)
    TRACKDECISION   reduce using rule 51 (instruction -> output ; .)
    FORGETDECISION  reduce using rule 51 (instruction -> output ; .)
    }               reduce using rule 51 (instruction -> output ; .)


state 112

    (34) func -> DEF returntype ID ( . paramsOpt )
    (35) paramsOpt -> . params paramsB
    (36) paramsOpt -> . empty
    (156) params -> . type ID
    (159) empty -> .
    (117) type -> . INT
    (118) type -> . FLOAT
    (119) type -> . STRING
    (120) type -> . BOOL

    )               reduce using rule 159 (empty -> .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 16
    BOOL            shift and go to state 19

    paramsOpt                      shift and go to state 158
    params                         shift and go to state 159
    type                           shift and go to state 161
    empty                          shift and go to state 160

state 113

    (42) dimensionsOpt -> dimensions .

    =               reduce using rule 42 (dimensionsOpt -> dimensions .)
    ,               reduce using rule 42 (dimensionsOpt -> dimensions .)
    ;               reduce using rule 42 (dimensionsOpt -> dimensions .)
    /               reduce using rule 42 (dimensionsOpt -> dimensions .)
    *               reduce using rule 42 (dimensionsOpt -> dimensions .)
    -               reduce using rule 42 (dimensionsOpt -> dimensions .)
    +               reduce using rule 42 (dimensionsOpt -> dimensions .)
    <               reduce using rule 42 (dimensionsOpt -> dimensions .)
    >               reduce using rule 42 (dimensionsOpt -> dimensions .)
    DIFF            reduce using rule 42 (dimensionsOpt -> dimensions .)
    EQ              reduce using rule 42 (dimensionsOpt -> dimensions .)
    LTEQ            reduce using rule 42 (dimensionsOpt -> dimensions .)
    GTEQ            reduce using rule 42 (dimensionsOpt -> dimensions .)
    AND             reduce using rule 42 (dimensionsOpt -> dimensions .)
    OR              reduce using rule 42 (dimensionsOpt -> dimensions .)
    )               reduce using rule 42 (dimensionsOpt -> dimensions .)
    ]               reduce using rule 42 (dimensionsOpt -> dimensions .)


state 114

    (151) dimensions -> [ . hyperexpression ] dimensionsB
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    sign                           shift and go to state 91
    signB                          shift and go to state 82
    hyperexpression                shift and go to state 162
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 115

    (20) declarationB -> ID push_operand dimensionsOpt .

    =               reduce using rule 20 (declarationB -> ID push_operand dimensionsOpt .)
    ,               reduce using rule 20 (declarationB -> ID push_operand dimensionsOpt .)
    ;               reduce using rule 20 (declarationB -> ID push_operand dimensionsOpt .)


state 116

    (43) dimensionsOpt -> empty .

    =               reduce using rule 43 (dimensionsOpt -> empty .)
    ,               reduce using rule 43 (dimensionsOpt -> empty .)
    ;               reduce using rule 43 (dimensionsOpt -> empty .)
    /               reduce using rule 43 (dimensionsOpt -> empty .)
    *               reduce using rule 43 (dimensionsOpt -> empty .)
    -               reduce using rule 43 (dimensionsOpt -> empty .)
    +               reduce using rule 43 (dimensionsOpt -> empty .)
    <               reduce using rule 43 (dimensionsOpt -> empty .)
    >               reduce using rule 43 (dimensionsOpt -> empty .)
    DIFF            reduce using rule 43 (dimensionsOpt -> empty .)
    EQ              reduce using rule 43 (dimensionsOpt -> empty .)
    LTEQ            reduce using rule 43 (dimensionsOpt -> empty .)
    GTEQ            reduce using rule 43 (dimensionsOpt -> empty .)
    AND             reduce using rule 43 (dimensionsOpt -> empty .)
    OR              reduce using rule 43 (dimensionsOpt -> empty .)
    )               reduce using rule 43 (dimensionsOpt -> empty .)
    ]               reduce using rule 43 (dimensionsOpt -> empty .)


state 117

    (27) declarationC -> , repush_type . declarationB declarationC
    (20) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 46

    declarationB                   shift and go to state 163

state 118

    (26) declarationC -> = push_operator . hyperexpression quadruple_assign declarationD
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    signB                          shift and go to state 82
    hyperexpression                shift and go to state 164
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 119

    (31) main -> MAIN ( ) seen_main . block
    (37) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 165

state 120

    (92) factor -> signB constant .

    /               reduce using rule 92 (factor -> signB constant .)
    *               reduce using rule 92 (factor -> signB constant .)
    -               reduce using rule 92 (factor -> signB constant .)
    +               reduce using rule 92 (factor -> signB constant .)
    <               reduce using rule 92 (factor -> signB constant .)
    >               reduce using rule 92 (factor -> signB constant .)
    DIFF            reduce using rule 92 (factor -> signB constant .)
    EQ              reduce using rule 92 (factor -> signB constant .)
    LTEQ            reduce using rule 92 (factor -> signB constant .)
    GTEQ            reduce using rule 92 (factor -> signB constant .)
    AND             reduce using rule 92 (factor -> signB constant .)
    OR              reduce using rule 92 (factor -> signB constant .)
    ;               reduce using rule 92 (factor -> signB constant .)
    )               reduce using rule 92 (factor -> signB constant .)
    ,               reduce using rule 92 (factor -> signB constant .)
    ]               reduce using rule 92 (factor -> signB constant .)


state 121

    (106) constant -> FCONST . seen_fconst
    (101) seen_fconst -> .

    /               reduce using rule 101 (seen_fconst -> .)
    *               reduce using rule 101 (seen_fconst -> .)
    -               reduce using rule 101 (seen_fconst -> .)
    +               reduce using rule 101 (seen_fconst -> .)
    <               reduce using rule 101 (seen_fconst -> .)
    >               reduce using rule 101 (seen_fconst -> .)
    DIFF            reduce using rule 101 (seen_fconst -> .)
    EQ              reduce using rule 101 (seen_fconst -> .)
    LTEQ            reduce using rule 101 (seen_fconst -> .)
    GTEQ            reduce using rule 101 (seen_fconst -> .)
    AND             reduce using rule 101 (seen_fconst -> .)
    OR              reduce using rule 101 (seen_fconst -> .)
    ;               reduce using rule 101 (seen_fconst -> .)
    )               reduce using rule 101 (seen_fconst -> .)
    ,               reduce using rule 101 (seen_fconst -> .)
    ]               reduce using rule 101 (seen_fconst -> .)

    seen_fconst                    shift and go to state 166

state 122

    (108) constant -> SCONST . seen_sconst
    (103) seen_sconst -> .

    /               reduce using rule 103 (seen_sconst -> .)
    *               reduce using rule 103 (seen_sconst -> .)
    -               reduce using rule 103 (seen_sconst -> .)
    +               reduce using rule 103 (seen_sconst -> .)
    <               reduce using rule 103 (seen_sconst -> .)
    >               reduce using rule 103 (seen_sconst -> .)
    DIFF            reduce using rule 103 (seen_sconst -> .)
    EQ              reduce using rule 103 (seen_sconst -> .)
    LTEQ            reduce using rule 103 (seen_sconst -> .)
    GTEQ            reduce using rule 103 (seen_sconst -> .)
    AND             reduce using rule 103 (seen_sconst -> .)
    OR              reduce using rule 103 (seen_sconst -> .)
    ;               reduce using rule 103 (seen_sconst -> .)
    )               reduce using rule 103 (seen_sconst -> .)
    ,               reduce using rule 103 (seen_sconst -> .)
    ]               reduce using rule 103 (seen_sconst -> .)

    seen_sconst                    shift and go to state 167

state 123

    (107) constant -> ICONST . seen_iconst
    (102) seen_iconst -> .

    /               reduce using rule 102 (seen_iconst -> .)
    *               reduce using rule 102 (seen_iconst -> .)
    -               reduce using rule 102 (seen_iconst -> .)
    +               reduce using rule 102 (seen_iconst -> .)
    <               reduce using rule 102 (seen_iconst -> .)
    >               reduce using rule 102 (seen_iconst -> .)
    DIFF            reduce using rule 102 (seen_iconst -> .)
    EQ              reduce using rule 102 (seen_iconst -> .)
    LTEQ            reduce using rule 102 (seen_iconst -> .)
    GTEQ            reduce using rule 102 (seen_iconst -> .)
    AND             reduce using rule 102 (seen_iconst -> .)
    OR              reduce using rule 102 (seen_iconst -> .)
    ;               reduce using rule 102 (seen_iconst -> .)
    )               reduce using rule 102 (seen_iconst -> .)
    ,               reduce using rule 102 (seen_iconst -> .)
    ]               reduce using rule 102 (seen_iconst -> .)

    seen_iconst                    shift and go to state 168

state 124

    (110) constant -> FALSE . seen_false
    (105) seen_false -> .

    /               reduce using rule 105 (seen_false -> .)
    *               reduce using rule 105 (seen_false -> .)
    -               reduce using rule 105 (seen_false -> .)
    +               reduce using rule 105 (seen_false -> .)
    <               reduce using rule 105 (seen_false -> .)
    >               reduce using rule 105 (seen_false -> .)
    DIFF            reduce using rule 105 (seen_false -> .)
    EQ              reduce using rule 105 (seen_false -> .)
    LTEQ            reduce using rule 105 (seen_false -> .)
    GTEQ            reduce using rule 105 (seen_false -> .)
    AND             reduce using rule 105 (seen_false -> .)
    OR              reduce using rule 105 (seen_false -> .)
    ;               reduce using rule 105 (seen_false -> .)
    )               reduce using rule 105 (seen_false -> .)
    ,               reduce using rule 105 (seen_false -> .)
    ]               reduce using rule 105 (seen_false -> .)

    seen_false                     shift and go to state 169

state 125

    (109) constant -> TRUE . seen_true
    (104) seen_true -> .

    /               reduce using rule 104 (seen_true -> .)
    *               reduce using rule 104 (seen_true -> .)
    -               reduce using rule 104 (seen_true -> .)
    +               reduce using rule 104 (seen_true -> .)
    <               reduce using rule 104 (seen_true -> .)
    >               reduce using rule 104 (seen_true -> .)
    DIFF            reduce using rule 104 (seen_true -> .)
    EQ              reduce using rule 104 (seen_true -> .)
    LTEQ            reduce using rule 104 (seen_true -> .)
    GTEQ            reduce using rule 104 (seen_true -> .)
    AND             reduce using rule 104 (seen_true -> .)
    OR              reduce using rule 104 (seen_true -> .)
    ;               reduce using rule 104 (seen_true -> .)
    )               reduce using rule 104 (seen_true -> .)
    ,               reduce using rule 104 (seen_true -> .)
    ]               reduce using rule 104 (seen_true -> .)

    seen_true                      shift and go to state 170

state 126

    (93) factor -> ( seen_parentheses . hyperexpression )
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    sign                           shift and go to state 91
    signB                          shift and go to state 82
    hyperexpression                shift and go to state 171
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 127

    (154) return -> RETURN hyperexpression return_quadruple .

    ;               reduce using rule 154 (return -> RETURN hyperexpression return_quadruple .)


state 128

    (87) term -> factor seen_factor . termB
    (89) termB -> . / push_operator term
    (90) termB -> . * push_operator term
    (91) termB -> . empty
    (159) empty -> .

    /               shift and go to state 175
    *               shift and go to state 172
    -               reduce using rule 159 (empty -> .)
    +               reduce using rule 159 (empty -> .)
    <               reduce using rule 159 (empty -> .)
    >               reduce using rule 159 (empty -> .)
    DIFF            reduce using rule 159 (empty -> .)
    EQ              reduce using rule 159 (empty -> .)
    LTEQ            reduce using rule 159 (empty -> .)
    GTEQ            reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    ;               reduce using rule 159 (empty -> .)
    )               reduce using rule 159 (empty -> .)
    ,               reduce using rule 159 (empty -> .)
    ]               reduce using rule 159 (empty -> .)

    termB                          shift and go to state 173
    empty                          shift and go to state 174

state 129

    (94) factor -> funccall seen_factor_funccall .

    /               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    *               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    -               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    +               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    <               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    >               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    DIFF            reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    EQ              reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    LTEQ            reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    GTEQ            reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    AND             reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    OR              reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    ;               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    )               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    ,               reduce using rule 94 (factor -> funccall seen_factor_funccall .)
    ]               reduce using rule 94 (factor -> funccall seen_factor_funccall .)


state 130

    (68) hyperexpression -> superexpression hyperexpressionB .

    )               reduce using rule 68 (hyperexpression -> superexpression hyperexpressionB .)
    ;               reduce using rule 68 (hyperexpression -> superexpression hyperexpressionB .)
    ,               reduce using rule 68 (hyperexpression -> superexpression hyperexpressionB .)
    ]               reduce using rule 68 (hyperexpression -> superexpression hyperexpressionB .)


state 131

    (69) hyperexpressionB -> OR . push_operator hyperexpression
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 176

state 132

    (70) hyperexpressionB -> empty .

    ;               reduce using rule 70 (hyperexpressionB -> empty .)
    )               reduce using rule 70 (hyperexpressionB -> empty .)
    ,               reduce using rule 70 (hyperexpressionB -> empty .)
    ]               reduce using rule 70 (hyperexpressionB -> empty .)


state 133

    (144) funccall -> ID seen_a_factor_funccall . ( funccallB funccallC

    (               shift and go to state 177


state 134

    (95) factor -> ID seen_ID . dimensionsOpt
    (42) dimensionsOpt -> . dimensions
    (43) dimensionsOpt -> . empty
    (151) dimensions -> . [ hyperexpression ] dimensionsB
    (159) empty -> .

    [               shift and go to state 114
    /               reduce using rule 159 (empty -> .)
    *               reduce using rule 159 (empty -> .)
    -               reduce using rule 159 (empty -> .)
    +               reduce using rule 159 (empty -> .)
    <               reduce using rule 159 (empty -> .)
    >               reduce using rule 159 (empty -> .)
    DIFF            reduce using rule 159 (empty -> .)
    EQ              reduce using rule 159 (empty -> .)
    LTEQ            reduce using rule 159 (empty -> .)
    GTEQ            reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    ;               reduce using rule 159 (empty -> .)
    )               reduce using rule 159 (empty -> .)
    ,               reduce using rule 159 (empty -> .)
    ]               reduce using rule 159 (empty -> .)

    dimensions                     shift and go to state 113
    dimensionsOpt                  shift and go to state 178
    empty                          shift and go to state 116

state 135

    (82) exp -> term seen_term . expB
    (84) expB -> . - push_operator exp
    (85) expB -> . + push_operator exp
    (86) expB -> . empty
    (159) empty -> .

    -               shift and go to state 180
    +               shift and go to state 179
    <               reduce using rule 159 (empty -> .)
    >               reduce using rule 159 (empty -> .)
    DIFF            reduce using rule 159 (empty -> .)
    EQ              reduce using rule 159 (empty -> .)
    LTEQ            reduce using rule 159 (empty -> .)
    GTEQ            reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    ;               reduce using rule 159 (empty -> .)
    )               reduce using rule 159 (empty -> .)
    ,               reduce using rule 159 (empty -> .)
    ]               reduce using rule 159 (empty -> .)

    expB                           shift and go to state 181
    empty                          shift and go to state 182

state 136

    (80) expressionB -> GTEQ . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 183

state 137

    (79) expressionB -> LTEQ . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 184

state 138

    (74) expression -> exp expressionB .

    AND             reduce using rule 74 (expression -> exp expressionB .)
    OR              reduce using rule 74 (expression -> exp expressionB .)
    ]               reduce using rule 74 (expression -> exp expressionB .)
    ;               reduce using rule 74 (expression -> exp expressionB .)
    )               reduce using rule 74 (expression -> exp expressionB .)
    ,               reduce using rule 74 (expression -> exp expressionB .)


state 139

    (77) expressionB -> DIFF . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 185

state 140

    (78) expressionB -> EQ . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 186

state 141

    (75) expressionB -> < . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 187

state 142

    (81) expressionB -> empty .

    AND             reduce using rule 81 (expressionB -> empty .)
    OR              reduce using rule 81 (expressionB -> empty .)
    ;               reduce using rule 81 (expressionB -> empty .)
    )               reduce using rule 81 (expressionB -> empty .)
    ,               reduce using rule 81 (expressionB -> empty .)
    ]               reduce using rule 81 (expressionB -> empty .)


state 143

    (76) expressionB -> > . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 188

state 144

    (72) superexpressionB -> AND . push_operator superexpression
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 189

state 145

    (71) superexpression -> expression superexpressionB .

    OR              reduce using rule 71 (superexpression -> expression superexpressionB .)
    ;               reduce using rule 71 (superexpression -> expression superexpressionB .)
    )               reduce using rule 71 (superexpression -> expression superexpressionB .)
    ,               reduce using rule 71 (superexpression -> expression superexpressionB .)
    ]               reduce using rule 71 (superexpression -> expression superexpressionB .)


state 146

    (73) superexpressionB -> empty .

    OR              reduce using rule 73 (superexpressionB -> empty .)
    ;               reduce using rule 73 (superexpressionB -> empty .)
    )               reduce using rule 73 (superexpressionB -> empty .)
    ,               reduce using rule 73 (superexpressionB -> empty .)
    ]               reduce using rule 73 (superexpressionB -> empty .)


state 147

    (127) read -> READ ( validate_id . push_operand read_quadruple readB )
    (21) push_operand -> .

    ,               reduce using rule 21 (push_operand -> .)
    )               reduce using rule 21 (push_operand -> .)

    push_operand                   shift and go to state 190

state 148

    (128) validate_id -> ID .

    ,               reduce using rule 128 (validate_id -> ID .)
    )               reduce using rule 128 (validate_id -> ID .)


state 149

    (113) whileloop -> WHILE init_while ( . hyperexpression ) while_quadruple block endwhile_quadruple
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    signB                          shift and go to state 82
    hyperexpression                shift and go to state 191
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 150

    (133) outputB -> hyperexpression . print_quadruple outputC
    (134) print_quadruple -> .

    )               reduce using rule 134 (print_quadruple -> .)
    ,               reduce using rule 134 (print_quadruple -> .)

    print_quadruple                shift and go to state 192

state 151

    (132) output -> PRINT ( outputB .

    ;               reduce using rule 132 (output -> PRINT ( outputB .)


state 152

    (140) localmsgdirective -> # SHOW SCONST .

    ID              reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    PRINT           reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    RETURN          reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    READ            reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    IF              reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    WHILE           reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    FOR             reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    INT             reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    FLOAT           reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    STRING          reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    BOOL            reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    #               reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    TRACKDECISION   reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    FORGETDECISION  reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)
    }               reduce using rule 140 (localmsgdirective -> # SHOW SCONST .)


state 153

    (137) localvardirective -> # localvardirectiveB ID .

    ID              reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    PRINT           reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    RETURN          reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    READ            reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    IF              reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    WHILE           reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    FOR             reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    INT             reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    FLOAT           reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    STRING          reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    BOOL            reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    #               reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    TRACKDECISION   reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    FORGETDECISION  reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)
    }               reduce using rule 137 (localvardirective -> # localvardirectiveB ID .)


state 154

    (40) assign -> ID . push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign
    (21) push_operand -> .

    [               reduce using rule 21 (push_operand -> .)
    =               reduce using rule 21 (push_operand -> .)

    push_operand                   shift and go to state 193

state 155

    (123) forloop -> FOR ( assign . ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple

    ;               shift and go to state 194


state 156

    (59) assignfunccall -> ID seen_funccall push_operand . assignfunccallB
    (62) assignfunccallB -> . ( pop_operand seen_a_funccall funccallB funccallC
    (63) assignfunccallB -> . assignB
    (41) assignB -> . dimensionsOpt = push_operator hyperexpression quadruple_assign
    (42) dimensionsOpt -> . dimensions
    (43) dimensionsOpt -> . empty
    (151) dimensions -> . [ hyperexpression ] dimensionsB
    (159) empty -> .

    (               shift and go to state 196
    [               shift and go to state 114
    =               reduce using rule 159 (empty -> .)

    dimensions                     shift and go to state 113
    assignfunccallB                shift and go to state 195
    assignB                        shift and go to state 197
    dimensionsOpt                  shift and go to state 198
    empty                          shift and go to state 116

state 157

    (44) condition -> IF ( hyperexpression . condition_quadruple ) block else endcondition_quadruple
    (47) condition_quadruple -> .

    )               reduce using rule 47 (condition_quadruple -> .)

    condition_quadruple            shift and go to state 199

state 158

    (34) func -> DEF returntype ID ( paramsOpt . )

    )               shift and go to state 200


state 159

    (35) paramsOpt -> params . paramsB
    (157) paramsB -> . , params paramsB
    (158) paramsB -> . empty
    (159) empty -> .

    ,               shift and go to state 202
    )               reduce using rule 159 (empty -> .)

    paramsB                        shift and go to state 201
    empty                          shift and go to state 203

state 160

    (36) paramsOpt -> empty .

    )               reduce using rule 36 (paramsOpt -> empty .)


state 161

    (156) params -> type . ID

    ID              shift and go to state 204


state 162

    (151) dimensions -> [ hyperexpression . ] dimensionsB

    ]               shift and go to state 205


state 163

    (27) declarationC -> , repush_type declarationB . declarationC
    (26) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (27) declarationC -> . , repush_type declarationB declarationC
    (28) declarationC -> . ;

    =               shift and go to state 80
    ,               shift and go to state 77
    ;               shift and go to state 78

    declarationC                   shift and go to state 206

state 164

    (26) declarationC -> = push_operator hyperexpression . quadruple_assign declarationD
    (25) quadruple_assign -> .

    ,               reduce using rule 25 (quadruple_assign -> .)
    ;               reduce using rule 25 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 207

state 165

    (31) main -> MAIN ( ) seen_main block .

    DEF             reduce using rule 31 (main -> MAIN ( ) seen_main block .)
    $end            reduce using rule 31 (main -> MAIN ( ) seen_main block .)


state 166

    (106) constant -> FCONST seen_fconst .

    /               reduce using rule 106 (constant -> FCONST seen_fconst .)
    *               reduce using rule 106 (constant -> FCONST seen_fconst .)
    -               reduce using rule 106 (constant -> FCONST seen_fconst .)
    +               reduce using rule 106 (constant -> FCONST seen_fconst .)
    <               reduce using rule 106 (constant -> FCONST seen_fconst .)
    >               reduce using rule 106 (constant -> FCONST seen_fconst .)
    DIFF            reduce using rule 106 (constant -> FCONST seen_fconst .)
    EQ              reduce using rule 106 (constant -> FCONST seen_fconst .)
    LTEQ            reduce using rule 106 (constant -> FCONST seen_fconst .)
    GTEQ            reduce using rule 106 (constant -> FCONST seen_fconst .)
    AND             reduce using rule 106 (constant -> FCONST seen_fconst .)
    OR              reduce using rule 106 (constant -> FCONST seen_fconst .)
    ;               reduce using rule 106 (constant -> FCONST seen_fconst .)
    )               reduce using rule 106 (constant -> FCONST seen_fconst .)
    ,               reduce using rule 106 (constant -> FCONST seen_fconst .)
    ]               reduce using rule 106 (constant -> FCONST seen_fconst .)


state 167

    (108) constant -> SCONST seen_sconst .

    /               reduce using rule 108 (constant -> SCONST seen_sconst .)
    *               reduce using rule 108 (constant -> SCONST seen_sconst .)
    -               reduce using rule 108 (constant -> SCONST seen_sconst .)
    +               reduce using rule 108 (constant -> SCONST seen_sconst .)
    <               reduce using rule 108 (constant -> SCONST seen_sconst .)
    >               reduce using rule 108 (constant -> SCONST seen_sconst .)
    DIFF            reduce using rule 108 (constant -> SCONST seen_sconst .)
    EQ              reduce using rule 108 (constant -> SCONST seen_sconst .)
    LTEQ            reduce using rule 108 (constant -> SCONST seen_sconst .)
    GTEQ            reduce using rule 108 (constant -> SCONST seen_sconst .)
    AND             reduce using rule 108 (constant -> SCONST seen_sconst .)
    OR              reduce using rule 108 (constant -> SCONST seen_sconst .)
    ;               reduce using rule 108 (constant -> SCONST seen_sconst .)
    )               reduce using rule 108 (constant -> SCONST seen_sconst .)
    ,               reduce using rule 108 (constant -> SCONST seen_sconst .)
    ]               reduce using rule 108 (constant -> SCONST seen_sconst .)


state 168

    (107) constant -> ICONST seen_iconst .

    /               reduce using rule 107 (constant -> ICONST seen_iconst .)
    *               reduce using rule 107 (constant -> ICONST seen_iconst .)
    -               reduce using rule 107 (constant -> ICONST seen_iconst .)
    +               reduce using rule 107 (constant -> ICONST seen_iconst .)
    <               reduce using rule 107 (constant -> ICONST seen_iconst .)
    >               reduce using rule 107 (constant -> ICONST seen_iconst .)
    DIFF            reduce using rule 107 (constant -> ICONST seen_iconst .)
    EQ              reduce using rule 107 (constant -> ICONST seen_iconst .)
    LTEQ            reduce using rule 107 (constant -> ICONST seen_iconst .)
    GTEQ            reduce using rule 107 (constant -> ICONST seen_iconst .)
    AND             reduce using rule 107 (constant -> ICONST seen_iconst .)
    OR              reduce using rule 107 (constant -> ICONST seen_iconst .)
    ;               reduce using rule 107 (constant -> ICONST seen_iconst .)
    )               reduce using rule 107 (constant -> ICONST seen_iconst .)
    ,               reduce using rule 107 (constant -> ICONST seen_iconst .)
    ]               reduce using rule 107 (constant -> ICONST seen_iconst .)


state 169

    (110) constant -> FALSE seen_false .

    /               reduce using rule 110 (constant -> FALSE seen_false .)
    *               reduce using rule 110 (constant -> FALSE seen_false .)
    -               reduce using rule 110 (constant -> FALSE seen_false .)
    +               reduce using rule 110 (constant -> FALSE seen_false .)
    <               reduce using rule 110 (constant -> FALSE seen_false .)
    >               reduce using rule 110 (constant -> FALSE seen_false .)
    DIFF            reduce using rule 110 (constant -> FALSE seen_false .)
    EQ              reduce using rule 110 (constant -> FALSE seen_false .)
    LTEQ            reduce using rule 110 (constant -> FALSE seen_false .)
    GTEQ            reduce using rule 110 (constant -> FALSE seen_false .)
    AND             reduce using rule 110 (constant -> FALSE seen_false .)
    OR              reduce using rule 110 (constant -> FALSE seen_false .)
    ;               reduce using rule 110 (constant -> FALSE seen_false .)
    )               reduce using rule 110 (constant -> FALSE seen_false .)
    ,               reduce using rule 110 (constant -> FALSE seen_false .)
    ]               reduce using rule 110 (constant -> FALSE seen_false .)


state 170

    (109) constant -> TRUE seen_true .

    /               reduce using rule 109 (constant -> TRUE seen_true .)
    *               reduce using rule 109 (constant -> TRUE seen_true .)
    -               reduce using rule 109 (constant -> TRUE seen_true .)
    +               reduce using rule 109 (constant -> TRUE seen_true .)
    <               reduce using rule 109 (constant -> TRUE seen_true .)
    >               reduce using rule 109 (constant -> TRUE seen_true .)
    DIFF            reduce using rule 109 (constant -> TRUE seen_true .)
    EQ              reduce using rule 109 (constant -> TRUE seen_true .)
    LTEQ            reduce using rule 109 (constant -> TRUE seen_true .)
    GTEQ            reduce using rule 109 (constant -> TRUE seen_true .)
    AND             reduce using rule 109 (constant -> TRUE seen_true .)
    OR              reduce using rule 109 (constant -> TRUE seen_true .)
    ;               reduce using rule 109 (constant -> TRUE seen_true .)
    )               reduce using rule 109 (constant -> TRUE seen_true .)
    ,               reduce using rule 109 (constant -> TRUE seen_true .)
    ]               reduce using rule 109 (constant -> TRUE seen_true .)


state 171

    (93) factor -> ( seen_parentheses hyperexpression . )

    )               shift and go to state 208


state 172

    (90) termB -> * . push_operator term
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 209

state 173

    (87) term -> factor seen_factor termB .

    -               reduce using rule 87 (term -> factor seen_factor termB .)
    +               reduce using rule 87 (term -> factor seen_factor termB .)
    <               reduce using rule 87 (term -> factor seen_factor termB .)
    >               reduce using rule 87 (term -> factor seen_factor termB .)
    DIFF            reduce using rule 87 (term -> factor seen_factor termB .)
    EQ              reduce using rule 87 (term -> factor seen_factor termB .)
    LTEQ            reduce using rule 87 (term -> factor seen_factor termB .)
    GTEQ            reduce using rule 87 (term -> factor seen_factor termB .)
    AND             reduce using rule 87 (term -> factor seen_factor termB .)
    OR              reduce using rule 87 (term -> factor seen_factor termB .)
    )               reduce using rule 87 (term -> factor seen_factor termB .)
    ,               reduce using rule 87 (term -> factor seen_factor termB .)
    ;               reduce using rule 87 (term -> factor seen_factor termB .)
    ]               reduce using rule 87 (term -> factor seen_factor termB .)


state 174

    (91) termB -> empty .

    -               reduce using rule 91 (termB -> empty .)
    +               reduce using rule 91 (termB -> empty .)
    <               reduce using rule 91 (termB -> empty .)
    >               reduce using rule 91 (termB -> empty .)
    DIFF            reduce using rule 91 (termB -> empty .)
    EQ              reduce using rule 91 (termB -> empty .)
    LTEQ            reduce using rule 91 (termB -> empty .)
    GTEQ            reduce using rule 91 (termB -> empty .)
    AND             reduce using rule 91 (termB -> empty .)
    OR              reduce using rule 91 (termB -> empty .)
    ;               reduce using rule 91 (termB -> empty .)
    )               reduce using rule 91 (termB -> empty .)
    ,               reduce using rule 91 (termB -> empty .)
    ]               reduce using rule 91 (termB -> empty .)


state 175

    (89) termB -> / . push_operator term
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 210

state 176

    (69) hyperexpressionB -> OR push_operator . hyperexpression
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    sign                           shift and go to state 91
    signB                          shift and go to state 82
    hyperexpression                shift and go to state 211
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 177

    (144) funccall -> ID seen_a_factor_funccall ( . funccallB funccallC
    (146) funccallB -> . hyperexpression seen_param
    (147) funccallB -> . empty
    (68) hyperexpression -> . superexpression hyperexpressionB
    (159) empty -> .
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -

    ,               reduce using rule 159 (empty -> .)
    )               reduce using rule 159 (empty -> .)
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85

    funccallB                      shift and go to state 212
    signB                          shift and go to state 82
    hyperexpression                shift and go to state 213
    factor                         shift and go to state 87
    empty                          shift and go to state 214
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 178

    (95) factor -> ID seen_ID dimensionsOpt .

    /               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    *               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    -               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    +               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    <               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    >               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    DIFF            reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    EQ              reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    LTEQ            reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    GTEQ            reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    AND             reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    OR              reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    ;               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    )               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    ,               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)
    ]               reduce using rule 95 (factor -> ID seen_ID dimensionsOpt .)


state 179

    (85) expB -> + . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 215

state 180

    (84) expB -> - . push_operator exp
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 216

state 181

    (82) exp -> term seen_term expB .

    AND             reduce using rule 82 (exp -> term seen_term expB .)
    OR              reduce using rule 82 (exp -> term seen_term expB .)
    ;               reduce using rule 82 (exp -> term seen_term expB .)
    )               reduce using rule 82 (exp -> term seen_term expB .)
    ,               reduce using rule 82 (exp -> term seen_term expB .)
    ]               reduce using rule 82 (exp -> term seen_term expB .)
    <               reduce using rule 82 (exp -> term seen_term expB .)
    >               reduce using rule 82 (exp -> term seen_term expB .)
    DIFF            reduce using rule 82 (exp -> term seen_term expB .)
    EQ              reduce using rule 82 (exp -> term seen_term expB .)
    LTEQ            reduce using rule 82 (exp -> term seen_term expB .)
    GTEQ            reduce using rule 82 (exp -> term seen_term expB .)


state 182

    (86) expB -> empty .

    <               reduce using rule 86 (expB -> empty .)
    >               reduce using rule 86 (expB -> empty .)
    DIFF            reduce using rule 86 (expB -> empty .)
    EQ              reduce using rule 86 (expB -> empty .)
    LTEQ            reduce using rule 86 (expB -> empty .)
    GTEQ            reduce using rule 86 (expB -> empty .)
    AND             reduce using rule 86 (expB -> empty .)
    OR              reduce using rule 86 (expB -> empty .)
    ;               reduce using rule 86 (expB -> empty .)
    )               reduce using rule 86 (expB -> empty .)
    ,               reduce using rule 86 (expB -> empty .)
    ]               reduce using rule 86 (expB -> empty .)


state 183

    (80) expressionB -> GTEQ push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    term                           shift and go to state 93
    funccall                       shift and go to state 89
    signB                          shift and go to state 82
    sign                           shift and go to state 91
    empty                          shift and go to state 88
    exp                            shift and go to state 217
    factor                         shift and go to state 87

state 184

    (79) expressionB -> LTEQ push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    term                           shift and go to state 93
    funccall                       shift and go to state 89
    signB                          shift and go to state 82
    sign                           shift and go to state 91
    empty                          shift and go to state 88
    exp                            shift and go to state 218
    factor                         shift and go to state 87

state 185

    (77) expressionB -> DIFF push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    term                           shift and go to state 93
    funccall                       shift and go to state 89
    signB                          shift and go to state 82
    sign                           shift and go to state 91
    empty                          shift and go to state 88
    exp                            shift and go to state 219
    factor                         shift and go to state 87

state 186

    (78) expressionB -> EQ push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    term                           shift and go to state 93
    funccall                       shift and go to state 89
    signB                          shift and go to state 82
    sign                           shift and go to state 91
    empty                          shift and go to state 88
    exp                            shift and go to state 220
    factor                         shift and go to state 87

state 187

    (75) expressionB -> < push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    term                           shift and go to state 93
    funccall                       shift and go to state 89
    signB                          shift and go to state 82
    sign                           shift and go to state 91
    empty                          shift and go to state 88
    exp                            shift and go to state 221
    factor                         shift and go to state 87

state 188

    (76) expressionB -> > push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    term                           shift and go to state 93
    funccall                       shift and go to state 89
    signB                          shift and go to state 82
    sign                           shift and go to state 91
    empty                          shift and go to state 88
    exp                            shift and go to state 222
    factor                         shift and go to state 87

state 189

    (72) superexpressionB -> AND push_operator . superexpression
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    sign                           shift and go to state 91
    signB                          shift and go to state 82
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 223
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 190

    (127) read -> READ ( validate_id push_operand . read_quadruple readB )
    (129) read_quadruple -> .

    ,               reduce using rule 129 (read_quadruple -> .)
    )               reduce using rule 129 (read_quadruple -> .)

    read_quadruple                 shift and go to state 224

state 191

    (113) whileloop -> WHILE init_while ( hyperexpression . ) while_quadruple block endwhile_quadruple

    )               shift and go to state 225


state 192

    (133) outputB -> hyperexpression print_quadruple . outputC
    (135) outputC -> . )
    (136) outputC -> . , outputB

    )               shift and go to state 226
    ,               shift and go to state 227

    outputC                        shift and go to state 228

state 193

    (40) assign -> ID push_operand . dimensionsOpt = push_operator hyperexpression quadruple_assign
    (42) dimensionsOpt -> . dimensions
    (43) dimensionsOpt -> . empty
    (151) dimensions -> . [ hyperexpression ] dimensionsB
    (159) empty -> .

    [               shift and go to state 114
    =               reduce using rule 159 (empty -> .)

    dimensions                     shift and go to state 113
    dimensionsOpt                  shift and go to state 229
    empty                          shift and go to state 116

state 194

    (123) forloop -> FOR ( assign ; . init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (114) init_while -> .

    (               reduce using rule 114 (init_while -> .)
    ID              reduce using rule 114 (init_while -> .)
    +               reduce using rule 114 (init_while -> .)
    -               reduce using rule 114 (init_while -> .)
    FCONST          reduce using rule 114 (init_while -> .)
    ICONST          reduce using rule 114 (init_while -> .)
    SCONST          reduce using rule 114 (init_while -> .)
    TRUE            reduce using rule 114 (init_while -> .)
    FALSE           reduce using rule 114 (init_while -> .)

    init_while                     shift and go to state 230

state 195

    (59) assignfunccall -> ID seen_funccall push_operand assignfunccallB .

    ;               reduce using rule 59 (assignfunccall -> ID seen_funccall push_operand assignfunccallB .)


state 196

    (62) assignfunccallB -> ( . pop_operand seen_a_funccall funccallB funccallC
    (61) pop_operand -> .

    (               reduce using rule 61 (pop_operand -> .)
    ID              reduce using rule 61 (pop_operand -> .)
    +               reduce using rule 61 (pop_operand -> .)
    -               reduce using rule 61 (pop_operand -> .)
    ,               reduce using rule 61 (pop_operand -> .)
    )               reduce using rule 61 (pop_operand -> .)
    FCONST          reduce using rule 61 (pop_operand -> .)
    ICONST          reduce using rule 61 (pop_operand -> .)
    SCONST          reduce using rule 61 (pop_operand -> .)
    TRUE            reduce using rule 61 (pop_operand -> .)
    FALSE           reduce using rule 61 (pop_operand -> .)

    pop_operand                    shift and go to state 231

state 197

    (63) assignfunccallB -> assignB .

    ;               reduce using rule 63 (assignfunccallB -> assignB .)


state 198

    (41) assignB -> dimensionsOpt . = push_operator hyperexpression quadruple_assign

    =               shift and go to state 232


state 199

    (44) condition -> IF ( hyperexpression condition_quadruple . ) block else endcondition_quadruple

    )               shift and go to state 233


state 200

    (34) func -> DEF returntype ID ( paramsOpt ) .

    {               reduce using rule 34 (func -> DEF returntype ID ( paramsOpt ) .)


state 201

    (35) paramsOpt -> params paramsB .

    )               reduce using rule 35 (paramsOpt -> params paramsB .)


state 202

    (157) paramsB -> , . params paramsB
    (156) params -> . type ID
    (117) type -> . INT
    (118) type -> . FLOAT
    (119) type -> . STRING
    (120) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 16
    BOOL            shift and go to state 19

    type                           shift and go to state 161
    params                         shift and go to state 234

state 203

    (158) paramsB -> empty .

    )               reduce using rule 158 (paramsB -> empty .)


state 204

    (156) params -> type ID .

    ,               reduce using rule 156 (params -> type ID .)
    )               reduce using rule 156 (params -> type ID .)


state 205

    (151) dimensions -> [ hyperexpression ] . dimensionsB
    (152) dimensionsB -> . [ hyperexpression ]
    (153) dimensionsB -> . empty
    (159) empty -> .

    [               shift and go to state 236
    =               reduce using rule 159 (empty -> .)
    ,               reduce using rule 159 (empty -> .)
    ;               reduce using rule 159 (empty -> .)
    /               reduce using rule 159 (empty -> .)
    *               reduce using rule 159 (empty -> .)
    -               reduce using rule 159 (empty -> .)
    +               reduce using rule 159 (empty -> .)
    <               reduce using rule 159 (empty -> .)
    >               reduce using rule 159 (empty -> .)
    DIFF            reduce using rule 159 (empty -> .)
    EQ              reduce using rule 159 (empty -> .)
    LTEQ            reduce using rule 159 (empty -> .)
    GTEQ            reduce using rule 159 (empty -> .)
    AND             reduce using rule 159 (empty -> .)
    OR              reduce using rule 159 (empty -> .)
    )               reduce using rule 159 (empty -> .)
    ]               reduce using rule 159 (empty -> .)

    dimensionsB                    shift and go to state 235
    empty                          shift and go to state 237

state 206

    (27) declarationC -> , repush_type declarationB declarationC .

    INT             reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    FLOAT           reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    STRING          reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    BOOL            reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    DEF             reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    MAIN            reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    ID              reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    PRINT           reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    RETURN          reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    READ            reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    IF              reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    WHILE           reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    FOR             reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    #               reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)
    }               reduce using rule 27 (declarationC -> , repush_type declarationB declarationC .)


state 207

    (26) declarationC -> = push_operator hyperexpression quadruple_assign . declarationD
    (29) declarationD -> . , repush_type declarationB declarationC
    (30) declarationD -> . ;

    ,               shift and go to state 238
    ;               shift and go to state 239

    declarationD                   shift and go to state 240

state 208

    (93) factor -> ( seen_parentheses hyperexpression ) .

    /               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    *               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    -               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    +               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    <               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    >               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    DIFF            reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    EQ              reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    LTEQ            reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    GTEQ            reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    AND             reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    OR              reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    ;               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    )               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    ,               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)
    ]               reduce using rule 93 (factor -> ( seen_parentheses hyperexpression ) .)


state 209

    (90) termB -> * push_operator . term
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    term                           shift and go to state 241
    funccall                       shift and go to state 89
    signB                          shift and go to state 82
    sign                           shift and go to state 91
    empty                          shift and go to state 88
    factor                         shift and go to state 87

state 210

    (89) termB -> / push_operator . term
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    term                           shift and go to state 242
    funccall                       shift and go to state 89
    signB                          shift and go to state 82
    sign                           shift and go to state 91
    empty                          shift and go to state 88
    factor                         shift and go to state 87

state 211

    (69) hyperexpressionB -> OR push_operator hyperexpression .

    ;               reduce using rule 69 (hyperexpressionB -> OR push_operator hyperexpression .)
    )               reduce using rule 69 (hyperexpressionB -> OR push_operator hyperexpression .)
    ,               reduce using rule 69 (hyperexpressionB -> OR push_operator hyperexpression .)
    ]               reduce using rule 69 (hyperexpressionB -> OR push_operator hyperexpression .)


state 212

    (144) funccall -> ID seen_a_factor_funccall ( funccallB . funccallC
    (149) funccallC -> . , funccallB funccallC
    (150) funccallC -> . )

    ,               shift and go to state 245
    )               shift and go to state 244

    funccallC                      shift and go to state 243

state 213

    (146) funccallB -> hyperexpression . seen_param
    (148) seen_param -> .

    ,               reduce using rule 148 (seen_param -> .)
    )               reduce using rule 148 (seen_param -> .)

    seen_param                     shift and go to state 246

state 214

    (147) funccallB -> empty .
    (100) signB -> empty .

    ,               reduce using rule 147 (funccallB -> empty .)
    )               reduce using rule 147 (funccallB -> empty .)
    FCONST          reduce using rule 100 (signB -> empty .)
    ICONST          reduce using rule 100 (signB -> empty .)
    SCONST          reduce using rule 100 (signB -> empty .)
    TRUE            reduce using rule 100 (signB -> empty .)
    FALSE           reduce using rule 100 (signB -> empty .)


state 215

    (85) expB -> + push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    term                           shift and go to state 93
    funccall                       shift and go to state 89
    signB                          shift and go to state 82
    sign                           shift and go to state 91
    empty                          shift and go to state 88
    exp                            shift and go to state 247
    factor                         shift and go to state 87

state 216

    (84) expB -> - push_operator . exp
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    term                           shift and go to state 93
    funccall                       shift and go to state 89
    signB                          shift and go to state 82
    sign                           shift and go to state 91
    empty                          shift and go to state 88
    exp                            shift and go to state 248
    factor                         shift and go to state 87

state 217

    (80) expressionB -> GTEQ push_operator exp .

    AND             reduce using rule 80 (expressionB -> GTEQ push_operator exp .)
    OR              reduce using rule 80 (expressionB -> GTEQ push_operator exp .)
    ;               reduce using rule 80 (expressionB -> GTEQ push_operator exp .)
    )               reduce using rule 80 (expressionB -> GTEQ push_operator exp .)
    ,               reduce using rule 80 (expressionB -> GTEQ push_operator exp .)
    ]               reduce using rule 80 (expressionB -> GTEQ push_operator exp .)


state 218

    (79) expressionB -> LTEQ push_operator exp .

    AND             reduce using rule 79 (expressionB -> LTEQ push_operator exp .)
    OR              reduce using rule 79 (expressionB -> LTEQ push_operator exp .)
    ;               reduce using rule 79 (expressionB -> LTEQ push_operator exp .)
    )               reduce using rule 79 (expressionB -> LTEQ push_operator exp .)
    ,               reduce using rule 79 (expressionB -> LTEQ push_operator exp .)
    ]               reduce using rule 79 (expressionB -> LTEQ push_operator exp .)


state 219

    (77) expressionB -> DIFF push_operator exp .

    AND             reduce using rule 77 (expressionB -> DIFF push_operator exp .)
    OR              reduce using rule 77 (expressionB -> DIFF push_operator exp .)
    ;               reduce using rule 77 (expressionB -> DIFF push_operator exp .)
    )               reduce using rule 77 (expressionB -> DIFF push_operator exp .)
    ,               reduce using rule 77 (expressionB -> DIFF push_operator exp .)
    ]               reduce using rule 77 (expressionB -> DIFF push_operator exp .)


state 220

    (78) expressionB -> EQ push_operator exp .

    AND             reduce using rule 78 (expressionB -> EQ push_operator exp .)
    OR              reduce using rule 78 (expressionB -> EQ push_operator exp .)
    ;               reduce using rule 78 (expressionB -> EQ push_operator exp .)
    )               reduce using rule 78 (expressionB -> EQ push_operator exp .)
    ,               reduce using rule 78 (expressionB -> EQ push_operator exp .)
    ]               reduce using rule 78 (expressionB -> EQ push_operator exp .)


state 221

    (75) expressionB -> < push_operator exp .

    AND             reduce using rule 75 (expressionB -> < push_operator exp .)
    OR              reduce using rule 75 (expressionB -> < push_operator exp .)
    ;               reduce using rule 75 (expressionB -> < push_operator exp .)
    )               reduce using rule 75 (expressionB -> < push_operator exp .)
    ,               reduce using rule 75 (expressionB -> < push_operator exp .)
    ]               reduce using rule 75 (expressionB -> < push_operator exp .)


state 222

    (76) expressionB -> > push_operator exp .

    AND             reduce using rule 76 (expressionB -> > push_operator exp .)
    OR              reduce using rule 76 (expressionB -> > push_operator exp .)
    ;               reduce using rule 76 (expressionB -> > push_operator exp .)
    )               reduce using rule 76 (expressionB -> > push_operator exp .)
    ,               reduce using rule 76 (expressionB -> > push_operator exp .)
    ]               reduce using rule 76 (expressionB -> > push_operator exp .)


state 223

    (72) superexpressionB -> AND push_operator superexpression .

    OR              reduce using rule 72 (superexpressionB -> AND push_operator superexpression .)
    ;               reduce using rule 72 (superexpressionB -> AND push_operator superexpression .)
    )               reduce using rule 72 (superexpressionB -> AND push_operator superexpression .)
    ,               reduce using rule 72 (superexpressionB -> AND push_operator superexpression .)
    ]               reduce using rule 72 (superexpressionB -> AND push_operator superexpression .)


state 224

    (127) read -> READ ( validate_id push_operand read_quadruple . readB )
    (130) readB -> . , validate_id push_operand read_quadruple readB
    (131) readB -> . empty
    (159) empty -> .

    ,               shift and go to state 250
    )               reduce using rule 159 (empty -> .)

    readB                          shift and go to state 249
    empty                          shift and go to state 251

state 225

    (113) whileloop -> WHILE init_while ( hyperexpression ) . while_quadruple block endwhile_quadruple
    (115) while_quadruple -> .

    {               reduce using rule 115 (while_quadruple -> .)

    while_quadruple                shift and go to state 252

state 226

    (135) outputC -> ) .

    ;               reduce using rule 135 (outputC -> ) .)


state 227

    (136) outputC -> , . outputB
    (133) outputB -> . hyperexpression print_quadruple outputC
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    signB                          shift and go to state 82
    hyperexpression                shift and go to state 150
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    outputB                        shift and go to state 253
    expression                     shift and go to state 95

state 228

    (133) outputB -> hyperexpression print_quadruple outputC .

    ;               reduce using rule 133 (outputB -> hyperexpression print_quadruple outputC .)


state 229

    (40) assign -> ID push_operand dimensionsOpt . = push_operator hyperexpression quadruple_assign

    =               shift and go to state 254


state 230

    (123) forloop -> FOR ( assign ; init_while . hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    signB                          shift and go to state 82
    hyperexpression                shift and go to state 255
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 231

    (62) assignfunccallB -> ( pop_operand . seen_a_funccall funccallB funccallC
    (64) seen_a_funccall -> .

    (               reduce using rule 64 (seen_a_funccall -> .)
    ID              reduce using rule 64 (seen_a_funccall -> .)
    +               reduce using rule 64 (seen_a_funccall -> .)
    -               reduce using rule 64 (seen_a_funccall -> .)
    ,               reduce using rule 64 (seen_a_funccall -> .)
    )               reduce using rule 64 (seen_a_funccall -> .)
    FCONST          reduce using rule 64 (seen_a_funccall -> .)
    ICONST          reduce using rule 64 (seen_a_funccall -> .)
    SCONST          reduce using rule 64 (seen_a_funccall -> .)
    TRUE            reduce using rule 64 (seen_a_funccall -> .)
    FALSE           reduce using rule 64 (seen_a_funccall -> .)

    seen_a_funccall                shift and go to state 256

state 232

    (41) assignB -> dimensionsOpt = . push_operator hyperexpression quadruple_assign
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 257

state 233

    (44) condition -> IF ( hyperexpression condition_quadruple ) . block else endcondition_quadruple
    (37) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 258

state 234

    (157) paramsB -> , params . paramsB
    (157) paramsB -> . , params paramsB
    (158) paramsB -> . empty
    (159) empty -> .

    ,               shift and go to state 202
    )               reduce using rule 159 (empty -> .)

    paramsB                        shift and go to state 259
    empty                          shift and go to state 203

state 235

    (151) dimensions -> [ hyperexpression ] dimensionsB .

    =               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    ,               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    ;               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    /               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    *               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    -               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    +               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    <               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    >               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    DIFF            reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    EQ              reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    LTEQ            reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    GTEQ            reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    AND             reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    OR              reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    )               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)
    ]               reduce using rule 151 (dimensions -> [ hyperexpression ] dimensionsB .)


state 236

    (152) dimensionsB -> [ . hyperexpression ]
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    sign                           shift and go to state 91
    signB                          shift and go to state 82
    hyperexpression                shift and go to state 260
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 237

    (153) dimensionsB -> empty .

    =               reduce using rule 153 (dimensionsB -> empty .)
    ,               reduce using rule 153 (dimensionsB -> empty .)
    ;               reduce using rule 153 (dimensionsB -> empty .)
    /               reduce using rule 153 (dimensionsB -> empty .)
    *               reduce using rule 153 (dimensionsB -> empty .)
    -               reduce using rule 153 (dimensionsB -> empty .)
    +               reduce using rule 153 (dimensionsB -> empty .)
    <               reduce using rule 153 (dimensionsB -> empty .)
    >               reduce using rule 153 (dimensionsB -> empty .)
    DIFF            reduce using rule 153 (dimensionsB -> empty .)
    EQ              reduce using rule 153 (dimensionsB -> empty .)
    LTEQ            reduce using rule 153 (dimensionsB -> empty .)
    GTEQ            reduce using rule 153 (dimensionsB -> empty .)
    AND             reduce using rule 153 (dimensionsB -> empty .)
    OR              reduce using rule 153 (dimensionsB -> empty .)
    )               reduce using rule 153 (dimensionsB -> empty .)
    ]               reduce using rule 153 (dimensionsB -> empty .)


state 238

    (29) declarationD -> , . repush_type declarationB declarationC
    (23) repush_type -> .

    ID              reduce using rule 23 (repush_type -> .)

    repush_type                    shift and go to state 261

state 239

    (30) declarationD -> ; .

    INT             reduce using rule 30 (declarationD -> ; .)
    FLOAT           reduce using rule 30 (declarationD -> ; .)
    STRING          reduce using rule 30 (declarationD -> ; .)
    BOOL            reduce using rule 30 (declarationD -> ; .)
    DEF             reduce using rule 30 (declarationD -> ; .)
    MAIN            reduce using rule 30 (declarationD -> ; .)
    ID              reduce using rule 30 (declarationD -> ; .)
    PRINT           reduce using rule 30 (declarationD -> ; .)
    RETURN          reduce using rule 30 (declarationD -> ; .)
    READ            reduce using rule 30 (declarationD -> ; .)
    IF              reduce using rule 30 (declarationD -> ; .)
    WHILE           reduce using rule 30 (declarationD -> ; .)
    FOR             reduce using rule 30 (declarationD -> ; .)
    #               reduce using rule 30 (declarationD -> ; .)
    TRACKDECISION   reduce using rule 30 (declarationD -> ; .)
    FORGETDECISION  reduce using rule 30 (declarationD -> ; .)
    }               reduce using rule 30 (declarationD -> ; .)


state 240

    (26) declarationC -> = push_operator hyperexpression quadruple_assign declarationD .

    INT             reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FLOAT           reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    STRING          reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    BOOL            reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    DEF             reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    MAIN            reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    ID              reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    PRINT           reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    RETURN          reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    READ            reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    IF              reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    WHILE           reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FOR             reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    #               reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    TRACKDECISION   reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FORGETDECISION  reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    }               reduce using rule 26 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)


state 241

    (90) termB -> * push_operator term .

    -               reduce using rule 90 (termB -> * push_operator term .)
    +               reduce using rule 90 (termB -> * push_operator term .)
    <               reduce using rule 90 (termB -> * push_operator term .)
    >               reduce using rule 90 (termB -> * push_operator term .)
    DIFF            reduce using rule 90 (termB -> * push_operator term .)
    EQ              reduce using rule 90 (termB -> * push_operator term .)
    LTEQ            reduce using rule 90 (termB -> * push_operator term .)
    GTEQ            reduce using rule 90 (termB -> * push_operator term .)
    AND             reduce using rule 90 (termB -> * push_operator term .)
    OR              reduce using rule 90 (termB -> * push_operator term .)
    ;               reduce using rule 90 (termB -> * push_operator term .)
    )               reduce using rule 90 (termB -> * push_operator term .)
    ,               reduce using rule 90 (termB -> * push_operator term .)
    ]               reduce using rule 90 (termB -> * push_operator term .)


state 242

    (89) termB -> / push_operator term .

    -               reduce using rule 89 (termB -> / push_operator term .)
    +               reduce using rule 89 (termB -> / push_operator term .)
    <               reduce using rule 89 (termB -> / push_operator term .)
    >               reduce using rule 89 (termB -> / push_operator term .)
    DIFF            reduce using rule 89 (termB -> / push_operator term .)
    EQ              reduce using rule 89 (termB -> / push_operator term .)
    LTEQ            reduce using rule 89 (termB -> / push_operator term .)
    GTEQ            reduce using rule 89 (termB -> / push_operator term .)
    AND             reduce using rule 89 (termB -> / push_operator term .)
    OR              reduce using rule 89 (termB -> / push_operator term .)
    ;               reduce using rule 89 (termB -> / push_operator term .)
    )               reduce using rule 89 (termB -> / push_operator term .)
    ,               reduce using rule 89 (termB -> / push_operator term .)
    ]               reduce using rule 89 (termB -> / push_operator term .)


state 243

    (144) funccall -> ID seen_a_factor_funccall ( funccallB funccallC .

    /               reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    *               reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    -               reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    +               reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    <               reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    >               reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    DIFF            reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    EQ              reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    LTEQ            reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    GTEQ            reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    AND             reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    OR              reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    ;               reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    ,               reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    ]               reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)
    )               reduce using rule 144 (funccall -> ID seen_a_factor_funccall ( funccallB funccallC .)


state 244

    (150) funccallC -> ) .

    /               reduce using rule 150 (funccallC -> ) .)
    *               reduce using rule 150 (funccallC -> ) .)
    -               reduce using rule 150 (funccallC -> ) .)
    +               reduce using rule 150 (funccallC -> ) .)
    <               reduce using rule 150 (funccallC -> ) .)
    >               reduce using rule 150 (funccallC -> ) .)
    DIFF            reduce using rule 150 (funccallC -> ) .)
    EQ              reduce using rule 150 (funccallC -> ) .)
    LTEQ            reduce using rule 150 (funccallC -> ) .)
    GTEQ            reduce using rule 150 (funccallC -> ) .)
    AND             reduce using rule 150 (funccallC -> ) .)
    OR              reduce using rule 150 (funccallC -> ) .)
    ;               reduce using rule 150 (funccallC -> ) .)
    )               reduce using rule 150 (funccallC -> ) .)
    ,               reduce using rule 150 (funccallC -> ) .)
    ]               reduce using rule 150 (funccallC -> ) .)


state 245

    (149) funccallC -> , . funccallB funccallC
    (146) funccallB -> . hyperexpression seen_param
    (147) funccallB -> . empty
    (68) hyperexpression -> . superexpression hyperexpressionB
    (159) empty -> .
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -

    ,               reduce using rule 159 (empty -> .)
    )               reduce using rule 159 (empty -> .)
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85

    funccallB                      shift and go to state 262
    signB                          shift and go to state 82
    hyperexpression                shift and go to state 213
    factor                         shift and go to state 87
    empty                          shift and go to state 214
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 246

    (146) funccallB -> hyperexpression seen_param .

    ,               reduce using rule 146 (funccallB -> hyperexpression seen_param .)
    )               reduce using rule 146 (funccallB -> hyperexpression seen_param .)


state 247

    (85) expB -> + push_operator exp .

    <               reduce using rule 85 (expB -> + push_operator exp .)
    >               reduce using rule 85 (expB -> + push_operator exp .)
    DIFF            reduce using rule 85 (expB -> + push_operator exp .)
    EQ              reduce using rule 85 (expB -> + push_operator exp .)
    LTEQ            reduce using rule 85 (expB -> + push_operator exp .)
    GTEQ            reduce using rule 85 (expB -> + push_operator exp .)
    AND             reduce using rule 85 (expB -> + push_operator exp .)
    OR              reduce using rule 85 (expB -> + push_operator exp .)
    ;               reduce using rule 85 (expB -> + push_operator exp .)
    )               reduce using rule 85 (expB -> + push_operator exp .)
    ,               reduce using rule 85 (expB -> + push_operator exp .)
    ]               reduce using rule 85 (expB -> + push_operator exp .)


state 248

    (84) expB -> - push_operator exp .

    <               reduce using rule 84 (expB -> - push_operator exp .)
    >               reduce using rule 84 (expB -> - push_operator exp .)
    DIFF            reduce using rule 84 (expB -> - push_operator exp .)
    EQ              reduce using rule 84 (expB -> - push_operator exp .)
    LTEQ            reduce using rule 84 (expB -> - push_operator exp .)
    GTEQ            reduce using rule 84 (expB -> - push_operator exp .)
    AND             reduce using rule 84 (expB -> - push_operator exp .)
    OR              reduce using rule 84 (expB -> - push_operator exp .)
    ;               reduce using rule 84 (expB -> - push_operator exp .)
    )               reduce using rule 84 (expB -> - push_operator exp .)
    ,               reduce using rule 84 (expB -> - push_operator exp .)
    ]               reduce using rule 84 (expB -> - push_operator exp .)


state 249

    (127) read -> READ ( validate_id push_operand read_quadruple readB . )

    )               shift and go to state 263


state 250

    (130) readB -> , . validate_id push_operand read_quadruple readB
    (128) validate_id -> . ID

    ID              shift and go to state 148

    validate_id                    shift and go to state 264

state 251

    (131) readB -> empty .

    )               reduce using rule 131 (readB -> empty .)


state 252

    (113) whileloop -> WHILE init_while ( hyperexpression ) while_quadruple . block endwhile_quadruple
    (37) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 265

state 253

    (136) outputC -> , outputB .

    ;               reduce using rule 136 (outputC -> , outputB .)


state 254

    (40) assign -> ID push_operand dimensionsOpt = . push_operator hyperexpression quadruple_assign
    (24) push_operator -> .

    (               reduce using rule 24 (push_operator -> .)
    ID              reduce using rule 24 (push_operator -> .)
    +               reduce using rule 24 (push_operator -> .)
    -               reduce using rule 24 (push_operator -> .)
    FCONST          reduce using rule 24 (push_operator -> .)
    ICONST          reduce using rule 24 (push_operator -> .)
    SCONST          reduce using rule 24 (push_operator -> .)
    TRUE            reduce using rule 24 (push_operator -> .)
    FALSE           reduce using rule 24 (push_operator -> .)

    push_operator                  shift and go to state 266

state 255

    (123) forloop -> FOR ( assign ; init_while hyperexpression . for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (124) for_quadruple -> .

    ;               reduce using rule 124 (for_quadruple -> .)

    for_quadruple                  shift and go to state 267

state 256

    (62) assignfunccallB -> ( pop_operand seen_a_funccall . funccallB funccallC
    (146) funccallB -> . hyperexpression seen_param
    (147) funccallB -> . empty
    (68) hyperexpression -> . superexpression hyperexpressionB
    (159) empty -> .
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -

    ,               reduce using rule 159 (empty -> .)
    )               reduce using rule 159 (empty -> .)
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)
    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85

    funccallB                      shift and go to state 268
    signB                          shift and go to state 82
    hyperexpression                shift and go to state 213
    factor                         shift and go to state 87
    empty                          shift and go to state 214
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 257

    (41) assignB -> dimensionsOpt = push_operator . hyperexpression quadruple_assign
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    signB                          shift and go to state 82
    hyperexpression                shift and go to state 269
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 258

    (44) condition -> IF ( hyperexpression condition_quadruple ) block . else endcondition_quadruple
    (45) else -> . ELSE elsecondition_quadruple block
    (46) else -> . empty
    (159) empty -> .

    ELSE            shift and go to state 270
    ID              reduce using rule 159 (empty -> .)
    PRINT           reduce using rule 159 (empty -> .)
    RETURN          reduce using rule 159 (empty -> .)
    READ            reduce using rule 159 (empty -> .)
    IF              reduce using rule 159 (empty -> .)
    WHILE           reduce using rule 159 (empty -> .)
    FOR             reduce using rule 159 (empty -> .)
    INT             reduce using rule 159 (empty -> .)
    FLOAT           reduce using rule 159 (empty -> .)
    STRING          reduce using rule 159 (empty -> .)
    BOOL            reduce using rule 159 (empty -> .)
    #               reduce using rule 159 (empty -> .)
    TRACKDECISION   reduce using rule 159 (empty -> .)
    FORGETDECISION  reduce using rule 159 (empty -> .)
    }               reduce using rule 159 (empty -> .)

    else                           shift and go to state 272
    empty                          shift and go to state 271

state 259

    (157) paramsB -> , params paramsB .

    )               reduce using rule 157 (paramsB -> , params paramsB .)


state 260

    (152) dimensionsB -> [ hyperexpression . ]

    ]               shift and go to state 273


state 261

    (29) declarationD -> , repush_type . declarationB declarationC
    (20) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 46

    declarationB                   shift and go to state 274

state 262

    (149) funccallC -> , funccallB . funccallC
    (149) funccallC -> . , funccallB funccallC
    (150) funccallC -> . )

    ,               shift and go to state 245
    )               shift and go to state 244

    funccallC                      shift and go to state 275

state 263

    (127) read -> READ ( validate_id push_operand read_quadruple readB ) .

    ;               reduce using rule 127 (read -> READ ( validate_id push_operand read_quadruple readB ) .)


state 264

    (130) readB -> , validate_id . push_operand read_quadruple readB
    (21) push_operand -> .

    ,               reduce using rule 21 (push_operand -> .)
    )               reduce using rule 21 (push_operand -> .)

    push_operand                   shift and go to state 276

state 265

    (113) whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block . endwhile_quadruple
    (116) endwhile_quadruple -> .

    ID              reduce using rule 116 (endwhile_quadruple -> .)
    PRINT           reduce using rule 116 (endwhile_quadruple -> .)
    RETURN          reduce using rule 116 (endwhile_quadruple -> .)
    READ            reduce using rule 116 (endwhile_quadruple -> .)
    IF              reduce using rule 116 (endwhile_quadruple -> .)
    WHILE           reduce using rule 116 (endwhile_quadruple -> .)
    FOR             reduce using rule 116 (endwhile_quadruple -> .)
    INT             reduce using rule 116 (endwhile_quadruple -> .)
    FLOAT           reduce using rule 116 (endwhile_quadruple -> .)
    STRING          reduce using rule 116 (endwhile_quadruple -> .)
    BOOL            reduce using rule 116 (endwhile_quadruple -> .)
    #               reduce using rule 116 (endwhile_quadruple -> .)
    TRACKDECISION   reduce using rule 116 (endwhile_quadruple -> .)
    FORGETDECISION  reduce using rule 116 (endwhile_quadruple -> .)
    }               reduce using rule 116 (endwhile_quadruple -> .)

    endwhile_quadruple             shift and go to state 277

state 266

    (40) assign -> ID push_operand dimensionsOpt = push_operator . hyperexpression quadruple_assign
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    signB                          shift and go to state 82
    hyperexpression                shift and go to state 278
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 267

    (123) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple . ; hyperexpression for_expression ) block endfor_quadruple

    ;               shift and go to state 279


state 268

    (62) assignfunccallB -> ( pop_operand seen_a_funccall funccallB . funccallC
    (149) funccallC -> . , funccallB funccallC
    (150) funccallC -> . )

    ,               shift and go to state 245
    )               shift and go to state 244

    funccallC                      shift and go to state 280

state 269

    (41) assignB -> dimensionsOpt = push_operator hyperexpression . quadruple_assign
    (25) quadruple_assign -> .

    ;               reduce using rule 25 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 281

state 270

    (45) else -> ELSE . elsecondition_quadruple block
    (48) elsecondition_quadruple -> .

    {               reduce using rule 48 (elsecondition_quadruple -> .)

    elsecondition_quadruple        shift and go to state 282

state 271

    (46) else -> empty .

    ID              reduce using rule 46 (else -> empty .)
    PRINT           reduce using rule 46 (else -> empty .)
    RETURN          reduce using rule 46 (else -> empty .)
    READ            reduce using rule 46 (else -> empty .)
    IF              reduce using rule 46 (else -> empty .)
    WHILE           reduce using rule 46 (else -> empty .)
    FOR             reduce using rule 46 (else -> empty .)
    INT             reduce using rule 46 (else -> empty .)
    FLOAT           reduce using rule 46 (else -> empty .)
    STRING          reduce using rule 46 (else -> empty .)
    BOOL            reduce using rule 46 (else -> empty .)
    #               reduce using rule 46 (else -> empty .)
    TRACKDECISION   reduce using rule 46 (else -> empty .)
    FORGETDECISION  reduce using rule 46 (else -> empty .)
    }               reduce using rule 46 (else -> empty .)


state 272

    (44) condition -> IF ( hyperexpression condition_quadruple ) block else . endcondition_quadruple
    (49) endcondition_quadruple -> .

    ID              reduce using rule 49 (endcondition_quadruple -> .)
    PRINT           reduce using rule 49 (endcondition_quadruple -> .)
    RETURN          reduce using rule 49 (endcondition_quadruple -> .)
    READ            reduce using rule 49 (endcondition_quadruple -> .)
    IF              reduce using rule 49 (endcondition_quadruple -> .)
    WHILE           reduce using rule 49 (endcondition_quadruple -> .)
    FOR             reduce using rule 49 (endcondition_quadruple -> .)
    INT             reduce using rule 49 (endcondition_quadruple -> .)
    FLOAT           reduce using rule 49 (endcondition_quadruple -> .)
    STRING          reduce using rule 49 (endcondition_quadruple -> .)
    BOOL            reduce using rule 49 (endcondition_quadruple -> .)
    #               reduce using rule 49 (endcondition_quadruple -> .)
    TRACKDECISION   reduce using rule 49 (endcondition_quadruple -> .)
    FORGETDECISION  reduce using rule 49 (endcondition_quadruple -> .)
    }               reduce using rule 49 (endcondition_quadruple -> .)

    endcondition_quadruple         shift and go to state 283

state 273

    (152) dimensionsB -> [ hyperexpression ] .

    =               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    ,               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    ;               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    /               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    *               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    -               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    +               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    <               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    >               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    DIFF            reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    EQ              reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    LTEQ            reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    GTEQ            reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    AND             reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    OR              reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    )               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)
    ]               reduce using rule 152 (dimensionsB -> [ hyperexpression ] .)


state 274

    (29) declarationD -> , repush_type declarationB . declarationC
    (26) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (27) declarationC -> . , repush_type declarationB declarationC
    (28) declarationC -> . ;

    =               shift and go to state 80
    ,               shift and go to state 77
    ;               shift and go to state 78

    declarationC                   shift and go to state 284

state 275

    (149) funccallC -> , funccallB funccallC .

    /               reduce using rule 149 (funccallC -> , funccallB funccallC .)
    *               reduce using rule 149 (funccallC -> , funccallB funccallC .)
    -               reduce using rule 149 (funccallC -> , funccallB funccallC .)
    +               reduce using rule 149 (funccallC -> , funccallB funccallC .)
    <               reduce using rule 149 (funccallC -> , funccallB funccallC .)
    >               reduce using rule 149 (funccallC -> , funccallB funccallC .)
    DIFF            reduce using rule 149 (funccallC -> , funccallB funccallC .)
    EQ              reduce using rule 149 (funccallC -> , funccallB funccallC .)
    LTEQ            reduce using rule 149 (funccallC -> , funccallB funccallC .)
    GTEQ            reduce using rule 149 (funccallC -> , funccallB funccallC .)
    AND             reduce using rule 149 (funccallC -> , funccallB funccallC .)
    OR              reduce using rule 149 (funccallC -> , funccallB funccallC .)
    ;               reduce using rule 149 (funccallC -> , funccallB funccallC .)
    )               reduce using rule 149 (funccallC -> , funccallB funccallC .)
    ,               reduce using rule 149 (funccallC -> , funccallB funccallC .)
    ]               reduce using rule 149 (funccallC -> , funccallB funccallC .)


state 276

    (130) readB -> , validate_id push_operand . read_quadruple readB
    (129) read_quadruple -> .

    ,               reduce using rule 129 (read_quadruple -> .)
    )               reduce using rule 129 (read_quadruple -> .)

    read_quadruple                 shift and go to state 285

state 277

    (113) whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .

    ID              reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    PRINT           reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    RETURN          reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    READ            reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    IF              reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    WHILE           reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    FOR             reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    INT             reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    FLOAT           reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    STRING          reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    BOOL            reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    #               reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    TRACKDECISION   reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    FORGETDECISION  reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    }               reduce using rule 113 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)


state 278

    (40) assign -> ID push_operand dimensionsOpt = push_operator hyperexpression . quadruple_assign
    (25) quadruple_assign -> .

    ;               reduce using rule 25 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 286

state 279

    (123) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; . hyperexpression for_expression ) block endfor_quadruple
    (68) hyperexpression -> . superexpression hyperexpressionB
    (71) superexpression -> . expression superexpressionB
    (74) expression -> . exp expressionB
    (82) exp -> . term seen_term expB
    (87) term -> . factor seen_factor termB
    (92) factor -> . signB constant
    (93) factor -> . ( seen_parentheses hyperexpression )
    (94) factor -> . funccall seen_factor_funccall
    (95) factor -> . ID seen_ID dimensionsOpt
    (99) signB -> . sign
    (100) signB -> . empty
    (144) funccall -> . ID seen_a_factor_funccall ( funccallB funccallC
    (111) sign -> . +
    (112) sign -> . -
    (159) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 92
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 159 (empty -> .)
    ICONST          reduce using rule 159 (empty -> .)
    SCONST          reduce using rule 159 (empty -> .)
    TRUE            reduce using rule 159 (empty -> .)
    FALSE           reduce using rule 159 (empty -> .)

    signB                          shift and go to state 82
    hyperexpression                shift and go to state 287
    factor                         shift and go to state 87
    empty                          shift and go to state 88
    funccall                       shift and go to state 89
    superexpression                shift and go to state 90
    sign                           shift and go to state 91
    term                           shift and go to state 93
    exp                            shift and go to state 94
    expression                     shift and go to state 95

state 280

    (62) assignfunccallB -> ( pop_operand seen_a_funccall funccallB funccallC .

    ;               reduce using rule 62 (assignfunccallB -> ( pop_operand seen_a_funccall funccallB funccallC .)


state 281

    (41) assignB -> dimensionsOpt = push_operator hyperexpression quadruple_assign .

    ;               reduce using rule 41 (assignB -> dimensionsOpt = push_operator hyperexpression quadruple_assign .)


state 282

    (45) else -> ELSE elsecondition_quadruple . block
    (37) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 288

state 283

    (44) condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .

    ID              reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    PRINT           reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    RETURN          reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    READ            reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    IF              reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    WHILE           reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    FOR             reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    INT             reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    FLOAT           reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    STRING          reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    BOOL            reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    #               reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    TRACKDECISION   reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    FORGETDECISION  reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    }               reduce using rule 44 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)


state 284

    (29) declarationD -> , repush_type declarationB declarationC .

    INT             reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    FLOAT           reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    STRING          reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    BOOL            reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    DEF             reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    MAIN            reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    ID              reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    PRINT           reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    RETURN          reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    READ            reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    IF              reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    WHILE           reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    FOR             reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    #               reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)
    }               reduce using rule 29 (declarationD -> , repush_type declarationB declarationC .)


state 285

    (130) readB -> , validate_id push_operand read_quadruple . readB
    (130) readB -> . , validate_id push_operand read_quadruple readB
    (131) readB -> . empty
    (159) empty -> .

    ,               shift and go to state 250
    )               reduce using rule 159 (empty -> .)

    readB                          shift and go to state 289
    empty                          shift and go to state 251

state 286

    (40) assign -> ID push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign .

    ;               reduce using rule 40 (assign -> ID push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign .)


state 287

    (123) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression . for_expression ) block endfor_quadruple
    (125) for_expression -> .

    )               reduce using rule 125 (for_expression -> .)

    for_expression                 shift and go to state 290

state 288

    (45) else -> ELSE elsecondition_quadruple block .

    ID              reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    PRINT           reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    RETURN          reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    READ            reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    IF              reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    WHILE           reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    FOR             reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    INT             reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    FLOAT           reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    STRING          reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    BOOL            reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    #               reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    TRACKDECISION   reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    FORGETDECISION  reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)
    }               reduce using rule 45 (else -> ELSE elsecondition_quadruple block .)


state 289

    (130) readB -> , validate_id push_operand read_quadruple readB .

    )               reduce using rule 130 (readB -> , validate_id push_operand read_quadruple readB .)


state 290

    (123) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression . ) block endfor_quadruple

    )               shift and go to state 291


state 291

    (123) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) . block endfor_quadruple
    (37) block -> . { instructionsOpt }

    {               shift and go to state 41

    block                          shift and go to state 292

state 292

    (123) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block . endfor_quadruple
    (126) endfor_quadruple -> .

    ID              reduce using rule 126 (endfor_quadruple -> .)
    PRINT           reduce using rule 126 (endfor_quadruple -> .)
    RETURN          reduce using rule 126 (endfor_quadruple -> .)
    READ            reduce using rule 126 (endfor_quadruple -> .)
    IF              reduce using rule 126 (endfor_quadruple -> .)
    WHILE           reduce using rule 126 (endfor_quadruple -> .)
    FOR             reduce using rule 126 (endfor_quadruple -> .)
    INT             reduce using rule 126 (endfor_quadruple -> .)
    FLOAT           reduce using rule 126 (endfor_quadruple -> .)
    STRING          reduce using rule 126 (endfor_quadruple -> .)
    BOOL            reduce using rule 126 (endfor_quadruple -> .)
    #               reduce using rule 126 (endfor_quadruple -> .)
    TRACKDECISION   reduce using rule 126 (endfor_quadruple -> .)
    FORGETDECISION  reduce using rule 126 (endfor_quadruple -> .)
    }               reduce using rule 126 (endfor_quadruple -> .)

    endfor_quadruple               shift and go to state 293

state 293

    (123) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .

    ID              reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    PRINT           reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    RETURN          reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    READ            reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    IF              reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    WHILE           reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    FOR             reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    INT             reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    FLOAT           reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    STRING          reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    BOOL            reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    #               reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    TRACKDECISION   reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    FORGETDECISION  reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    }               reduce using rule 123 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 41 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 41 resolved as shift
WARNING: shift/reduce conflict for READ in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 41 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 41 resolved as shift
WARNING: shift/reduce conflict for FOR in state 41 resolved as shift
WARNING: shift/reduce conflict for INT in state 41 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 41 resolved as shift
WARNING: shift/reduce conflict for STRING in state 41 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 41 resolved as shift
WARNING: shift/reduce conflict for # in state 41 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 41 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 72 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 72 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 72 resolved as shift
WARNING: shift/reduce conflict for READ in state 72 resolved as shift
WARNING: shift/reduce conflict for IF in state 72 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 72 resolved as shift
WARNING: shift/reduce conflict for FOR in state 72 resolved as shift
WARNING: shift/reduce conflict for INT in state 72 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 72 resolved as shift
WARNING: shift/reduce conflict for STRING in state 72 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 72 resolved as shift
WARNING: shift/reduce conflict for # in state 72 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 72 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 72 resolved as shift
WARNING: reduce/reduce conflict in state 59 resolved using rule (instructionsOpt -> empty)
WARNING: rejected rule (localdecisiondirective -> empty) in state 59
