Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> config body
Rule 2     config -> configdirective config
Rule 3     config -> empty
Rule 4     configdirective -> VARSCONFIG = options
Rule 5     configdirective -> DECISIONSCONFIG = options
Rule 6     configdirective -> COMPLEXITYCONFIG = optionsyesno
Rule 7     options -> SOME
Rule 8     options -> ALL
Rule 9     options -> MOST
Rule 10    options -> NONE
Rule 11    optionsyesno -> YES
Rule 12    optionsyesno -> NO
Rule 13    body -> declarationsOpt funcsOpt main funcsOpt
Rule 14    funcsOpt -> suprafunc funcsOpt
Rule 15    funcsOpt -> empty
Rule 16    declarationsOpt -> declaration declarationsOpt
Rule 17    declarationsOpt -> empty
Rule 18    declaration -> type push_type declarationB declarationC
Rule 19    declarationB -> ID push_operand dimensionsOpt
Rule 20    push_operand -> <empty>
Rule 21    push_type -> <empty>
Rule 22    push_operator -> <empty>
Rule 23    quadruple_assign -> <empty>
Rule 24    declarationC -> = push_operator superexpression quadruple_assign declarationD
Rule 25    declarationC -> , declarationB declarationC
Rule 26    declarationC -> ;
Rule 27    declarationD -> , declarationB declarationC
Rule 28    declarationD -> ;
Rule 29    main -> MAIN ( ) block
Rule 30    suprafunc -> func block
Rule 31    func -> DEF returntype ID ( paramsOpt )
Rule 32    paramsOpt -> params paramsB
Rule 33    paramsOpt -> empty
Rule 34    block -> { instructionsOpt }
Rule 35    instructionsOpt -> instruction instructionsOpt
Rule 36    instructionsOpt -> empty
Rule 37    assign -> ID dimensionsOpt = superexpression
Rule 38    assignB -> dimensionsOpt = superexpression
Rule 39    dimensionsOpt -> dimensions
Rule 40    dimensionsOpt -> empty
Rule 41    condition -> IF ( superexpression ) block else
Rule 42    else -> ELSE block
Rule 43    else -> empty
Rule 44    instruction -> assignfunccall ;
Rule 45    instruction -> output ;
Rule 46    instruction -> return ;
Rule 47    instruction -> input ;
Rule 48    instruction -> declaration
Rule 49    instruction -> condition
Rule 50    instruction -> whileloop
Rule 51    instruction -> forloop
Rule 52    instruction -> localdirective
Rule 53    assignfunccall -> ID assignfunccallB
Rule 54    assignfunccallB -> ( funccallB funccallC
Rule 55    assignfunccallB -> assignB
Rule 56    localdirective -> localvardirective
Rule 57    localdirective -> localdecisiondirective
Rule 58    localdirective -> localmsgdirective
Rule 59    hyperexpression -> superexpression hyperexpressionB
Rule 60    hyperexpressionB -> | | hyperexpression
Rule 61    hyperexpressionB -> empty
Rule 62    superexpression -> expression superexpressionB
Rule 63    superexpressionB -> & & superexpression
Rule 64    superexpressionB -> empty
Rule 65    expression -> exp expressionB
Rule 66    expressionB -> < exp
Rule 67    expressionB -> > exp
Rule 68    expressionB -> < > exp
Rule 69    expressionB -> = = exp
Rule 70    expressionB -> < = exp
Rule 71    expressionB -> > = exp
Rule 72    expressionB -> empty
Rule 73    exp -> term expB
Rule 74    expB -> - exp
Rule 75    expB -> + exp
Rule 76    expB -> empty
Rule 77    term -> factor termB
Rule 78    termB -> / term
Rule 79    termB -> * term
Rule 80    termB -> empty
Rule 81    factor -> signB constant
Rule 82    factor -> ( superexpression )
Rule 83    factor -> funccall
Rule 84    factor -> ID seen_ID dimensionsOpt
Rule 85    seen_ID -> <empty>
Rule 86    signB -> sign
Rule 87    signB -> empty
Rule 88    constant -> FCONST
Rule 89    constant -> ICONST
Rule 90    constant -> SCONST
Rule 91    constant -> TRUE
Rule 92    constant -> FALSE
Rule 93    sign -> +
Rule 94    sign -> -
Rule 95    whileloop -> WHILE ( superexpression ) block
Rule 96    type -> INT
Rule 97    type -> FLOAT
Rule 98    type -> STRING
Rule 99    type -> BOOL
Rule 100   returntype -> VOID
Rule 101   returntype -> type
Rule 102   forloop -> FOR ( assign ; superexpression ; superexpression ) block
Rule 103   input -> INPUT ( ID inputB )
Rule 104   inputB -> , ID inputB
Rule 105   inputB -> empty
Rule 106   output -> PRINT ( outputB
Rule 107   outputB -> SCONST outputC
Rule 108   outputB -> superexpression outputC
Rule 109   outputC -> )
Rule 110   outputC -> , outputB
Rule 111   localvardirective -> # localvardirectiveB ID
Rule 112   localvardirectiveB -> TRACK
Rule 113   localvardirectiveB -> FORGET
Rule 114   localmsgdirective -> # SHOW SCONST
Rule 115   localdecisiondirective -> TRACKDECISION
Rule 116   localdecisiondirective -> FORGETDECISION
Rule 117   localdecisiondirective -> empty
Rule 118   funccall -> ID ( funccallB funccallC
Rule 119   funccallB -> superexpression
Rule 120   funccallB -> empty
Rule 121   funccallC -> , funccallB funccallC
Rule 122   funccallC -> )
Rule 123   dimensions -> [ superexpression ] dimensionsB
Rule 124   dimensionsB -> [ superexpression ]
Rule 125   dimensionsB -> empty
Rule 126   return -> RETURN superexpression
Rule 127   params -> type ID
Rule 128   paramsB -> , params paramsB
Rule 129   paramsB -> empty
Rule 130   empty -> <empty>

Terminals, with rules where they appear

#                    : 111 114
&                    : 63 63
(                    : 29 31 41 54 82 95 102 103 106 118
)                    : 29 31 41 82 95 102 103 109 122
*                    : 79
+                    : 75 93
,                    : 25 27 104 110 121 128
-                    : 74 94
/                    : 78
;                    : 26 28 44 45 46 47 102 102
<                    : 66 68 70
=                    : 4 5 6 24 37 38 69 69 70 71
>                    : 67 68 71
ALL                  : 8
BOOL                 : 99
COMPLEXITYCONFIG     : 6
DECISIONSCONFIG      : 5
DEF                  : 31
ELSE                 : 42
FALSE                : 92
FCONST               : 88
FLOAT                : 97
FOR                  : 102
FORGET               : 113
FORGETDECISION       : 116
ICONST               : 89
ID                   : 19 31 37 53 84 103 104 111 118 127
IF                   : 41
INPUT                : 103
INT                  : 96
MAIN                 : 29
MOST                 : 9
NO                   : 12
NONE                 : 10
PRINT                : 106
RETURN               : 126
SCONST               : 90 107 114
SHOW                 : 114
SOME                 : 7
STRING               : 98
TRACK                : 112
TRACKDECISION        : 115
TRUE                 : 91
VARSCONFIG           : 4
VOID                 : 100
WHILE                : 95
YES                  : 11
[                    : 123 124
]                    : 123 124
error                : 
{                    : 34
|                    : 60 60
}                    : 34

Nonterminals, with rules where they appear

assign               : 102
assignB              : 55
assignfunccall       : 44
assignfunccallB      : 53
block                : 29 30 41 42 95 102
body                 : 1
condition            : 49
config               : 1 2
configdirective      : 2
constant             : 81
declaration          : 16 48
declarationB         : 18 25 27
declarationC         : 18 25 27
declarationD         : 24
declarationsOpt      : 13 16
dimensions           : 39
dimensionsB          : 123
dimensionsOpt        : 19 37 38 84
else                 : 41
empty                : 3 15 17 33 36 40 43 61 64 72 76 80 87 105 117 120 125 129
exp                  : 65 66 67 68 69 70 71 74 75
expB                 : 73
expression           : 62
expressionB          : 65
factor               : 77
forloop              : 51
func                 : 30
funccall             : 83
funccallB            : 54 118 121
funccallC            : 54 118 121
funcsOpt             : 13 13 14
hyperexpression      : 60
hyperexpressionB     : 59
input                : 47
inputB               : 103 104
instruction          : 35
instructionsOpt      : 34 35
localdecisiondirective : 57
localdirective       : 52
localmsgdirective    : 58
localvardirective    : 56
localvardirectiveB   : 111
main                 : 13
options              : 4 5
optionsyesno         : 6
output               : 45
outputB              : 106 110
outputC              : 107 108
params               : 32 128
paramsB              : 32 128
paramsOpt            : 31
program              : 0
push_operand         : 19
push_operator        : 24
push_type            : 18
quadruple_assign     : 24
return               : 46
returntype           : 31
seen_ID              : 84
sign                 : 86
signB                : 81
superexpression      : 24 37 38 41 59 63 82 95 102 102 108 119 123 124 126
superexpressionB     : 62
suprafunc            : 14
term                 : 73 78 79
termB                : 77
type                 : 18 101 127
whileloop            : 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . config body
    (2) config -> . configdirective config
    (3) config -> . empty
    (4) configdirective -> . VARSCONFIG = options
    (5) configdirective -> . DECISIONSCONFIG = options
    (6) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (130) empty -> .

    VARSCONFIG      shift and go to state 2
    DECISIONSCONFIG shift and go to state 1
    COMPLEXITYCONFIG shift and go to state 4
    INT             reduce using rule 130 (empty -> .)
    FLOAT           reduce using rule 130 (empty -> .)
    STRING          reduce using rule 130 (empty -> .)
    BOOL            reduce using rule 130 (empty -> .)
    DEF             reduce using rule 130 (empty -> .)
    MAIN            reduce using rule 130 (empty -> .)

    configdirective                shift and go to state 3
    program                        shift and go to state 5
    config                         shift and go to state 6
    empty                          shift and go to state 7

state 1

    (5) configdirective -> DECISIONSCONFIG . = options

    =               shift and go to state 8


state 2

    (4) configdirective -> VARSCONFIG . = options

    =               shift and go to state 9


state 3

    (2) config -> configdirective . config
    (2) config -> . configdirective config
    (3) config -> . empty
    (4) configdirective -> . VARSCONFIG = options
    (5) configdirective -> . DECISIONSCONFIG = options
    (6) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (130) empty -> .

    VARSCONFIG      shift and go to state 2
    DECISIONSCONFIG shift and go to state 1
    COMPLEXITYCONFIG shift and go to state 4
    INT             reduce using rule 130 (empty -> .)
    FLOAT           reduce using rule 130 (empty -> .)
    STRING          reduce using rule 130 (empty -> .)
    BOOL            reduce using rule 130 (empty -> .)
    DEF             reduce using rule 130 (empty -> .)
    MAIN            reduce using rule 130 (empty -> .)

    config                         shift and go to state 10
    empty                          shift and go to state 7
    configdirective                shift and go to state 3

state 4

    (6) configdirective -> COMPLEXITYCONFIG . = optionsyesno

    =               shift and go to state 11


state 5

    (0) S' -> program .



state 6

    (1) program -> config . body
    (13) body -> . declarationsOpt funcsOpt main funcsOpt
    (16) declarationsOpt -> . declaration declarationsOpt
    (17) declarationsOpt -> . empty
    (18) declaration -> . type push_type declarationB declarationC
    (130) empty -> .
    (96) type -> . INT
    (97) type -> . FLOAT
    (98) type -> . STRING
    (99) type -> . BOOL

    DEF             reduce using rule 130 (empty -> .)
    MAIN            reduce using rule 130 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    body                           shift and go to state 12
    declarationsOpt                shift and go to state 13
    type                           shift and go to state 16
    declaration                    shift and go to state 19
    empty                          shift and go to state 20

state 7

    (3) config -> empty .

    INT             reduce using rule 3 (config -> empty .)
    FLOAT           reduce using rule 3 (config -> empty .)
    STRING          reduce using rule 3 (config -> empty .)
    BOOL            reduce using rule 3 (config -> empty .)
    DEF             reduce using rule 3 (config -> empty .)
    MAIN            reduce using rule 3 (config -> empty .)


state 8

    (5) configdirective -> DECISIONSCONFIG = . options
    (7) options -> . SOME
    (8) options -> . ALL
    (9) options -> . MOST
    (10) options -> . NONE

    SOME            shift and go to state 22
    ALL             shift and go to state 21
    MOST            shift and go to state 24
    NONE            shift and go to state 23

    options                        shift and go to state 25

state 9

    (4) configdirective -> VARSCONFIG = . options
    (7) options -> . SOME
    (8) options -> . ALL
    (9) options -> . MOST
    (10) options -> . NONE

    SOME            shift and go to state 22
    ALL             shift and go to state 21
    MOST            shift and go to state 24
    NONE            shift and go to state 23

    options                        shift and go to state 26

state 10

    (2) config -> configdirective config .

    INT             reduce using rule 2 (config -> configdirective config .)
    FLOAT           reduce using rule 2 (config -> configdirective config .)
    STRING          reduce using rule 2 (config -> configdirective config .)
    BOOL            reduce using rule 2 (config -> configdirective config .)
    DEF             reduce using rule 2 (config -> configdirective config .)
    MAIN            reduce using rule 2 (config -> configdirective config .)


state 11

    (6) configdirective -> COMPLEXITYCONFIG = . optionsyesno
    (11) optionsyesno -> . YES
    (12) optionsyesno -> . NO

    YES             shift and go to state 27
    NO              shift and go to state 29

    optionsyesno                   shift and go to state 28

state 12

    (1) program -> config body .

    $end            reduce using rule 1 (program -> config body .)


state 13

    (13) body -> declarationsOpt . funcsOpt main funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (30) suprafunc -> . func block
    (130) empty -> .
    (31) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 130 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 31
    func                           shift and go to state 32
    empty                          shift and go to state 34

state 14

    (98) type -> STRING .

    ID              reduce using rule 98 (type -> STRING .)


state 15

    (96) type -> INT .

    ID              reduce using rule 96 (type -> INT .)


state 16

    (18) declaration -> type . push_type declarationB declarationC
    (21) push_type -> .

    ID              reduce using rule 21 (push_type -> .)

    push_type                      shift and go to state 35

state 17

    (97) type -> FLOAT .

    ID              reduce using rule 97 (type -> FLOAT .)


state 18

    (99) type -> BOOL .

    ID              reduce using rule 99 (type -> BOOL .)


state 19

    (16) declarationsOpt -> declaration . declarationsOpt
    (16) declarationsOpt -> . declaration declarationsOpt
    (17) declarationsOpt -> . empty
    (18) declaration -> . type push_type declarationB declarationC
    (130) empty -> .
    (96) type -> . INT
    (97) type -> . FLOAT
    (98) type -> . STRING
    (99) type -> . BOOL

    DEF             reduce using rule 130 (empty -> .)
    MAIN            reduce using rule 130 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    declarationsOpt                shift and go to state 36
    declaration                    shift and go to state 19
    type                           shift and go to state 16
    empty                          shift and go to state 20

state 20

    (17) declarationsOpt -> empty .

    DEF             reduce using rule 17 (declarationsOpt -> empty .)
    MAIN            reduce using rule 17 (declarationsOpt -> empty .)


state 21

    (8) options -> ALL .

    VARSCONFIG      reduce using rule 8 (options -> ALL .)
    DECISIONSCONFIG reduce using rule 8 (options -> ALL .)
    COMPLEXITYCONFIG reduce using rule 8 (options -> ALL .)
    INT             reduce using rule 8 (options -> ALL .)
    FLOAT           reduce using rule 8 (options -> ALL .)
    STRING          reduce using rule 8 (options -> ALL .)
    BOOL            reduce using rule 8 (options -> ALL .)
    DEF             reduce using rule 8 (options -> ALL .)
    MAIN            reduce using rule 8 (options -> ALL .)


state 22

    (7) options -> SOME .

    VARSCONFIG      reduce using rule 7 (options -> SOME .)
    DECISIONSCONFIG reduce using rule 7 (options -> SOME .)
    COMPLEXITYCONFIG reduce using rule 7 (options -> SOME .)
    INT             reduce using rule 7 (options -> SOME .)
    FLOAT           reduce using rule 7 (options -> SOME .)
    STRING          reduce using rule 7 (options -> SOME .)
    BOOL            reduce using rule 7 (options -> SOME .)
    DEF             reduce using rule 7 (options -> SOME .)
    MAIN            reduce using rule 7 (options -> SOME .)


state 23

    (10) options -> NONE .

    VARSCONFIG      reduce using rule 10 (options -> NONE .)
    DECISIONSCONFIG reduce using rule 10 (options -> NONE .)
    COMPLEXITYCONFIG reduce using rule 10 (options -> NONE .)
    INT             reduce using rule 10 (options -> NONE .)
    FLOAT           reduce using rule 10 (options -> NONE .)
    STRING          reduce using rule 10 (options -> NONE .)
    BOOL            reduce using rule 10 (options -> NONE .)
    DEF             reduce using rule 10 (options -> NONE .)
    MAIN            reduce using rule 10 (options -> NONE .)


state 24

    (9) options -> MOST .

    VARSCONFIG      reduce using rule 9 (options -> MOST .)
    DECISIONSCONFIG reduce using rule 9 (options -> MOST .)
    COMPLEXITYCONFIG reduce using rule 9 (options -> MOST .)
    INT             reduce using rule 9 (options -> MOST .)
    FLOAT           reduce using rule 9 (options -> MOST .)
    STRING          reduce using rule 9 (options -> MOST .)
    BOOL            reduce using rule 9 (options -> MOST .)
    DEF             reduce using rule 9 (options -> MOST .)
    MAIN            reduce using rule 9 (options -> MOST .)


state 25

    (5) configdirective -> DECISIONSCONFIG = options .

    VARSCONFIG      reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    INT             reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    FLOAT           reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    STRING          reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    BOOL            reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    DEF             reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    MAIN            reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)


state 26

    (4) configdirective -> VARSCONFIG = options .

    VARSCONFIG      reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    INT             reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    FLOAT           reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    STRING          reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    BOOL            reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    DEF             reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    MAIN            reduce using rule 4 (configdirective -> VARSCONFIG = options .)


state 27

    (11) optionsyesno -> YES .

    VARSCONFIG      reduce using rule 11 (optionsyesno -> YES .)
    DECISIONSCONFIG reduce using rule 11 (optionsyesno -> YES .)
    COMPLEXITYCONFIG reduce using rule 11 (optionsyesno -> YES .)
    INT             reduce using rule 11 (optionsyesno -> YES .)
    FLOAT           reduce using rule 11 (optionsyesno -> YES .)
    STRING          reduce using rule 11 (optionsyesno -> YES .)
    BOOL            reduce using rule 11 (optionsyesno -> YES .)
    DEF             reduce using rule 11 (optionsyesno -> YES .)
    MAIN            reduce using rule 11 (optionsyesno -> YES .)


state 28

    (6) configdirective -> COMPLEXITYCONFIG = optionsyesno .

    VARSCONFIG      reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DECISIONSCONFIG reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    COMPLEXITYCONFIG reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    INT             reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    FLOAT           reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    STRING          reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    BOOL            reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DEF             reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    MAIN            reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)


state 29

    (12) optionsyesno -> NO .

    VARSCONFIG      reduce using rule 12 (optionsyesno -> NO .)
    DECISIONSCONFIG reduce using rule 12 (optionsyesno -> NO .)
    COMPLEXITYCONFIG reduce using rule 12 (optionsyesno -> NO .)
    INT             reduce using rule 12 (optionsyesno -> NO .)
    FLOAT           reduce using rule 12 (optionsyesno -> NO .)
    STRING          reduce using rule 12 (optionsyesno -> NO .)
    BOOL            reduce using rule 12 (optionsyesno -> NO .)
    DEF             reduce using rule 12 (optionsyesno -> NO .)
    MAIN            reduce using rule 12 (optionsyesno -> NO .)


state 30

    (14) funcsOpt -> suprafunc . funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (30) suprafunc -> . func block
    (130) empty -> .
    (31) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 130 (empty -> .)
    $end            reduce using rule 130 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 37
    empty                          shift and go to state 34
    func                           shift and go to state 32

state 31

    (13) body -> declarationsOpt funcsOpt . main funcsOpt
    (29) main -> . MAIN ( ) block

    MAIN            shift and go to state 38

    main                           shift and go to state 39

state 32

    (30) suprafunc -> func . block
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 41

state 33

    (31) func -> DEF . returntype ID ( paramsOpt )
    (100) returntype -> . VOID
    (101) returntype -> . type
    (96) type -> . INT
    (97) type -> . FLOAT
    (98) type -> . STRING
    (99) type -> . BOOL

    VOID            shift and go to state 42
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    returntype                     shift and go to state 43
    type                           shift and go to state 44

state 34

    (15) funcsOpt -> empty .

    MAIN            reduce using rule 15 (funcsOpt -> empty .)
    $end            reduce using rule 15 (funcsOpt -> empty .)


state 35

    (18) declaration -> type push_type . declarationB declarationC
    (19) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 45

    declarationB                   shift and go to state 46

state 36

    (16) declarationsOpt -> declaration declarationsOpt .

    DEF             reduce using rule 16 (declarationsOpt -> declaration declarationsOpt .)
    MAIN            reduce using rule 16 (declarationsOpt -> declaration declarationsOpt .)


state 37

    (14) funcsOpt -> suprafunc funcsOpt .

    MAIN            reduce using rule 14 (funcsOpt -> suprafunc funcsOpt .)
    $end            reduce using rule 14 (funcsOpt -> suprafunc funcsOpt .)


state 38

    (29) main -> MAIN . ( ) block

    (               shift and go to state 47


state 39

    (13) body -> declarationsOpt funcsOpt main . funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (30) suprafunc -> . func block
    (130) empty -> .
    (31) func -> . DEF returntype ID ( paramsOpt )

    $end            reduce using rule 130 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 48
    func                           shift and go to state 32
    empty                          shift and go to state 34

state 40

    (34) block -> { . instructionsOpt }
    (35) instructionsOpt -> . instruction instructionsOpt
    (36) instructionsOpt -> . empty
    (44) instruction -> . assignfunccall ;
    (45) instruction -> . output ;
    (46) instruction -> . return ;
    (47) instruction -> . input ;
    (48) instruction -> . declaration
    (49) instruction -> . condition
    (50) instruction -> . whileloop
    (51) instruction -> . forloop
    (52) instruction -> . localdirective
    (130) empty -> .
    (53) assignfunccall -> . ID assignfunccallB
    (106) output -> . PRINT ( outputB
    (126) return -> . RETURN superexpression
    (103) input -> . INPUT ( ID inputB )
    (18) declaration -> . type push_type declarationB declarationC
    (41) condition -> . IF ( superexpression ) block else
    (95) whileloop -> . WHILE ( superexpression ) block
    (102) forloop -> . FOR ( assign ; superexpression ; superexpression ) block
    (56) localdirective -> . localvardirective
    (57) localdirective -> . localdecisiondirective
    (58) localdirective -> . localmsgdirective
    (96) type -> . INT
    (97) type -> . FLOAT
    (98) type -> . STRING
    (99) type -> . BOOL
    (111) localvardirective -> . # localvardirectiveB ID
    (115) localdecisiondirective -> . TRACKDECISION
    (116) localdecisiondirective -> . FORGETDECISION
    (117) localdecisiondirective -> . empty
    (114) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 130 (empty -> .)
    ID              shift and go to state 67
    PRINT           shift and go to state 52
    RETURN          shift and go to state 49
    INPUT           shift and go to state 66
    IF              shift and go to state 69
    WHILE           shift and go to state 51
    FOR             shift and go to state 61
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    #               shift and go to state 54
    TRACKDECISION   shift and go to state 56
    FORGETDECISION  shift and go to state 63

  ! ID              [ reduce using rule 130 (empty -> .) ]
  ! PRINT           [ reduce using rule 130 (empty -> .) ]
  ! RETURN          [ reduce using rule 130 (empty -> .) ]
  ! INPUT           [ reduce using rule 130 (empty -> .) ]
  ! IF              [ reduce using rule 130 (empty -> .) ]
  ! WHILE           [ reduce using rule 130 (empty -> .) ]
  ! FOR             [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! #               [ reduce using rule 130 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 130 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 130 (empty -> .) ]

    assignfunccall                 shift and go to state 50
    whileloop                      shift and go to state 53
    localvardirective              shift and go to state 55
    input                          shift and go to state 57
    type                           shift and go to state 16
    empty                          shift and go to state 58
    forloop                        shift and go to state 59
    return                         shift and go to state 60
    instructionsOpt                shift and go to state 62
    localdirective                 shift and go to state 64
    declaration                    shift and go to state 65
    condition                      shift and go to state 68
    instruction                    shift and go to state 70
    localmsgdirective              shift and go to state 71
    localdecisiondirective         shift and go to state 72
    output                         shift and go to state 73

state 41

    (30) suprafunc -> func block .

    DEF             reduce using rule 30 (suprafunc -> func block .)
    MAIN            reduce using rule 30 (suprafunc -> func block .)
    $end            reduce using rule 30 (suprafunc -> func block .)


state 42

    (100) returntype -> VOID .

    ID              reduce using rule 100 (returntype -> VOID .)


state 43

    (31) func -> DEF returntype . ID ( paramsOpt )

    ID              shift and go to state 74


state 44

    (101) returntype -> type .

    ID              reduce using rule 101 (returntype -> type .)


state 45

    (19) declarationB -> ID . push_operand dimensionsOpt
    (20) push_operand -> .

    [               reduce using rule 20 (push_operand -> .)
    =               reduce using rule 20 (push_operand -> .)
    ,               reduce using rule 20 (push_operand -> .)
    ;               reduce using rule 20 (push_operand -> .)

    push_operand                   shift and go to state 75

state 46

    (18) declaration -> type push_type declarationB . declarationC
    (24) declarationC -> . = push_operator superexpression quadruple_assign declarationD
    (25) declarationC -> . , declarationB declarationC
    (26) declarationC -> . ;

    =               shift and go to state 79
    ,               shift and go to state 76
    ;               shift and go to state 77

    declarationC                   shift and go to state 78

state 47

    (29) main -> MAIN ( . ) block

    )               shift and go to state 80


state 48

    (13) body -> declarationsOpt funcsOpt main funcsOpt .

    $end            reduce using rule 13 (body -> declarationsOpt funcsOpt main funcsOpt .)


state 49

    (126) return -> RETURN . superexpression
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 89
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 87

state 50

    (44) instruction -> assignfunccall . ;

    ;               shift and go to state 94


state 51

    (95) whileloop -> WHILE . ( superexpression ) block

    (               shift and go to state 95


state 52

    (106) output -> PRINT . ( outputB

    (               shift and go to state 96


state 53

    (50) instruction -> whileloop .

    ID              reduce using rule 50 (instruction -> whileloop .)
    PRINT           reduce using rule 50 (instruction -> whileloop .)
    RETURN          reduce using rule 50 (instruction -> whileloop .)
    INPUT           reduce using rule 50 (instruction -> whileloop .)
    IF              reduce using rule 50 (instruction -> whileloop .)
    WHILE           reduce using rule 50 (instruction -> whileloop .)
    FOR             reduce using rule 50 (instruction -> whileloop .)
    INT             reduce using rule 50 (instruction -> whileloop .)
    FLOAT           reduce using rule 50 (instruction -> whileloop .)
    STRING          reduce using rule 50 (instruction -> whileloop .)
    BOOL            reduce using rule 50 (instruction -> whileloop .)
    #               reduce using rule 50 (instruction -> whileloop .)
    TRACKDECISION   reduce using rule 50 (instruction -> whileloop .)
    FORGETDECISION  reduce using rule 50 (instruction -> whileloop .)
    }               reduce using rule 50 (instruction -> whileloop .)


state 54

    (111) localvardirective -> # . localvardirectiveB ID
    (114) localmsgdirective -> # . SHOW SCONST
    (112) localvardirectiveB -> . TRACK
    (113) localvardirectiveB -> . FORGET

    SHOW            shift and go to state 98
    TRACK           shift and go to state 99
    FORGET          shift and go to state 97

    localvardirectiveB             shift and go to state 100

state 55

    (56) localdirective -> localvardirective .

    ID              reduce using rule 56 (localdirective -> localvardirective .)
    PRINT           reduce using rule 56 (localdirective -> localvardirective .)
    RETURN          reduce using rule 56 (localdirective -> localvardirective .)
    INPUT           reduce using rule 56 (localdirective -> localvardirective .)
    IF              reduce using rule 56 (localdirective -> localvardirective .)
    WHILE           reduce using rule 56 (localdirective -> localvardirective .)
    FOR             reduce using rule 56 (localdirective -> localvardirective .)
    INT             reduce using rule 56 (localdirective -> localvardirective .)
    FLOAT           reduce using rule 56 (localdirective -> localvardirective .)
    STRING          reduce using rule 56 (localdirective -> localvardirective .)
    BOOL            reduce using rule 56 (localdirective -> localvardirective .)
    #               reduce using rule 56 (localdirective -> localvardirective .)
    TRACKDECISION   reduce using rule 56 (localdirective -> localvardirective .)
    FORGETDECISION  reduce using rule 56 (localdirective -> localvardirective .)
    }               reduce using rule 56 (localdirective -> localvardirective .)


state 56

    (115) localdecisiondirective -> TRACKDECISION .

    ID              reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    PRINT           reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    RETURN          reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    INPUT           reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    IF              reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    WHILE           reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    FOR             reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    INT             reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    FLOAT           reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    STRING          reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    BOOL            reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    #               reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    TRACKDECISION   reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    FORGETDECISION  reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)
    }               reduce using rule 115 (localdecisiondirective -> TRACKDECISION .)


state 57

    (47) instruction -> input . ;

    ;               shift and go to state 101


state 58

    (36) instructionsOpt -> empty .
    (117) localdecisiondirective -> empty .

  ! reduce/reduce conflict for } resolved using rule 36 (instructionsOpt -> empty .)
    }               reduce using rule 36 (instructionsOpt -> empty .)
    ID              reduce using rule 117 (localdecisiondirective -> empty .)
    PRINT           reduce using rule 117 (localdecisiondirective -> empty .)
    RETURN          reduce using rule 117 (localdecisiondirective -> empty .)
    INPUT           reduce using rule 117 (localdecisiondirective -> empty .)
    IF              reduce using rule 117 (localdecisiondirective -> empty .)
    WHILE           reduce using rule 117 (localdecisiondirective -> empty .)
    FOR             reduce using rule 117 (localdecisiondirective -> empty .)
    INT             reduce using rule 117 (localdecisiondirective -> empty .)
    FLOAT           reduce using rule 117 (localdecisiondirective -> empty .)
    STRING          reduce using rule 117 (localdecisiondirective -> empty .)
    BOOL            reduce using rule 117 (localdecisiondirective -> empty .)
    #               reduce using rule 117 (localdecisiondirective -> empty .)
    TRACKDECISION   reduce using rule 117 (localdecisiondirective -> empty .)
    FORGETDECISION  reduce using rule 117 (localdecisiondirective -> empty .)

  ! }               [ reduce using rule 117 (localdecisiondirective -> empty .) ]


state 59

    (51) instruction -> forloop .

    ID              reduce using rule 51 (instruction -> forloop .)
    PRINT           reduce using rule 51 (instruction -> forloop .)
    RETURN          reduce using rule 51 (instruction -> forloop .)
    INPUT           reduce using rule 51 (instruction -> forloop .)
    IF              reduce using rule 51 (instruction -> forloop .)
    WHILE           reduce using rule 51 (instruction -> forloop .)
    FOR             reduce using rule 51 (instruction -> forloop .)
    INT             reduce using rule 51 (instruction -> forloop .)
    FLOAT           reduce using rule 51 (instruction -> forloop .)
    STRING          reduce using rule 51 (instruction -> forloop .)
    BOOL            reduce using rule 51 (instruction -> forloop .)
    #               reduce using rule 51 (instruction -> forloop .)
    TRACKDECISION   reduce using rule 51 (instruction -> forloop .)
    FORGETDECISION  reduce using rule 51 (instruction -> forloop .)
    }               reduce using rule 51 (instruction -> forloop .)


state 60

    (46) instruction -> return . ;

    ;               shift and go to state 102


state 61

    (102) forloop -> FOR . ( assign ; superexpression ; superexpression ) block

    (               shift and go to state 103


state 62

    (34) block -> { instructionsOpt . }

    }               shift and go to state 104


state 63

    (116) localdecisiondirective -> FORGETDECISION .

    ID              reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    PRINT           reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    RETURN          reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    INPUT           reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    IF              reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    WHILE           reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    FOR             reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    INT             reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    FLOAT           reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    STRING          reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    BOOL            reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    #               reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    TRACKDECISION   reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    FORGETDECISION  reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)
    }               reduce using rule 116 (localdecisiondirective -> FORGETDECISION .)


state 64

    (52) instruction -> localdirective .

    ID              reduce using rule 52 (instruction -> localdirective .)
    PRINT           reduce using rule 52 (instruction -> localdirective .)
    RETURN          reduce using rule 52 (instruction -> localdirective .)
    INPUT           reduce using rule 52 (instruction -> localdirective .)
    IF              reduce using rule 52 (instruction -> localdirective .)
    WHILE           reduce using rule 52 (instruction -> localdirective .)
    FOR             reduce using rule 52 (instruction -> localdirective .)
    INT             reduce using rule 52 (instruction -> localdirective .)
    FLOAT           reduce using rule 52 (instruction -> localdirective .)
    STRING          reduce using rule 52 (instruction -> localdirective .)
    BOOL            reduce using rule 52 (instruction -> localdirective .)
    #               reduce using rule 52 (instruction -> localdirective .)
    TRACKDECISION   reduce using rule 52 (instruction -> localdirective .)
    FORGETDECISION  reduce using rule 52 (instruction -> localdirective .)
    }               reduce using rule 52 (instruction -> localdirective .)


state 65

    (48) instruction -> declaration .

    ID              reduce using rule 48 (instruction -> declaration .)
    PRINT           reduce using rule 48 (instruction -> declaration .)
    RETURN          reduce using rule 48 (instruction -> declaration .)
    INPUT           reduce using rule 48 (instruction -> declaration .)
    IF              reduce using rule 48 (instruction -> declaration .)
    WHILE           reduce using rule 48 (instruction -> declaration .)
    FOR             reduce using rule 48 (instruction -> declaration .)
    INT             reduce using rule 48 (instruction -> declaration .)
    FLOAT           reduce using rule 48 (instruction -> declaration .)
    STRING          reduce using rule 48 (instruction -> declaration .)
    BOOL            reduce using rule 48 (instruction -> declaration .)
    #               reduce using rule 48 (instruction -> declaration .)
    TRACKDECISION   reduce using rule 48 (instruction -> declaration .)
    FORGETDECISION  reduce using rule 48 (instruction -> declaration .)
    }               reduce using rule 48 (instruction -> declaration .)


state 66

    (103) input -> INPUT . ( ID inputB )

    (               shift and go to state 105


state 67

    (53) assignfunccall -> ID . assignfunccallB
    (54) assignfunccallB -> . ( funccallB funccallC
    (55) assignfunccallB -> . assignB
    (38) assignB -> . dimensionsOpt = superexpression
    (39) dimensionsOpt -> . dimensions
    (40) dimensionsOpt -> . empty
    (123) dimensions -> . [ superexpression ] dimensionsB
    (130) empty -> .

    (               shift and go to state 108
    [               shift and go to state 110
    =               reduce using rule 130 (empty -> .)

    dimensions                     shift and go to state 106
    assignfunccallB                shift and go to state 107
    assignB                        shift and go to state 109
    dimensionsOpt                  shift and go to state 111
    empty                          shift and go to state 112

state 68

    (49) instruction -> condition .

    ID              reduce using rule 49 (instruction -> condition .)
    PRINT           reduce using rule 49 (instruction -> condition .)
    RETURN          reduce using rule 49 (instruction -> condition .)
    INPUT           reduce using rule 49 (instruction -> condition .)
    IF              reduce using rule 49 (instruction -> condition .)
    WHILE           reduce using rule 49 (instruction -> condition .)
    FOR             reduce using rule 49 (instruction -> condition .)
    INT             reduce using rule 49 (instruction -> condition .)
    FLOAT           reduce using rule 49 (instruction -> condition .)
    STRING          reduce using rule 49 (instruction -> condition .)
    BOOL            reduce using rule 49 (instruction -> condition .)
    #               reduce using rule 49 (instruction -> condition .)
    TRACKDECISION   reduce using rule 49 (instruction -> condition .)
    FORGETDECISION  reduce using rule 49 (instruction -> condition .)
    }               reduce using rule 49 (instruction -> condition .)


state 69

    (41) condition -> IF . ( superexpression ) block else

    (               shift and go to state 113


state 70

    (35) instructionsOpt -> instruction . instructionsOpt
    (35) instructionsOpt -> . instruction instructionsOpt
    (36) instructionsOpt -> . empty
    (44) instruction -> . assignfunccall ;
    (45) instruction -> . output ;
    (46) instruction -> . return ;
    (47) instruction -> . input ;
    (48) instruction -> . declaration
    (49) instruction -> . condition
    (50) instruction -> . whileloop
    (51) instruction -> . forloop
    (52) instruction -> . localdirective
    (130) empty -> .
    (53) assignfunccall -> . ID assignfunccallB
    (106) output -> . PRINT ( outputB
    (126) return -> . RETURN superexpression
    (103) input -> . INPUT ( ID inputB )
    (18) declaration -> . type push_type declarationB declarationC
    (41) condition -> . IF ( superexpression ) block else
    (95) whileloop -> . WHILE ( superexpression ) block
    (102) forloop -> . FOR ( assign ; superexpression ; superexpression ) block
    (56) localdirective -> . localvardirective
    (57) localdirective -> . localdecisiondirective
    (58) localdirective -> . localmsgdirective
    (96) type -> . INT
    (97) type -> . FLOAT
    (98) type -> . STRING
    (99) type -> . BOOL
    (111) localvardirective -> . # localvardirectiveB ID
    (115) localdecisiondirective -> . TRACKDECISION
    (116) localdecisiondirective -> . FORGETDECISION
    (117) localdecisiondirective -> . empty
    (114) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 130 (empty -> .)
    ID              shift and go to state 67
    PRINT           shift and go to state 52
    RETURN          shift and go to state 49
    INPUT           shift and go to state 66
    IF              shift and go to state 69
    WHILE           shift and go to state 51
    FOR             shift and go to state 61
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    #               shift and go to state 54
    TRACKDECISION   shift and go to state 56
    FORGETDECISION  shift and go to state 63

  ! ID              [ reduce using rule 130 (empty -> .) ]
  ! PRINT           [ reduce using rule 130 (empty -> .) ]
  ! RETURN          [ reduce using rule 130 (empty -> .) ]
  ! INPUT           [ reduce using rule 130 (empty -> .) ]
  ! IF              [ reduce using rule 130 (empty -> .) ]
  ! WHILE           [ reduce using rule 130 (empty -> .) ]
  ! FOR             [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! #               [ reduce using rule 130 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 130 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 130 (empty -> .) ]

    assignfunccall                 shift and go to state 50
    whileloop                      shift and go to state 53
    localvardirective              shift and go to state 55
    input                          shift and go to state 57
    type                           shift and go to state 16
    empty                          shift and go to state 58
    forloop                        shift and go to state 59
    return                         shift and go to state 60
    instructionsOpt                shift and go to state 114
    localdirective                 shift and go to state 64
    declaration                    shift and go to state 65
    condition                      shift and go to state 68
    instruction                    shift and go to state 70
    localmsgdirective              shift and go to state 71
    localdecisiondirective         shift and go to state 72
    output                         shift and go to state 73

state 71

    (58) localdirective -> localmsgdirective .

    ID              reduce using rule 58 (localdirective -> localmsgdirective .)
    PRINT           reduce using rule 58 (localdirective -> localmsgdirective .)
    RETURN          reduce using rule 58 (localdirective -> localmsgdirective .)
    INPUT           reduce using rule 58 (localdirective -> localmsgdirective .)
    IF              reduce using rule 58 (localdirective -> localmsgdirective .)
    WHILE           reduce using rule 58 (localdirective -> localmsgdirective .)
    FOR             reduce using rule 58 (localdirective -> localmsgdirective .)
    INT             reduce using rule 58 (localdirective -> localmsgdirective .)
    FLOAT           reduce using rule 58 (localdirective -> localmsgdirective .)
    STRING          reduce using rule 58 (localdirective -> localmsgdirective .)
    BOOL            reduce using rule 58 (localdirective -> localmsgdirective .)
    #               reduce using rule 58 (localdirective -> localmsgdirective .)
    TRACKDECISION   reduce using rule 58 (localdirective -> localmsgdirective .)
    FORGETDECISION  reduce using rule 58 (localdirective -> localmsgdirective .)
    }               reduce using rule 58 (localdirective -> localmsgdirective .)


state 72

    (57) localdirective -> localdecisiondirective .

    ID              reduce using rule 57 (localdirective -> localdecisiondirective .)
    PRINT           reduce using rule 57 (localdirective -> localdecisiondirective .)
    RETURN          reduce using rule 57 (localdirective -> localdecisiondirective .)
    INPUT           reduce using rule 57 (localdirective -> localdecisiondirective .)
    IF              reduce using rule 57 (localdirective -> localdecisiondirective .)
    WHILE           reduce using rule 57 (localdirective -> localdecisiondirective .)
    FOR             reduce using rule 57 (localdirective -> localdecisiondirective .)
    INT             reduce using rule 57 (localdirective -> localdecisiondirective .)
    FLOAT           reduce using rule 57 (localdirective -> localdecisiondirective .)
    STRING          reduce using rule 57 (localdirective -> localdecisiondirective .)
    BOOL            reduce using rule 57 (localdirective -> localdecisiondirective .)
    #               reduce using rule 57 (localdirective -> localdecisiondirective .)
    TRACKDECISION   reduce using rule 57 (localdirective -> localdecisiondirective .)
    FORGETDECISION  reduce using rule 57 (localdirective -> localdecisiondirective .)
    }               reduce using rule 57 (localdirective -> localdecisiondirective .)


state 73

    (45) instruction -> output . ;

    ;               shift and go to state 115


state 74

    (31) func -> DEF returntype ID . ( paramsOpt )

    (               shift and go to state 116


state 75

    (19) declarationB -> ID push_operand . dimensionsOpt
    (39) dimensionsOpt -> . dimensions
    (40) dimensionsOpt -> . empty
    (123) dimensions -> . [ superexpression ] dimensionsB
    (130) empty -> .

    [               shift and go to state 110
    =               reduce using rule 130 (empty -> .)
    ,               reduce using rule 130 (empty -> .)
    ;               reduce using rule 130 (empty -> .)

    dimensions                     shift and go to state 106
    dimensionsOpt                  shift and go to state 117
    empty                          shift and go to state 112

state 76

    (25) declarationC -> , . declarationB declarationC
    (19) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 45

    declarationB                   shift and go to state 118

state 77

    (26) declarationC -> ; .

    INT             reduce using rule 26 (declarationC -> ; .)
    FLOAT           reduce using rule 26 (declarationC -> ; .)
    STRING          reduce using rule 26 (declarationC -> ; .)
    BOOL            reduce using rule 26 (declarationC -> ; .)
    DEF             reduce using rule 26 (declarationC -> ; .)
    MAIN            reduce using rule 26 (declarationC -> ; .)
    ID              reduce using rule 26 (declarationC -> ; .)
    PRINT           reduce using rule 26 (declarationC -> ; .)
    RETURN          reduce using rule 26 (declarationC -> ; .)
    INPUT           reduce using rule 26 (declarationC -> ; .)
    IF              reduce using rule 26 (declarationC -> ; .)
    WHILE           reduce using rule 26 (declarationC -> ; .)
    FOR             reduce using rule 26 (declarationC -> ; .)
    #               reduce using rule 26 (declarationC -> ; .)
    TRACKDECISION   reduce using rule 26 (declarationC -> ; .)
    FORGETDECISION  reduce using rule 26 (declarationC -> ; .)
    }               reduce using rule 26 (declarationC -> ; .)


state 78

    (18) declaration -> type push_type declarationB declarationC .

    INT             reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    FLOAT           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    STRING          reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    BOOL            reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    DEF             reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    MAIN            reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    ID              reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    PRINT           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    RETURN          reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    INPUT           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    IF              reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    WHILE           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    FOR             reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    #               reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    }               reduce using rule 18 (declaration -> type push_type declarationB declarationC .)


state 79

    (24) declarationC -> = . push_operator superexpression quadruple_assign declarationD
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 119

state 80

    (29) main -> MAIN ( ) . block
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 120

state 81

    (86) signB -> sign .

    FCONST          reduce using rule 86 (signB -> sign .)
    ICONST          reduce using rule 86 (signB -> sign .)
    SCONST          reduce using rule 86 (signB -> sign .)
    TRUE            reduce using rule 86 (signB -> sign .)
    FALSE           reduce using rule 86 (signB -> sign .)


state 82

    (81) factor -> signB . constant
    (88) constant -> . FCONST
    (89) constant -> . ICONST
    (90) constant -> . SCONST
    (91) constant -> . TRUE
    (92) constant -> . FALSE

    FCONST          shift and go to state 122
    ICONST          shift and go to state 124
    SCONST          shift and go to state 123
    TRUE            shift and go to state 126
    FALSE           shift and go to state 125

    constant                       shift and go to state 121

state 83

    (82) factor -> ( . superexpression )
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 127
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 87

state 84

    (93) sign -> + .

    FCONST          reduce using rule 93 (sign -> + .)
    ICONST          reduce using rule 93 (sign -> + .)
    SCONST          reduce using rule 93 (sign -> + .)
    TRUE            reduce using rule 93 (sign -> + .)
    FALSE           reduce using rule 93 (sign -> + .)


state 85

    (94) sign -> - .

    FCONST          reduce using rule 94 (sign -> - .)
    ICONST          reduce using rule 94 (sign -> - .)
    SCONST          reduce using rule 94 (sign -> - .)
    TRUE            reduce using rule 94 (sign -> - .)
    FALSE           reduce using rule 94 (sign -> - .)


state 86

    (77) term -> factor . termB
    (78) termB -> . / term
    (79) termB -> . * term
    (80) termB -> . empty
    (130) empty -> .

    /               shift and go to state 129
    *               shift and go to state 128
    -               reduce using rule 130 (empty -> .)
    +               reduce using rule 130 (empty -> .)
    <               reduce using rule 130 (empty -> .)
    >               reduce using rule 130 (empty -> .)
    =               reduce using rule 130 (empty -> .)
    &               reduce using rule 130 (empty -> .)
    ;               reduce using rule 130 (empty -> .)
    )               reduce using rule 130 (empty -> .)
    ,               reduce using rule 130 (empty -> .)
    ]               reduce using rule 130 (empty -> .)

    termB                          shift and go to state 130
    empty                          shift and go to state 131

state 87

    (87) signB -> empty .

    FCONST          reduce using rule 87 (signB -> empty .)
    ICONST          reduce using rule 87 (signB -> empty .)
    SCONST          reduce using rule 87 (signB -> empty .)
    TRUE            reduce using rule 87 (signB -> empty .)
    FALSE           reduce using rule 87 (signB -> empty .)


state 88

    (83) factor -> funccall .

    /               reduce using rule 83 (factor -> funccall .)
    *               reduce using rule 83 (factor -> funccall .)
    -               reduce using rule 83 (factor -> funccall .)
    +               reduce using rule 83 (factor -> funccall .)
    <               reduce using rule 83 (factor -> funccall .)
    >               reduce using rule 83 (factor -> funccall .)
    =               reduce using rule 83 (factor -> funccall .)
    &               reduce using rule 83 (factor -> funccall .)
    )               reduce using rule 83 (factor -> funccall .)
    ,               reduce using rule 83 (factor -> funccall .)
    ;               reduce using rule 83 (factor -> funccall .)
    ]               reduce using rule 83 (factor -> funccall .)


state 89

    (126) return -> RETURN superexpression .

    ;               reduce using rule 126 (return -> RETURN superexpression .)


state 90

    (84) factor -> ID . seen_ID dimensionsOpt
    (118) funccall -> ID . ( funccallB funccallC
    (85) seen_ID -> .

    (               shift and go to state 132
    [               reduce using rule 85 (seen_ID -> .)
    /               reduce using rule 85 (seen_ID -> .)
    *               reduce using rule 85 (seen_ID -> .)
    -               reduce using rule 85 (seen_ID -> .)
    +               reduce using rule 85 (seen_ID -> .)
    <               reduce using rule 85 (seen_ID -> .)
    >               reduce using rule 85 (seen_ID -> .)
    =               reduce using rule 85 (seen_ID -> .)
    &               reduce using rule 85 (seen_ID -> .)
    ;               reduce using rule 85 (seen_ID -> .)
    )               reduce using rule 85 (seen_ID -> .)
    ,               reduce using rule 85 (seen_ID -> .)
    ]               reduce using rule 85 (seen_ID -> .)

    seen_ID                        shift and go to state 133

state 91

    (73) exp -> term . expB
    (74) expB -> . - exp
    (75) expB -> . + exp
    (76) expB -> . empty
    (130) empty -> .

    -               shift and go to state 135
    +               shift and go to state 134
    <               reduce using rule 130 (empty -> .)
    >               reduce using rule 130 (empty -> .)
    =               reduce using rule 130 (empty -> .)
    &               reduce using rule 130 (empty -> .)
    ;               reduce using rule 130 (empty -> .)
    )               reduce using rule 130 (empty -> .)
    ,               reduce using rule 130 (empty -> .)
    ]               reduce using rule 130 (empty -> .)

    expB                           shift and go to state 136
    empty                          shift and go to state 137

state 92

    (65) expression -> exp . expressionB
    (66) expressionB -> . < exp
    (67) expressionB -> . > exp
    (68) expressionB -> . < > exp
    (69) expressionB -> . = = exp
    (70) expressionB -> . < = exp
    (71) expressionB -> . > = exp
    (72) expressionB -> . empty
    (130) empty -> .

    <               shift and go to state 140
    >               shift and go to state 142
    =               shift and go to state 139
    &               reduce using rule 130 (empty -> .)
    ;               reduce using rule 130 (empty -> .)
    )               reduce using rule 130 (empty -> .)
    ,               reduce using rule 130 (empty -> .)
    ]               reduce using rule 130 (empty -> .)

    expressionB                    shift and go to state 138
    empty                          shift and go to state 141

state 93

    (62) superexpression -> expression . superexpressionB
    (63) superexpressionB -> . & & superexpression
    (64) superexpressionB -> . empty
    (130) empty -> .

    &               shift and go to state 143
    ;               reduce using rule 130 (empty -> .)
    )               reduce using rule 130 (empty -> .)
    ,               reduce using rule 130 (empty -> .)
    ]               reduce using rule 130 (empty -> .)

    empty                          shift and go to state 144
    superexpressionB               shift and go to state 145

state 94

    (44) instruction -> assignfunccall ; .

    ID              reduce using rule 44 (instruction -> assignfunccall ; .)
    PRINT           reduce using rule 44 (instruction -> assignfunccall ; .)
    RETURN          reduce using rule 44 (instruction -> assignfunccall ; .)
    INPUT           reduce using rule 44 (instruction -> assignfunccall ; .)
    IF              reduce using rule 44 (instruction -> assignfunccall ; .)
    WHILE           reduce using rule 44 (instruction -> assignfunccall ; .)
    FOR             reduce using rule 44 (instruction -> assignfunccall ; .)
    INT             reduce using rule 44 (instruction -> assignfunccall ; .)
    FLOAT           reduce using rule 44 (instruction -> assignfunccall ; .)
    STRING          reduce using rule 44 (instruction -> assignfunccall ; .)
    BOOL            reduce using rule 44 (instruction -> assignfunccall ; .)
    #               reduce using rule 44 (instruction -> assignfunccall ; .)
    TRACKDECISION   reduce using rule 44 (instruction -> assignfunccall ; .)
    FORGETDECISION  reduce using rule 44 (instruction -> assignfunccall ; .)
    }               reduce using rule 44 (instruction -> assignfunccall ; .)


state 95

    (95) whileloop -> WHILE ( . superexpression ) block
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 146
    empty                          shift and go to state 87
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93

state 96

    (106) output -> PRINT ( . outputB
    (107) outputB -> . SCONST outputC
    (108) outputB -> . superexpression outputC
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

  ! shift/reduce conflict for SCONST resolved as shift
    SCONST          shift and go to state 147
    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

  ! SCONST          [ reduce using rule 130 (empty -> .) ]

    term                           shift and go to state 91
    factor                         shift and go to state 86
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 148
    exp                            shift and go to state 92
    outputB                        shift and go to state 149
    expression                     shift and go to state 93
    empty                          shift and go to state 87

state 97

    (113) localvardirectiveB -> FORGET .

    ID              reduce using rule 113 (localvardirectiveB -> FORGET .)


state 98

    (114) localmsgdirective -> # SHOW . SCONST

    SCONST          shift and go to state 150


state 99

    (112) localvardirectiveB -> TRACK .

    ID              reduce using rule 112 (localvardirectiveB -> TRACK .)


state 100

    (111) localvardirective -> # localvardirectiveB . ID

    ID              shift and go to state 151


state 101

    (47) instruction -> input ; .

    ID              reduce using rule 47 (instruction -> input ; .)
    PRINT           reduce using rule 47 (instruction -> input ; .)
    RETURN          reduce using rule 47 (instruction -> input ; .)
    INPUT           reduce using rule 47 (instruction -> input ; .)
    IF              reduce using rule 47 (instruction -> input ; .)
    WHILE           reduce using rule 47 (instruction -> input ; .)
    FOR             reduce using rule 47 (instruction -> input ; .)
    INT             reduce using rule 47 (instruction -> input ; .)
    FLOAT           reduce using rule 47 (instruction -> input ; .)
    STRING          reduce using rule 47 (instruction -> input ; .)
    BOOL            reduce using rule 47 (instruction -> input ; .)
    #               reduce using rule 47 (instruction -> input ; .)
    TRACKDECISION   reduce using rule 47 (instruction -> input ; .)
    FORGETDECISION  reduce using rule 47 (instruction -> input ; .)
    }               reduce using rule 47 (instruction -> input ; .)


state 102

    (46) instruction -> return ; .

    ID              reduce using rule 46 (instruction -> return ; .)
    PRINT           reduce using rule 46 (instruction -> return ; .)
    RETURN          reduce using rule 46 (instruction -> return ; .)
    INPUT           reduce using rule 46 (instruction -> return ; .)
    IF              reduce using rule 46 (instruction -> return ; .)
    WHILE           reduce using rule 46 (instruction -> return ; .)
    FOR             reduce using rule 46 (instruction -> return ; .)
    INT             reduce using rule 46 (instruction -> return ; .)
    FLOAT           reduce using rule 46 (instruction -> return ; .)
    STRING          reduce using rule 46 (instruction -> return ; .)
    BOOL            reduce using rule 46 (instruction -> return ; .)
    #               reduce using rule 46 (instruction -> return ; .)
    TRACKDECISION   reduce using rule 46 (instruction -> return ; .)
    FORGETDECISION  reduce using rule 46 (instruction -> return ; .)
    }               reduce using rule 46 (instruction -> return ; .)


state 103

    (102) forloop -> FOR ( . assign ; superexpression ; superexpression ) block
    (37) assign -> . ID dimensionsOpt = superexpression

    ID              shift and go to state 152

    assign                         shift and go to state 153

state 104

    (34) block -> { instructionsOpt } .

    ID              reduce using rule 34 (block -> { instructionsOpt } .)
    PRINT           reduce using rule 34 (block -> { instructionsOpt } .)
    RETURN          reduce using rule 34 (block -> { instructionsOpt } .)
    INPUT           reduce using rule 34 (block -> { instructionsOpt } .)
    IF              reduce using rule 34 (block -> { instructionsOpt } .)
    WHILE           reduce using rule 34 (block -> { instructionsOpt } .)
    FOR             reduce using rule 34 (block -> { instructionsOpt } .)
    INT             reduce using rule 34 (block -> { instructionsOpt } .)
    FLOAT           reduce using rule 34 (block -> { instructionsOpt } .)
    STRING          reduce using rule 34 (block -> { instructionsOpt } .)
    BOOL            reduce using rule 34 (block -> { instructionsOpt } .)
    #               reduce using rule 34 (block -> { instructionsOpt } .)
    TRACKDECISION   reduce using rule 34 (block -> { instructionsOpt } .)
    FORGETDECISION  reduce using rule 34 (block -> { instructionsOpt } .)
    }               reduce using rule 34 (block -> { instructionsOpt } .)
    DEF             reduce using rule 34 (block -> { instructionsOpt } .)
    $end            reduce using rule 34 (block -> { instructionsOpt } .)
    ELSE            reduce using rule 34 (block -> { instructionsOpt } .)
    MAIN            reduce using rule 34 (block -> { instructionsOpt } .)


state 105

    (103) input -> INPUT ( . ID inputB )

    ID              shift and go to state 154


state 106

    (39) dimensionsOpt -> dimensions .

    /               reduce using rule 39 (dimensionsOpt -> dimensions .)
    *               reduce using rule 39 (dimensionsOpt -> dimensions .)
    -               reduce using rule 39 (dimensionsOpt -> dimensions .)
    +               reduce using rule 39 (dimensionsOpt -> dimensions .)
    <               reduce using rule 39 (dimensionsOpt -> dimensions .)
    >               reduce using rule 39 (dimensionsOpt -> dimensions .)
    =               reduce using rule 39 (dimensionsOpt -> dimensions .)
    &               reduce using rule 39 (dimensionsOpt -> dimensions .)
    ;               reduce using rule 39 (dimensionsOpt -> dimensions .)
    )               reduce using rule 39 (dimensionsOpt -> dimensions .)
    ,               reduce using rule 39 (dimensionsOpt -> dimensions .)
    ]               reduce using rule 39 (dimensionsOpt -> dimensions .)


state 107

    (53) assignfunccall -> ID assignfunccallB .

    ;               reduce using rule 53 (assignfunccall -> ID assignfunccallB .)


state 108

    (54) assignfunccallB -> ( . funccallB funccallC
    (119) funccallB -> . superexpression
    (120) funccallB -> . empty
    (62) superexpression -> . expression superexpressionB
    (130) empty -> .
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -

    ,               reduce using rule 130 (empty -> .)
    )               reduce using rule 130 (empty -> .)
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)
    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85

    funccallB                      shift and go to state 155
    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 157
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 156

state 109

    (55) assignfunccallB -> assignB .

    ;               reduce using rule 55 (assignfunccallB -> assignB .)


state 110

    (123) dimensions -> [ . superexpression ] dimensionsB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 158
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 87

state 111

    (38) assignB -> dimensionsOpt . = superexpression

    =               shift and go to state 159


state 112

    (40) dimensionsOpt -> empty .

    /               reduce using rule 40 (dimensionsOpt -> empty .)
    *               reduce using rule 40 (dimensionsOpt -> empty .)
    -               reduce using rule 40 (dimensionsOpt -> empty .)
    +               reduce using rule 40 (dimensionsOpt -> empty .)
    <               reduce using rule 40 (dimensionsOpt -> empty .)
    >               reduce using rule 40 (dimensionsOpt -> empty .)
    =               reduce using rule 40 (dimensionsOpt -> empty .)
    &               reduce using rule 40 (dimensionsOpt -> empty .)
    ;               reduce using rule 40 (dimensionsOpt -> empty .)
    )               reduce using rule 40 (dimensionsOpt -> empty .)
    ,               reduce using rule 40 (dimensionsOpt -> empty .)
    ]               reduce using rule 40 (dimensionsOpt -> empty .)


state 113

    (41) condition -> IF ( . superexpression ) block else
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 160
    empty                          shift and go to state 87
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93

state 114

    (35) instructionsOpt -> instruction instructionsOpt .

    }               reduce using rule 35 (instructionsOpt -> instruction instructionsOpt .)


state 115

    (45) instruction -> output ; .

    ID              reduce using rule 45 (instruction -> output ; .)
    PRINT           reduce using rule 45 (instruction -> output ; .)
    RETURN          reduce using rule 45 (instruction -> output ; .)
    INPUT           reduce using rule 45 (instruction -> output ; .)
    IF              reduce using rule 45 (instruction -> output ; .)
    WHILE           reduce using rule 45 (instruction -> output ; .)
    FOR             reduce using rule 45 (instruction -> output ; .)
    INT             reduce using rule 45 (instruction -> output ; .)
    FLOAT           reduce using rule 45 (instruction -> output ; .)
    STRING          reduce using rule 45 (instruction -> output ; .)
    BOOL            reduce using rule 45 (instruction -> output ; .)
    #               reduce using rule 45 (instruction -> output ; .)
    TRACKDECISION   reduce using rule 45 (instruction -> output ; .)
    FORGETDECISION  reduce using rule 45 (instruction -> output ; .)
    }               reduce using rule 45 (instruction -> output ; .)


state 116

    (31) func -> DEF returntype ID ( . paramsOpt )
    (32) paramsOpt -> . params paramsB
    (33) paramsOpt -> . empty
    (127) params -> . type ID
    (130) empty -> .
    (96) type -> . INT
    (97) type -> . FLOAT
    (98) type -> . STRING
    (99) type -> . BOOL

    )               reduce using rule 130 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    paramsOpt                      shift and go to state 161
    params                         shift and go to state 162
    type                           shift and go to state 164
    empty                          shift and go to state 163

state 117

    (19) declarationB -> ID push_operand dimensionsOpt .

    =               reduce using rule 19 (declarationB -> ID push_operand dimensionsOpt .)
    ,               reduce using rule 19 (declarationB -> ID push_operand dimensionsOpt .)
    ;               reduce using rule 19 (declarationB -> ID push_operand dimensionsOpt .)


state 118

    (25) declarationC -> , declarationB . declarationC
    (24) declarationC -> . = push_operator superexpression quadruple_assign declarationD
    (25) declarationC -> . , declarationB declarationC
    (26) declarationC -> . ;

    =               shift and go to state 79
    ,               shift and go to state 76
    ;               shift and go to state 77

    declarationC                   shift and go to state 165

state 119

    (24) declarationC -> = push_operator . superexpression quadruple_assign declarationD
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 166
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 87

state 120

    (29) main -> MAIN ( ) block .

    DEF             reduce using rule 29 (main -> MAIN ( ) block .)
    $end            reduce using rule 29 (main -> MAIN ( ) block .)


state 121

    (81) factor -> signB constant .

    /               reduce using rule 81 (factor -> signB constant .)
    *               reduce using rule 81 (factor -> signB constant .)
    -               reduce using rule 81 (factor -> signB constant .)
    +               reduce using rule 81 (factor -> signB constant .)
    <               reduce using rule 81 (factor -> signB constant .)
    >               reduce using rule 81 (factor -> signB constant .)
    =               reduce using rule 81 (factor -> signB constant .)
    &               reduce using rule 81 (factor -> signB constant .)
    )               reduce using rule 81 (factor -> signB constant .)
    ,               reduce using rule 81 (factor -> signB constant .)
    ;               reduce using rule 81 (factor -> signB constant .)
    ]               reduce using rule 81 (factor -> signB constant .)


state 122

    (88) constant -> FCONST .

    /               reduce using rule 88 (constant -> FCONST .)
    *               reduce using rule 88 (constant -> FCONST .)
    -               reduce using rule 88 (constant -> FCONST .)
    +               reduce using rule 88 (constant -> FCONST .)
    <               reduce using rule 88 (constant -> FCONST .)
    >               reduce using rule 88 (constant -> FCONST .)
    =               reduce using rule 88 (constant -> FCONST .)
    &               reduce using rule 88 (constant -> FCONST .)
    ;               reduce using rule 88 (constant -> FCONST .)
    )               reduce using rule 88 (constant -> FCONST .)
    ,               reduce using rule 88 (constant -> FCONST .)
    ]               reduce using rule 88 (constant -> FCONST .)


state 123

    (90) constant -> SCONST .

    /               reduce using rule 90 (constant -> SCONST .)
    *               reduce using rule 90 (constant -> SCONST .)
    -               reduce using rule 90 (constant -> SCONST .)
    +               reduce using rule 90 (constant -> SCONST .)
    <               reduce using rule 90 (constant -> SCONST .)
    >               reduce using rule 90 (constant -> SCONST .)
    =               reduce using rule 90 (constant -> SCONST .)
    &               reduce using rule 90 (constant -> SCONST .)
    ;               reduce using rule 90 (constant -> SCONST .)
    )               reduce using rule 90 (constant -> SCONST .)
    ,               reduce using rule 90 (constant -> SCONST .)
    ]               reduce using rule 90 (constant -> SCONST .)


state 124

    (89) constant -> ICONST .

    /               reduce using rule 89 (constant -> ICONST .)
    *               reduce using rule 89 (constant -> ICONST .)
    -               reduce using rule 89 (constant -> ICONST .)
    +               reduce using rule 89 (constant -> ICONST .)
    <               reduce using rule 89 (constant -> ICONST .)
    >               reduce using rule 89 (constant -> ICONST .)
    =               reduce using rule 89 (constant -> ICONST .)
    &               reduce using rule 89 (constant -> ICONST .)
    ;               reduce using rule 89 (constant -> ICONST .)
    )               reduce using rule 89 (constant -> ICONST .)
    ,               reduce using rule 89 (constant -> ICONST .)
    ]               reduce using rule 89 (constant -> ICONST .)


state 125

    (92) constant -> FALSE .

    /               reduce using rule 92 (constant -> FALSE .)
    *               reduce using rule 92 (constant -> FALSE .)
    -               reduce using rule 92 (constant -> FALSE .)
    +               reduce using rule 92 (constant -> FALSE .)
    <               reduce using rule 92 (constant -> FALSE .)
    >               reduce using rule 92 (constant -> FALSE .)
    =               reduce using rule 92 (constant -> FALSE .)
    &               reduce using rule 92 (constant -> FALSE .)
    ;               reduce using rule 92 (constant -> FALSE .)
    )               reduce using rule 92 (constant -> FALSE .)
    ,               reduce using rule 92 (constant -> FALSE .)
    ]               reduce using rule 92 (constant -> FALSE .)


state 126

    (91) constant -> TRUE .

    /               reduce using rule 91 (constant -> TRUE .)
    *               reduce using rule 91 (constant -> TRUE .)
    -               reduce using rule 91 (constant -> TRUE .)
    +               reduce using rule 91 (constant -> TRUE .)
    <               reduce using rule 91 (constant -> TRUE .)
    >               reduce using rule 91 (constant -> TRUE .)
    =               reduce using rule 91 (constant -> TRUE .)
    &               reduce using rule 91 (constant -> TRUE .)
    ;               reduce using rule 91 (constant -> TRUE .)
    )               reduce using rule 91 (constant -> TRUE .)
    ,               reduce using rule 91 (constant -> TRUE .)
    ]               reduce using rule 91 (constant -> TRUE .)


state 127

    (82) factor -> ( superexpression . )

    )               shift and go to state 167


state 128

    (79) termB -> * . term
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 168
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 129

    (78) termB -> / . term
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 169
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 130

    (77) term -> factor termB .

    -               reduce using rule 77 (term -> factor termB .)
    +               reduce using rule 77 (term -> factor termB .)
    &               reduce using rule 77 (term -> factor termB .)
    ;               reduce using rule 77 (term -> factor termB .)
    )               reduce using rule 77 (term -> factor termB .)
    ,               reduce using rule 77 (term -> factor termB .)
    ]               reduce using rule 77 (term -> factor termB .)
    <               reduce using rule 77 (term -> factor termB .)
    >               reduce using rule 77 (term -> factor termB .)
    =               reduce using rule 77 (term -> factor termB .)


state 131

    (80) termB -> empty .

    -               reduce using rule 80 (termB -> empty .)
    +               reduce using rule 80 (termB -> empty .)
    <               reduce using rule 80 (termB -> empty .)
    >               reduce using rule 80 (termB -> empty .)
    =               reduce using rule 80 (termB -> empty .)
    &               reduce using rule 80 (termB -> empty .)
    ;               reduce using rule 80 (termB -> empty .)
    )               reduce using rule 80 (termB -> empty .)
    ,               reduce using rule 80 (termB -> empty .)
    ]               reduce using rule 80 (termB -> empty .)


state 132

    (118) funccall -> ID ( . funccallB funccallC
    (119) funccallB -> . superexpression
    (120) funccallB -> . empty
    (62) superexpression -> . expression superexpressionB
    (130) empty -> .
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -

    ,               reduce using rule 130 (empty -> .)
    )               reduce using rule 130 (empty -> .)
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)
    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85

    funccallB                      shift and go to state 170
    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 157
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 156

state 133

    (84) factor -> ID seen_ID . dimensionsOpt
    (39) dimensionsOpt -> . dimensions
    (40) dimensionsOpt -> . empty
    (123) dimensions -> . [ superexpression ] dimensionsB
    (130) empty -> .

    [               shift and go to state 110
    /               reduce using rule 130 (empty -> .)
    *               reduce using rule 130 (empty -> .)
    -               reduce using rule 130 (empty -> .)
    +               reduce using rule 130 (empty -> .)
    <               reduce using rule 130 (empty -> .)
    >               reduce using rule 130 (empty -> .)
    =               reduce using rule 130 (empty -> .)
    &               reduce using rule 130 (empty -> .)
    ;               reduce using rule 130 (empty -> .)
    )               reduce using rule 130 (empty -> .)
    ,               reduce using rule 130 (empty -> .)
    ]               reduce using rule 130 (empty -> .)

    dimensions                     shift and go to state 106
    dimensionsOpt                  shift and go to state 171
    empty                          shift and go to state 112

state 134

    (75) expB -> + . exp
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    exp                            shift and go to state 172
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 135

    (74) expB -> - . exp
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    exp                            shift and go to state 173
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 136

    (73) exp -> term expB .

    <               reduce using rule 73 (exp -> term expB .)
    >               reduce using rule 73 (exp -> term expB .)
    =               reduce using rule 73 (exp -> term expB .)
    &               reduce using rule 73 (exp -> term expB .)
    )               reduce using rule 73 (exp -> term expB .)
    ,               reduce using rule 73 (exp -> term expB .)
    ;               reduce using rule 73 (exp -> term expB .)
    ]               reduce using rule 73 (exp -> term expB .)


state 137

    (76) expB -> empty .

    <               reduce using rule 76 (expB -> empty .)
    >               reduce using rule 76 (expB -> empty .)
    =               reduce using rule 76 (expB -> empty .)
    &               reduce using rule 76 (expB -> empty .)
    ;               reduce using rule 76 (expB -> empty .)
    )               reduce using rule 76 (expB -> empty .)
    ,               reduce using rule 76 (expB -> empty .)
    ]               reduce using rule 76 (expB -> empty .)


state 138

    (65) expression -> exp expressionB .

    &               reduce using rule 65 (expression -> exp expressionB .)
    )               reduce using rule 65 (expression -> exp expressionB .)
    ;               reduce using rule 65 (expression -> exp expressionB .)
    ,               reduce using rule 65 (expression -> exp expressionB .)
    ]               reduce using rule 65 (expression -> exp expressionB .)


state 139

    (69) expressionB -> = . = exp

    =               shift and go to state 174


state 140

    (66) expressionB -> < . exp
    (68) expressionB -> < . > exp
    (70) expressionB -> < . = exp
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    >               shift and go to state 176
    =               shift and go to state 175
    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    exp                            shift and go to state 177
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 141

    (72) expressionB -> empty .

    &               reduce using rule 72 (expressionB -> empty .)
    ;               reduce using rule 72 (expressionB -> empty .)
    )               reduce using rule 72 (expressionB -> empty .)
    ,               reduce using rule 72 (expressionB -> empty .)
    ]               reduce using rule 72 (expressionB -> empty .)


state 142

    (67) expressionB -> > . exp
    (71) expressionB -> > . = exp
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    =               shift and go to state 178
    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    exp                            shift and go to state 179
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 143

    (63) superexpressionB -> & . & superexpression

    &               shift and go to state 180


state 144

    (64) superexpressionB -> empty .

    ;               reduce using rule 64 (superexpressionB -> empty .)
    )               reduce using rule 64 (superexpressionB -> empty .)
    ,               reduce using rule 64 (superexpressionB -> empty .)
    ]               reduce using rule 64 (superexpressionB -> empty .)


state 145

    (62) superexpression -> expression superexpressionB .

    ;               reduce using rule 62 (superexpression -> expression superexpressionB .)
    )               reduce using rule 62 (superexpression -> expression superexpressionB .)
    ,               reduce using rule 62 (superexpression -> expression superexpressionB .)
    ]               reduce using rule 62 (superexpression -> expression superexpressionB .)


state 146

    (95) whileloop -> WHILE ( superexpression . ) block

    )               shift and go to state 181


state 147

    (107) outputB -> SCONST . outputC
    (109) outputC -> . )
    (110) outputC -> . , outputB

    )               shift and go to state 182
    ,               shift and go to state 184

    outputC                        shift and go to state 183

state 148

    (108) outputB -> superexpression . outputC
    (109) outputC -> . )
    (110) outputC -> . , outputB

    )               shift and go to state 182
    ,               shift and go to state 184

    outputC                        shift and go to state 185

state 149

    (106) output -> PRINT ( outputB .

    ;               reduce using rule 106 (output -> PRINT ( outputB .)


state 150

    (114) localmsgdirective -> # SHOW SCONST .

    ID              reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    PRINT           reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    RETURN          reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    INPUT           reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    IF              reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    WHILE           reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    FOR             reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    INT             reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    FLOAT           reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    STRING          reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    BOOL            reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    #               reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    TRACKDECISION   reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    FORGETDECISION  reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)
    }               reduce using rule 114 (localmsgdirective -> # SHOW SCONST .)


state 151

    (111) localvardirective -> # localvardirectiveB ID .

    ID              reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    PRINT           reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    RETURN          reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    INPUT           reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    IF              reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    WHILE           reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    FOR             reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    INT             reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    FLOAT           reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    STRING          reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    BOOL            reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    #               reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    TRACKDECISION   reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    FORGETDECISION  reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)
    }               reduce using rule 111 (localvardirective -> # localvardirectiveB ID .)


state 152

    (37) assign -> ID . dimensionsOpt = superexpression
    (39) dimensionsOpt -> . dimensions
    (40) dimensionsOpt -> . empty
    (123) dimensions -> . [ superexpression ] dimensionsB
    (130) empty -> .

    [               shift and go to state 110
    =               reduce using rule 130 (empty -> .)

    dimensionsOpt                  shift and go to state 186
    dimensions                     shift and go to state 106
    empty                          shift and go to state 112

state 153

    (102) forloop -> FOR ( assign . ; superexpression ; superexpression ) block

    ;               shift and go to state 187


state 154

    (103) input -> INPUT ( ID . inputB )
    (104) inputB -> . , ID inputB
    (105) inputB -> . empty
    (130) empty -> .

    ,               shift and go to state 188
    )               reduce using rule 130 (empty -> .)

    inputB                         shift and go to state 189
    empty                          shift and go to state 190

state 155

    (54) assignfunccallB -> ( funccallB . funccallC
    (121) funccallC -> . , funccallB funccallC
    (122) funccallC -> . )

    ,               shift and go to state 193
    )               shift and go to state 192

    funccallC                      shift and go to state 191

state 156

    (120) funccallB -> empty .
    (87) signB -> empty .

    ,               reduce using rule 120 (funccallB -> empty .)
    )               reduce using rule 120 (funccallB -> empty .)
    FCONST          reduce using rule 87 (signB -> empty .)
    ICONST          reduce using rule 87 (signB -> empty .)
    SCONST          reduce using rule 87 (signB -> empty .)
    TRUE            reduce using rule 87 (signB -> empty .)
    FALSE           reduce using rule 87 (signB -> empty .)


state 157

    (119) funccallB -> superexpression .

    ,               reduce using rule 119 (funccallB -> superexpression .)
    )               reduce using rule 119 (funccallB -> superexpression .)


state 158

    (123) dimensions -> [ superexpression . ] dimensionsB

    ]               shift and go to state 194


state 159

    (38) assignB -> dimensionsOpt = . superexpression
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 195
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 87

state 160

    (41) condition -> IF ( superexpression . ) block else

    )               shift and go to state 196


state 161

    (31) func -> DEF returntype ID ( paramsOpt . )

    )               shift and go to state 197


state 162

    (32) paramsOpt -> params . paramsB
    (128) paramsB -> . , params paramsB
    (129) paramsB -> . empty
    (130) empty -> .

    ,               shift and go to state 199
    )               reduce using rule 130 (empty -> .)

    paramsB                        shift and go to state 198
    empty                          shift and go to state 200

state 163

    (33) paramsOpt -> empty .

    )               reduce using rule 33 (paramsOpt -> empty .)


state 164

    (127) params -> type . ID

    ID              shift and go to state 201


state 165

    (25) declarationC -> , declarationB declarationC .

    INT             reduce using rule 25 (declarationC -> , declarationB declarationC .)
    FLOAT           reduce using rule 25 (declarationC -> , declarationB declarationC .)
    STRING          reduce using rule 25 (declarationC -> , declarationB declarationC .)
    BOOL            reduce using rule 25 (declarationC -> , declarationB declarationC .)
    DEF             reduce using rule 25 (declarationC -> , declarationB declarationC .)
    MAIN            reduce using rule 25 (declarationC -> , declarationB declarationC .)
    ID              reduce using rule 25 (declarationC -> , declarationB declarationC .)
    PRINT           reduce using rule 25 (declarationC -> , declarationB declarationC .)
    RETURN          reduce using rule 25 (declarationC -> , declarationB declarationC .)
    INPUT           reduce using rule 25 (declarationC -> , declarationB declarationC .)
    IF              reduce using rule 25 (declarationC -> , declarationB declarationC .)
    WHILE           reduce using rule 25 (declarationC -> , declarationB declarationC .)
    FOR             reduce using rule 25 (declarationC -> , declarationB declarationC .)
    #               reduce using rule 25 (declarationC -> , declarationB declarationC .)
    TRACKDECISION   reduce using rule 25 (declarationC -> , declarationB declarationC .)
    FORGETDECISION  reduce using rule 25 (declarationC -> , declarationB declarationC .)
    }               reduce using rule 25 (declarationC -> , declarationB declarationC .)


state 166

    (24) declarationC -> = push_operator superexpression . quadruple_assign declarationD
    (23) quadruple_assign -> .

    ,               reduce using rule 23 (quadruple_assign -> .)
    ;               reduce using rule 23 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 202

state 167

    (82) factor -> ( superexpression ) .

    /               reduce using rule 82 (factor -> ( superexpression ) .)
    *               reduce using rule 82 (factor -> ( superexpression ) .)
    -               reduce using rule 82 (factor -> ( superexpression ) .)
    +               reduce using rule 82 (factor -> ( superexpression ) .)
    <               reduce using rule 82 (factor -> ( superexpression ) .)
    >               reduce using rule 82 (factor -> ( superexpression ) .)
    =               reduce using rule 82 (factor -> ( superexpression ) .)
    &               reduce using rule 82 (factor -> ( superexpression ) .)
    )               reduce using rule 82 (factor -> ( superexpression ) .)
    ,               reduce using rule 82 (factor -> ( superexpression ) .)
    ;               reduce using rule 82 (factor -> ( superexpression ) .)
    ]               reduce using rule 82 (factor -> ( superexpression ) .)


state 168

    (79) termB -> * term .

    -               reduce using rule 79 (termB -> * term .)
    +               reduce using rule 79 (termB -> * term .)
    <               reduce using rule 79 (termB -> * term .)
    >               reduce using rule 79 (termB -> * term .)
    =               reduce using rule 79 (termB -> * term .)
    &               reduce using rule 79 (termB -> * term .)
    ;               reduce using rule 79 (termB -> * term .)
    )               reduce using rule 79 (termB -> * term .)
    ,               reduce using rule 79 (termB -> * term .)
    ]               reduce using rule 79 (termB -> * term .)


state 169

    (78) termB -> / term .

    -               reduce using rule 78 (termB -> / term .)
    +               reduce using rule 78 (termB -> / term .)
    <               reduce using rule 78 (termB -> / term .)
    >               reduce using rule 78 (termB -> / term .)
    =               reduce using rule 78 (termB -> / term .)
    &               reduce using rule 78 (termB -> / term .)
    ;               reduce using rule 78 (termB -> / term .)
    )               reduce using rule 78 (termB -> / term .)
    ,               reduce using rule 78 (termB -> / term .)
    ]               reduce using rule 78 (termB -> / term .)


state 170

    (118) funccall -> ID ( funccallB . funccallC
    (121) funccallC -> . , funccallB funccallC
    (122) funccallC -> . )

    ,               shift and go to state 193
    )               shift and go to state 192

    funccallC                      shift and go to state 203

state 171

    (84) factor -> ID seen_ID dimensionsOpt .

    /               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    *               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    -               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    +               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    <               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    >               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    =               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    &               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    )               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    ,               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    ;               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)
    ]               reduce using rule 84 (factor -> ID seen_ID dimensionsOpt .)


state 172

    (75) expB -> + exp .

    <               reduce using rule 75 (expB -> + exp .)
    >               reduce using rule 75 (expB -> + exp .)
    =               reduce using rule 75 (expB -> + exp .)
    &               reduce using rule 75 (expB -> + exp .)
    ;               reduce using rule 75 (expB -> + exp .)
    )               reduce using rule 75 (expB -> + exp .)
    ,               reduce using rule 75 (expB -> + exp .)
    ]               reduce using rule 75 (expB -> + exp .)


state 173

    (74) expB -> - exp .

    <               reduce using rule 74 (expB -> - exp .)
    >               reduce using rule 74 (expB -> - exp .)
    =               reduce using rule 74 (expB -> - exp .)
    &               reduce using rule 74 (expB -> - exp .)
    ;               reduce using rule 74 (expB -> - exp .)
    )               reduce using rule 74 (expB -> - exp .)
    ,               reduce using rule 74 (expB -> - exp .)
    ]               reduce using rule 74 (expB -> - exp .)


state 174

    (69) expressionB -> = = . exp
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    exp                            shift and go to state 204
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 175

    (70) expressionB -> < = . exp
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    exp                            shift and go to state 205
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 176

    (68) expressionB -> < > . exp
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    exp                            shift and go to state 206
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 177

    (66) expressionB -> < exp .

    &               reduce using rule 66 (expressionB -> < exp .)
    ;               reduce using rule 66 (expressionB -> < exp .)
    )               reduce using rule 66 (expressionB -> < exp .)
    ,               reduce using rule 66 (expressionB -> < exp .)
    ]               reduce using rule 66 (expressionB -> < exp .)


state 178

    (71) expressionB -> > = . exp
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    exp                            shift and go to state 207
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 179

    (67) expressionB -> > exp .

    &               reduce using rule 67 (expressionB -> > exp .)
    ;               reduce using rule 67 (expressionB -> > exp .)
    )               reduce using rule 67 (expressionB -> > exp .)
    ,               reduce using rule 67 (expressionB -> > exp .)
    ]               reduce using rule 67 (expressionB -> > exp .)


state 180

    (63) superexpressionB -> & & . superexpression
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 208
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 87

state 181

    (95) whileloop -> WHILE ( superexpression ) . block
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 209

state 182

    (109) outputC -> ) .

    ;               reduce using rule 109 (outputC -> ) .)


state 183

    (107) outputB -> SCONST outputC .

    ;               reduce using rule 107 (outputB -> SCONST outputC .)


state 184

    (110) outputC -> , . outputB
    (107) outputB -> . SCONST outputC
    (108) outputB -> . superexpression outputC
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

  ! shift/reduce conflict for SCONST resolved as shift
    SCONST          shift and go to state 147
    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

  ! SCONST          [ reduce using rule 130 (empty -> .) ]

    term                           shift and go to state 91
    factor                         shift and go to state 86
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 148
    exp                            shift and go to state 92
    outputB                        shift and go to state 210
    expression                     shift and go to state 93
    empty                          shift and go to state 87

state 185

    (108) outputB -> superexpression outputC .

    ;               reduce using rule 108 (outputB -> superexpression outputC .)


state 186

    (37) assign -> ID dimensionsOpt . = superexpression

    =               shift and go to state 211


state 187

    (102) forloop -> FOR ( assign ; . superexpression ; superexpression ) block
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 212
    empty                          shift and go to state 87
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93

state 188

    (104) inputB -> , . ID inputB

    ID              shift and go to state 213


state 189

    (103) input -> INPUT ( ID inputB . )

    )               shift and go to state 214


state 190

    (105) inputB -> empty .

    )               reduce using rule 105 (inputB -> empty .)


state 191

    (54) assignfunccallB -> ( funccallB funccallC .

    ;               reduce using rule 54 (assignfunccallB -> ( funccallB funccallC .)


state 192

    (122) funccallC -> ) .

    ;               reduce using rule 122 (funccallC -> ) .)
    /               reduce using rule 122 (funccallC -> ) .)
    *               reduce using rule 122 (funccallC -> ) .)
    -               reduce using rule 122 (funccallC -> ) .)
    +               reduce using rule 122 (funccallC -> ) .)
    <               reduce using rule 122 (funccallC -> ) .)
    >               reduce using rule 122 (funccallC -> ) .)
    =               reduce using rule 122 (funccallC -> ) .)
    &               reduce using rule 122 (funccallC -> ) .)
    )               reduce using rule 122 (funccallC -> ) .)
    ,               reduce using rule 122 (funccallC -> ) .)
    ]               reduce using rule 122 (funccallC -> ) .)


state 193

    (121) funccallC -> , . funccallB funccallC
    (119) funccallB -> . superexpression
    (120) funccallB -> . empty
    (62) superexpression -> . expression superexpressionB
    (130) empty -> .
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -

    ,               reduce using rule 130 (empty -> .)
    )               reduce using rule 130 (empty -> .)
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)
    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85

    funccallB                      shift and go to state 215
    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 157
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 156

state 194

    (123) dimensions -> [ superexpression ] . dimensionsB
    (124) dimensionsB -> . [ superexpression ]
    (125) dimensionsB -> . empty
    (130) empty -> .

    [               shift and go to state 217
    =               reduce using rule 130 (empty -> .)
    ,               reduce using rule 130 (empty -> .)
    ;               reduce using rule 130 (empty -> .)
    /               reduce using rule 130 (empty -> .)
    *               reduce using rule 130 (empty -> .)
    -               reduce using rule 130 (empty -> .)
    +               reduce using rule 130 (empty -> .)
    <               reduce using rule 130 (empty -> .)
    >               reduce using rule 130 (empty -> .)
    &               reduce using rule 130 (empty -> .)
    )               reduce using rule 130 (empty -> .)
    ]               reduce using rule 130 (empty -> .)

    dimensionsB                    shift and go to state 216
    empty                          shift and go to state 218

state 195

    (38) assignB -> dimensionsOpt = superexpression .

    ;               reduce using rule 38 (assignB -> dimensionsOpt = superexpression .)


state 196

    (41) condition -> IF ( superexpression ) . block else
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 219

state 197

    (31) func -> DEF returntype ID ( paramsOpt ) .

    {               reduce using rule 31 (func -> DEF returntype ID ( paramsOpt ) .)


state 198

    (32) paramsOpt -> params paramsB .

    )               reduce using rule 32 (paramsOpt -> params paramsB .)


state 199

    (128) paramsB -> , . params paramsB
    (127) params -> . type ID
    (96) type -> . INT
    (97) type -> . FLOAT
    (98) type -> . STRING
    (99) type -> . BOOL

    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    type                           shift and go to state 164
    params                         shift and go to state 220

state 200

    (129) paramsB -> empty .

    )               reduce using rule 129 (paramsB -> empty .)


state 201

    (127) params -> type ID .

    ,               reduce using rule 127 (params -> type ID .)
    )               reduce using rule 127 (params -> type ID .)


state 202

    (24) declarationC -> = push_operator superexpression quadruple_assign . declarationD
    (27) declarationD -> . , declarationB declarationC
    (28) declarationD -> . ;

    ,               shift and go to state 221
    ;               shift and go to state 222

    declarationD                   shift and go to state 223

state 203

    (118) funccall -> ID ( funccallB funccallC .

    /               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    *               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    -               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    +               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    <               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    >               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    =               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    &               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    ;               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    )               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    ,               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)
    ]               reduce using rule 118 (funccall -> ID ( funccallB funccallC .)


state 204

    (69) expressionB -> = = exp .

    &               reduce using rule 69 (expressionB -> = = exp .)
    ;               reduce using rule 69 (expressionB -> = = exp .)
    )               reduce using rule 69 (expressionB -> = = exp .)
    ,               reduce using rule 69 (expressionB -> = = exp .)
    ]               reduce using rule 69 (expressionB -> = = exp .)


state 205

    (70) expressionB -> < = exp .

    &               reduce using rule 70 (expressionB -> < = exp .)
    ;               reduce using rule 70 (expressionB -> < = exp .)
    )               reduce using rule 70 (expressionB -> < = exp .)
    ,               reduce using rule 70 (expressionB -> < = exp .)
    ]               reduce using rule 70 (expressionB -> < = exp .)


state 206

    (68) expressionB -> < > exp .

    &               reduce using rule 68 (expressionB -> < > exp .)
    ;               reduce using rule 68 (expressionB -> < > exp .)
    )               reduce using rule 68 (expressionB -> < > exp .)
    ,               reduce using rule 68 (expressionB -> < > exp .)
    ]               reduce using rule 68 (expressionB -> < > exp .)


state 207

    (71) expressionB -> > = exp .

    &               reduce using rule 71 (expressionB -> > = exp .)
    ;               reduce using rule 71 (expressionB -> > = exp .)
    )               reduce using rule 71 (expressionB -> > = exp .)
    ,               reduce using rule 71 (expressionB -> > = exp .)
    ]               reduce using rule 71 (expressionB -> > = exp .)


state 208

    (63) superexpressionB -> & & superexpression .

    ;               reduce using rule 63 (superexpressionB -> & & superexpression .)
    )               reduce using rule 63 (superexpressionB -> & & superexpression .)
    ,               reduce using rule 63 (superexpressionB -> & & superexpression .)
    ]               reduce using rule 63 (superexpressionB -> & & superexpression .)


state 209

    (95) whileloop -> WHILE ( superexpression ) block .

    ID              reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    PRINT           reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    RETURN          reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    INPUT           reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    IF              reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    WHILE           reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    FOR             reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    INT             reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    FLOAT           reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    STRING          reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    BOOL            reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    #               reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    TRACKDECISION   reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    FORGETDECISION  reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)
    }               reduce using rule 95 (whileloop -> WHILE ( superexpression ) block .)


state 210

    (110) outputC -> , outputB .

    ;               reduce using rule 110 (outputC -> , outputB .)


state 211

    (37) assign -> ID dimensionsOpt = . superexpression
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 224
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 87

state 212

    (102) forloop -> FOR ( assign ; superexpression . ; superexpression ) block

    ;               shift and go to state 225


state 213

    (104) inputB -> , ID . inputB
    (104) inputB -> . , ID inputB
    (105) inputB -> . empty
    (130) empty -> .

    ,               shift and go to state 188
    )               reduce using rule 130 (empty -> .)

    inputB                         shift and go to state 226
    empty                          shift and go to state 190

state 214

    (103) input -> INPUT ( ID inputB ) .

    ;               reduce using rule 103 (input -> INPUT ( ID inputB ) .)


state 215

    (121) funccallC -> , funccallB . funccallC
    (121) funccallC -> . , funccallB funccallC
    (122) funccallC -> . )

    ,               shift and go to state 193
    )               shift and go to state 192

    funccallC                      shift and go to state 227

state 216

    (123) dimensions -> [ superexpression ] dimensionsB .

    =               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    /               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    *               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    -               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    +               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    <               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    >               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    &               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    ;               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    )               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    ,               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)
    ]               reduce using rule 123 (dimensions -> [ superexpression ] dimensionsB .)


state 217

    (124) dimensionsB -> [ . superexpression ]
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 228
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93
    empty                          shift and go to state 87

state 218

    (125) dimensionsB -> empty .

    =               reduce using rule 125 (dimensionsB -> empty .)
    ,               reduce using rule 125 (dimensionsB -> empty .)
    ;               reduce using rule 125 (dimensionsB -> empty .)
    /               reduce using rule 125 (dimensionsB -> empty .)
    *               reduce using rule 125 (dimensionsB -> empty .)
    -               reduce using rule 125 (dimensionsB -> empty .)
    +               reduce using rule 125 (dimensionsB -> empty .)
    <               reduce using rule 125 (dimensionsB -> empty .)
    >               reduce using rule 125 (dimensionsB -> empty .)
    &               reduce using rule 125 (dimensionsB -> empty .)
    )               reduce using rule 125 (dimensionsB -> empty .)
    ]               reduce using rule 125 (dimensionsB -> empty .)


state 219

    (41) condition -> IF ( superexpression ) block . else
    (42) else -> . ELSE block
    (43) else -> . empty
    (130) empty -> .

    ELSE            shift and go to state 231
    ID              reduce using rule 130 (empty -> .)
    PRINT           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    INPUT           reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    FOR             reduce using rule 130 (empty -> .)
    INT             reduce using rule 130 (empty -> .)
    FLOAT           reduce using rule 130 (empty -> .)
    STRING          reduce using rule 130 (empty -> .)
    BOOL            reduce using rule 130 (empty -> .)
    #               reduce using rule 130 (empty -> .)
    TRACKDECISION   reduce using rule 130 (empty -> .)
    FORGETDECISION  reduce using rule 130 (empty -> .)
    }               reduce using rule 130 (empty -> .)

    empty                          shift and go to state 230
    else                           shift and go to state 229

state 220

    (128) paramsB -> , params . paramsB
    (128) paramsB -> . , params paramsB
    (129) paramsB -> . empty
    (130) empty -> .

    ,               shift and go to state 199
    )               reduce using rule 130 (empty -> .)

    paramsB                        shift and go to state 232
    empty                          shift and go to state 200

state 221

    (27) declarationD -> , . declarationB declarationC
    (19) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 45

    declarationB                   shift and go to state 233

state 222

    (28) declarationD -> ; .

    INT             reduce using rule 28 (declarationD -> ; .)
    FLOAT           reduce using rule 28 (declarationD -> ; .)
    STRING          reduce using rule 28 (declarationD -> ; .)
    BOOL            reduce using rule 28 (declarationD -> ; .)
    DEF             reduce using rule 28 (declarationD -> ; .)
    MAIN            reduce using rule 28 (declarationD -> ; .)
    ID              reduce using rule 28 (declarationD -> ; .)
    PRINT           reduce using rule 28 (declarationD -> ; .)
    RETURN          reduce using rule 28 (declarationD -> ; .)
    INPUT           reduce using rule 28 (declarationD -> ; .)
    IF              reduce using rule 28 (declarationD -> ; .)
    WHILE           reduce using rule 28 (declarationD -> ; .)
    FOR             reduce using rule 28 (declarationD -> ; .)
    #               reduce using rule 28 (declarationD -> ; .)
    TRACKDECISION   reduce using rule 28 (declarationD -> ; .)
    FORGETDECISION  reduce using rule 28 (declarationD -> ; .)
    }               reduce using rule 28 (declarationD -> ; .)


state 223

    (24) declarationC -> = push_operator superexpression quadruple_assign declarationD .

    INT             reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    FLOAT           reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    STRING          reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    BOOL            reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    DEF             reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    MAIN            reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    ID              reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    PRINT           reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    RETURN          reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    INPUT           reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    IF              reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    WHILE           reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    FOR             reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    #               reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    TRACKDECISION   reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    FORGETDECISION  reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)
    }               reduce using rule 24 (declarationC -> = push_operator superexpression quadruple_assign declarationD .)


state 224

    (37) assign -> ID dimensionsOpt = superexpression .

    ;               reduce using rule 37 (assign -> ID dimensionsOpt = superexpression .)


state 225

    (102) forloop -> FOR ( assign ; superexpression ; . superexpression ) block
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term expB
    (77) term -> . factor termB
    (81) factor -> . signB constant
    (82) factor -> . ( superexpression )
    (83) factor -> . funccall
    (84) factor -> . ID seen_ID dimensionsOpt
    (86) signB -> . sign
    (87) signB -> . empty
    (118) funccall -> . ID ( funccallB funccallC
    (93) sign -> . +
    (94) sign -> . -
    (130) empty -> .

    (               shift and go to state 83
    ID              shift and go to state 90
    +               shift and go to state 84
    -               shift and go to state 85
    FCONST          reduce using rule 130 (empty -> .)
    ICONST          reduce using rule 130 (empty -> .)
    SCONST          reduce using rule 130 (empty -> .)
    TRUE            reduce using rule 130 (empty -> .)
    FALSE           reduce using rule 130 (empty -> .)

    term                           shift and go to state 91
    funccall                       shift and go to state 88
    signB                          shift and go to state 82
    sign                           shift and go to state 81
    superexpression                shift and go to state 234
    empty                          shift and go to state 87
    exp                            shift and go to state 92
    factor                         shift and go to state 86
    expression                     shift and go to state 93

state 226

    (104) inputB -> , ID inputB .

    )               reduce using rule 104 (inputB -> , ID inputB .)


state 227

    (121) funccallC -> , funccallB funccallC .

    ;               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    /               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    *               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    -               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    +               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    <               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    >               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    =               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    &               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    )               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    ,               reduce using rule 121 (funccallC -> , funccallB funccallC .)
    ]               reduce using rule 121 (funccallC -> , funccallB funccallC .)


state 228

    (124) dimensionsB -> [ superexpression . ]

    ]               shift and go to state 235


state 229

    (41) condition -> IF ( superexpression ) block else .

    ID              reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    PRINT           reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    RETURN          reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    INPUT           reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    IF              reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    WHILE           reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    FOR             reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    INT             reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    FLOAT           reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    STRING          reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    BOOL            reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    #               reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    TRACKDECISION   reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    FORGETDECISION  reduce using rule 41 (condition -> IF ( superexpression ) block else .)
    }               reduce using rule 41 (condition -> IF ( superexpression ) block else .)


state 230

    (43) else -> empty .

    ID              reduce using rule 43 (else -> empty .)
    PRINT           reduce using rule 43 (else -> empty .)
    RETURN          reduce using rule 43 (else -> empty .)
    INPUT           reduce using rule 43 (else -> empty .)
    IF              reduce using rule 43 (else -> empty .)
    WHILE           reduce using rule 43 (else -> empty .)
    FOR             reduce using rule 43 (else -> empty .)
    INT             reduce using rule 43 (else -> empty .)
    FLOAT           reduce using rule 43 (else -> empty .)
    STRING          reduce using rule 43 (else -> empty .)
    BOOL            reduce using rule 43 (else -> empty .)
    #               reduce using rule 43 (else -> empty .)
    TRACKDECISION   reduce using rule 43 (else -> empty .)
    FORGETDECISION  reduce using rule 43 (else -> empty .)
    }               reduce using rule 43 (else -> empty .)


state 231

    (42) else -> ELSE . block
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 236

state 232

    (128) paramsB -> , params paramsB .

    )               reduce using rule 128 (paramsB -> , params paramsB .)


state 233

    (27) declarationD -> , declarationB . declarationC
    (24) declarationC -> . = push_operator superexpression quadruple_assign declarationD
    (25) declarationC -> . , declarationB declarationC
    (26) declarationC -> . ;

    =               shift and go to state 79
    ,               shift and go to state 76
    ;               shift and go to state 77

    declarationC                   shift and go to state 237

state 234

    (102) forloop -> FOR ( assign ; superexpression ; superexpression . ) block

    )               shift and go to state 238


state 235

    (124) dimensionsB -> [ superexpression ] .

    =               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    ,               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    ;               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    /               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    *               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    -               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    +               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    <               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    >               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    &               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    )               reduce using rule 124 (dimensionsB -> [ superexpression ] .)
    ]               reduce using rule 124 (dimensionsB -> [ superexpression ] .)


state 236

    (42) else -> ELSE block .

    ID              reduce using rule 42 (else -> ELSE block .)
    PRINT           reduce using rule 42 (else -> ELSE block .)
    RETURN          reduce using rule 42 (else -> ELSE block .)
    INPUT           reduce using rule 42 (else -> ELSE block .)
    IF              reduce using rule 42 (else -> ELSE block .)
    WHILE           reduce using rule 42 (else -> ELSE block .)
    FOR             reduce using rule 42 (else -> ELSE block .)
    INT             reduce using rule 42 (else -> ELSE block .)
    FLOAT           reduce using rule 42 (else -> ELSE block .)
    STRING          reduce using rule 42 (else -> ELSE block .)
    BOOL            reduce using rule 42 (else -> ELSE block .)
    #               reduce using rule 42 (else -> ELSE block .)
    TRACKDECISION   reduce using rule 42 (else -> ELSE block .)
    FORGETDECISION  reduce using rule 42 (else -> ELSE block .)
    }               reduce using rule 42 (else -> ELSE block .)


state 237

    (27) declarationD -> , declarationB declarationC .

    INT             reduce using rule 27 (declarationD -> , declarationB declarationC .)
    FLOAT           reduce using rule 27 (declarationD -> , declarationB declarationC .)
    STRING          reduce using rule 27 (declarationD -> , declarationB declarationC .)
    BOOL            reduce using rule 27 (declarationD -> , declarationB declarationC .)
    DEF             reduce using rule 27 (declarationD -> , declarationB declarationC .)
    MAIN            reduce using rule 27 (declarationD -> , declarationB declarationC .)
    ID              reduce using rule 27 (declarationD -> , declarationB declarationC .)
    PRINT           reduce using rule 27 (declarationD -> , declarationB declarationC .)
    RETURN          reduce using rule 27 (declarationD -> , declarationB declarationC .)
    INPUT           reduce using rule 27 (declarationD -> , declarationB declarationC .)
    IF              reduce using rule 27 (declarationD -> , declarationB declarationC .)
    WHILE           reduce using rule 27 (declarationD -> , declarationB declarationC .)
    FOR             reduce using rule 27 (declarationD -> , declarationB declarationC .)
    #               reduce using rule 27 (declarationD -> , declarationB declarationC .)
    TRACKDECISION   reduce using rule 27 (declarationD -> , declarationB declarationC .)
    FORGETDECISION  reduce using rule 27 (declarationD -> , declarationB declarationC .)
    }               reduce using rule 27 (declarationD -> , declarationB declarationC .)


state 238

    (102) forloop -> FOR ( assign ; superexpression ; superexpression ) . block
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 239

state 239

    (102) forloop -> FOR ( assign ; superexpression ; superexpression ) block .

    ID              reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    PRINT           reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    RETURN          reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    INPUT           reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    IF              reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    WHILE           reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    FOR             reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    INT             reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    FLOAT           reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    STRING          reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    BOOL            reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    #               reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    TRACKDECISION   reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    FORGETDECISION  reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)
    }               reduce using rule 102 (forloop -> FOR ( assign ; superexpression ; superexpression ) block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 40 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 40 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for FOR in state 40 resolved as shift
WARNING: shift/reduce conflict for INT in state 40 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 40 resolved as shift
WARNING: shift/reduce conflict for STRING in state 40 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 40 resolved as shift
WARNING: shift/reduce conflict for # in state 40 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 40 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 70 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 70 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for INT in state 70 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 70 resolved as shift
WARNING: shift/reduce conflict for STRING in state 70 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 70 resolved as shift
WARNING: shift/reduce conflict for # in state 70 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 70 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 70 resolved as shift
WARNING: shift/reduce conflict for SCONST in state 96 resolved as shift
WARNING: shift/reduce conflict for SCONST in state 184 resolved as shift
WARNING: reduce/reduce conflict in state 58 resolved using rule (instructionsOpt -> empty)
WARNING: rejected rule (localdecisiondirective -> empty) in state 58
