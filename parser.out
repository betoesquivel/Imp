Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> config body
Rule 2     config -> configdirective config
Rule 3     config -> empty
Rule 4     configdirective -> VARSCONFIG = options
Rule 5     configdirective -> DECISIONSCONFIG = options
Rule 6     configdirective -> COMPLEXITYCONFIG = optionsyesno
Rule 7     options -> SOME
Rule 8     options -> ALL
Rule 9     options -> MOST
Rule 10    options -> NONE
Rule 11    optionsyesno -> YES
Rule 12    optionsyesno -> NO
Rule 13    body -> declarationsOpt funcsOpt main funcsOpt
Rule 14    funcsOpt -> suprafunc funcsOpt
Rule 15    funcsOpt -> empty
Rule 16    declarationsOpt -> declaration declarationsOpt
Rule 17    declarationsOpt -> empty
Rule 18    declaration -> type push_type declarationB declarationC
Rule 19    declarationB -> ID push_operand dimensionsOpt
Rule 20    push_operand -> <empty>
Rule 21    push_type -> <empty>
Rule 22    repush_type -> <empty>
Rule 23    push_operator -> <empty>
Rule 24    quadruple_assign -> <empty>
Rule 25    declarationC -> = push_operator hyperexpression quadruple_assign declarationD
Rule 26    declarationC -> , repush_type declarationB declarationC
Rule 27    declarationC -> ;
Rule 28    declarationD -> , repush_type declarationB declarationC
Rule 29    declarationD -> ;
Rule 30    main -> MAIN ( ) seen_main block
Rule 31    seen_main -> <empty>
Rule 32    suprafunc -> func block
Rule 33    func -> DEF returntype ID ( paramsOpt )
Rule 34    paramsOpt -> params paramsB
Rule 35    paramsOpt -> empty
Rule 36    block -> { instructionsOpt }
Rule 37    instructionsOpt -> instruction instructionsOpt
Rule 38    instructionsOpt -> empty
Rule 39    assign -> ID push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign
Rule 40    assignB -> dimensionsOpt = push_operator hyperexpression quadruple_assign
Rule 41    dimensionsOpt -> dimensions
Rule 42    dimensionsOpt -> empty
Rule 43    condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple
Rule 44    else -> ELSE elsecondition_quadruple block
Rule 45    else -> empty
Rule 46    condition_quadruple -> <empty>
Rule 47    elsecondition_quadruple -> <empty>
Rule 48    endcondition_quadruple -> <empty>
Rule 49    instruction -> assignfunccall ;
Rule 50    instruction -> output ;
Rule 51    instruction -> return ;
Rule 52    instruction -> read ;
Rule 53    instruction -> declaration
Rule 54    instruction -> condition
Rule 55    instruction -> whileloop
Rule 56    instruction -> forloop
Rule 57    instruction -> localdirective
Rule 58    assignfunccall -> ID seen_funccall push_operand assignfunccallB
Rule 59    seen_funccall -> <empty>
Rule 60    pop_operand -> <empty>
Rule 61    assignfunccallB -> ( pop_operand funccallB funccallC
Rule 62    assignfunccallB -> assignB
Rule 63    localdirective -> localvardirective
Rule 64    localdirective -> localdecisiondirective
Rule 65    localdirective -> localmsgdirective
Rule 66    hyperexpression -> superexpression hyperexpressionB
Rule 67    hyperexpressionB -> OR push_operator hyperexpression
Rule 68    hyperexpressionB -> empty
Rule 69    superexpression -> expression superexpressionB
Rule 70    superexpressionB -> AND push_operator superexpression
Rule 71    superexpressionB -> empty
Rule 72    expression -> exp expressionB
Rule 73    expressionB -> < push_operator exp
Rule 74    expressionB -> > push_operator exp
Rule 75    expressionB -> DIFF push_operator exp
Rule 76    expressionB -> EQ push_operator exp
Rule 77    expressionB -> LTEQ push_operator exp
Rule 78    expressionB -> GTEQ push_operator exp
Rule 79    expressionB -> empty
Rule 80    exp -> term seen_term expB
Rule 81    seen_term -> <empty>
Rule 82    expB -> - push_operator exp
Rule 83    expB -> + push_operator exp
Rule 84    expB -> empty
Rule 85    term -> factor seen_factor termB
Rule 86    seen_factor -> <empty>
Rule 87    termB -> / push_operator term
Rule 88    termB -> * push_operator term
Rule 89    termB -> empty
Rule 90    factor -> signB constant
Rule 91    factor -> ( seen_parentheses hyperexpression )
Rule 92    factor -> funccall
Rule 93    factor -> ID seen_ID dimensionsOpt
Rule 94    seen_parentheses -> <empty>
Rule 95    seen_ID -> <empty>
Rule 96    signB -> sign
Rule 97    signB -> empty
Rule 98    seen_fconst -> <empty>
Rule 99    seen_iconst -> <empty>
Rule 100   seen_sconst -> <empty>
Rule 101   seen_true -> <empty>
Rule 102   seen_false -> <empty>
Rule 103   constant -> FCONST seen_fconst
Rule 104   constant -> ICONST seen_iconst
Rule 105   constant -> SCONST seen_sconst
Rule 106   constant -> TRUE seen_true
Rule 107   constant -> FALSE seen_false
Rule 108   sign -> +
Rule 109   sign -> -
Rule 110   whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
Rule 111   init_while -> <empty>
Rule 112   while_quadruple -> <empty>
Rule 113   endwhile_quadruple -> <empty>
Rule 114   type -> INT
Rule 115   type -> FLOAT
Rule 116   type -> STRING
Rule 117   type -> BOOL
Rule 118   returntype -> VOID
Rule 119   returntype -> type
Rule 120   forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
Rule 121   for_quadruple -> <empty>
Rule 122   for_expression -> <empty>
Rule 123   endfor_quadruple -> <empty>
Rule 124   read -> READ ( validate_id push_operand read_quadruple readB )
Rule 125   validate_id -> ID
Rule 126   read_quadruple -> <empty>
Rule 127   readB -> , validate_id push_operand read_quadruple readB
Rule 128   readB -> empty
Rule 129   output -> PRINT ( outputB
Rule 130   outputB -> hyperexpression print_quadruple outputC
Rule 131   print_quadruple -> <empty>
Rule 132   outputC -> )
Rule 133   outputC -> , outputB
Rule 134   localvardirective -> # localvardirectiveB ID
Rule 135   localvardirectiveB -> TRACK
Rule 136   localvardirectiveB -> FORGET
Rule 137   localmsgdirective -> # SHOW SCONST
Rule 138   localdecisiondirective -> TRACKDECISION
Rule 139   localdecisiondirective -> FORGETDECISION
Rule 140   localdecisiondirective -> empty
Rule 141   funccall -> ID ( funccallB funccallC
Rule 142   funccallB -> hyperexpression seen_param
Rule 143   funccallB -> empty
Rule 144   seen_param -> <empty>
Rule 145   funccallC -> , funccallB funccallC
Rule 146   funccallC -> )
Rule 147   dimensions -> [ hyperexpression ] dimensionsB
Rule 148   dimensionsB -> [ hyperexpression ]
Rule 149   dimensionsB -> empty
Rule 150   return -> RETURN hyperexpression return_quadruple
Rule 151   return_quadruple -> <empty>
Rule 152   params -> type ID
Rule 153   paramsB -> , params paramsB
Rule 154   paramsB -> empty
Rule 155   empty -> <empty>

Terminals, with rules where they appear

#                    : 134 137
(                    : 30 33 43 61 91 110 120 124 129 141
)                    : 30 33 43 91 110 120 124 132 146
*                    : 88
+                    : 83 108
,                    : 26 28 127 133 145 153
-                    : 82 109
/                    : 87
;                    : 27 29 49 50 51 52 120 120
<                    : 73
=                    : 4 5 6 25 39 40
>                    : 74
ALL                  : 8
AND                  : 70
BOOL                 : 117
COMPLEXITYCONFIG     : 6
DECISIONSCONFIG      : 5
DEF                  : 33
DIFF                 : 75
ELSE                 : 44
EQ                   : 76
FALSE                : 107
FCONST               : 103
FLOAT                : 115
FOR                  : 120
FORGET               : 136
FORGETDECISION       : 139
GTEQ                 : 78
ICONST               : 104
ID                   : 19 33 39 58 93 125 134 141 152
IF                   : 43
INT                  : 114
LTEQ                 : 77
MAIN                 : 30
MOST                 : 9
NO                   : 12
NONE                 : 10
OR                   : 67
PRINT                : 129
READ                 : 124
RETURN               : 150
SCONST               : 105 137
SHOW                 : 137
SOME                 : 7
STRING               : 116
TRACK                : 135
TRACKDECISION        : 138
TRUE                 : 106
VARSCONFIG           : 4
VOID                 : 118
WHILE                : 110
YES                  : 11
[                    : 147 148
]                    : 147 148
error                : 
{                    : 36
}                    : 36

Nonterminals, with rules where they appear

assign               : 120
assignB              : 62
assignfunccall       : 49
assignfunccallB      : 58
block                : 30 32 43 44 110 120
body                 : 1
condition            : 54
condition_quadruple  : 43
config               : 1 2
configdirective      : 2
constant             : 90
declaration          : 16 53
declarationB         : 18 26 28
declarationC         : 18 26 28
declarationD         : 25
declarationsOpt      : 13 16
dimensions           : 41
dimensionsB          : 147
dimensionsOpt        : 19 39 40 93
else                 : 43
elsecondition_quadruple : 44
empty                : 3 15 17 35 38 42 45 68 71 79 84 89 97 128 140 143 149 154
endcondition_quadruple : 43
endfor_quadruple     : 120
endwhile_quadruple   : 110
exp                  : 72 73 74 75 76 77 78 82 83
expB                 : 80
expression           : 69
expressionB          : 72
factor               : 85
for_expression       : 120
for_quadruple        : 120
forloop              : 56
func                 : 32
funccall             : 92
funccallB            : 61 141 145
funccallC            : 61 141 145
funcsOpt             : 13 13 14
hyperexpression      : 25 39 40 43 67 91 110 120 120 130 142 147 148 150
hyperexpressionB     : 66
init_while           : 110 120
instruction          : 37
instructionsOpt      : 36 37
localdecisiondirective : 64
localdirective       : 57
localmsgdirective    : 65
localvardirective    : 63
localvardirectiveB   : 134
main                 : 13
options              : 4 5
optionsyesno         : 6
output               : 50
outputB              : 129 133
outputC              : 130
params               : 34 153
paramsB              : 34 153
paramsOpt            : 33
pop_operand          : 61
print_quadruple      : 130
program              : 0
push_operand         : 19 39 58 124 127
push_operator        : 25 39 40 67 70 73 74 75 76 77 78 82 83 87 88
push_type            : 18
quadruple_assign     : 25 39 40
read                 : 52
readB                : 124 127
read_quadruple       : 124 127
repush_type          : 26 28
return               : 51
return_quadruple     : 150
returntype           : 33
seen_ID              : 93
seen_factor          : 85
seen_false           : 107
seen_fconst          : 103
seen_funccall        : 58
seen_iconst          : 104
seen_main            : 30
seen_param           : 142
seen_parentheses     : 91
seen_sconst          : 105
seen_term            : 80
seen_true            : 106
sign                 : 96
signB                : 90
superexpression      : 66 70
superexpressionB     : 69
suprafunc            : 14
term                 : 80 87 88
termB                : 85
type                 : 18 119 152
validate_id          : 124 127
while_quadruple      : 110
whileloop            : 55

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . config body
    (2) config -> . configdirective config
    (3) config -> . empty
    (4) configdirective -> . VARSCONFIG = options
    (5) configdirective -> . DECISIONSCONFIG = options
    (6) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (155) empty -> .

    VARSCONFIG      shift and go to state 2
    DECISIONSCONFIG shift and go to state 1
    COMPLEXITYCONFIG shift and go to state 4
    INT             reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    BOOL            reduce using rule 155 (empty -> .)
    DEF             reduce using rule 155 (empty -> .)
    MAIN            reduce using rule 155 (empty -> .)

    configdirective                shift and go to state 3
    program                        shift and go to state 5
    config                         shift and go to state 6
    empty                          shift and go to state 7

state 1

    (5) configdirective -> DECISIONSCONFIG . = options

    =               shift and go to state 8


state 2

    (4) configdirective -> VARSCONFIG . = options

    =               shift and go to state 9


state 3

    (2) config -> configdirective . config
    (2) config -> . configdirective config
    (3) config -> . empty
    (4) configdirective -> . VARSCONFIG = options
    (5) configdirective -> . DECISIONSCONFIG = options
    (6) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (155) empty -> .

    VARSCONFIG      shift and go to state 2
    DECISIONSCONFIG shift and go to state 1
    COMPLEXITYCONFIG shift and go to state 4
    INT             reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    BOOL            reduce using rule 155 (empty -> .)
    DEF             reduce using rule 155 (empty -> .)
    MAIN            reduce using rule 155 (empty -> .)

    config                         shift and go to state 10
    empty                          shift and go to state 7
    configdirective                shift and go to state 3

state 4

    (6) configdirective -> COMPLEXITYCONFIG . = optionsyesno

    =               shift and go to state 11


state 5

    (0) S' -> program .



state 6

    (1) program -> config . body
    (13) body -> . declarationsOpt funcsOpt main funcsOpt
    (16) declarationsOpt -> . declaration declarationsOpt
    (17) declarationsOpt -> . empty
    (18) declaration -> . type push_type declarationB declarationC
    (155) empty -> .
    (114) type -> . INT
    (115) type -> . FLOAT
    (116) type -> . STRING
    (117) type -> . BOOL

    DEF             reduce using rule 155 (empty -> .)
    MAIN            reduce using rule 155 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    body                           shift and go to state 12
    declarationsOpt                shift and go to state 13
    type                           shift and go to state 16
    declaration                    shift and go to state 19
    empty                          shift and go to state 20

state 7

    (3) config -> empty .

    INT             reduce using rule 3 (config -> empty .)
    FLOAT           reduce using rule 3 (config -> empty .)
    STRING          reduce using rule 3 (config -> empty .)
    BOOL            reduce using rule 3 (config -> empty .)
    DEF             reduce using rule 3 (config -> empty .)
    MAIN            reduce using rule 3 (config -> empty .)


state 8

    (5) configdirective -> DECISIONSCONFIG = . options
    (7) options -> . SOME
    (8) options -> . ALL
    (9) options -> . MOST
    (10) options -> . NONE

    SOME            shift and go to state 22
    ALL             shift and go to state 21
    MOST            shift and go to state 24
    NONE            shift and go to state 23

    options                        shift and go to state 25

state 9

    (4) configdirective -> VARSCONFIG = . options
    (7) options -> . SOME
    (8) options -> . ALL
    (9) options -> . MOST
    (10) options -> . NONE

    SOME            shift and go to state 22
    ALL             shift and go to state 21
    MOST            shift and go to state 24
    NONE            shift and go to state 23

    options                        shift and go to state 26

state 10

    (2) config -> configdirective config .

    INT             reduce using rule 2 (config -> configdirective config .)
    FLOAT           reduce using rule 2 (config -> configdirective config .)
    STRING          reduce using rule 2 (config -> configdirective config .)
    BOOL            reduce using rule 2 (config -> configdirective config .)
    DEF             reduce using rule 2 (config -> configdirective config .)
    MAIN            reduce using rule 2 (config -> configdirective config .)


state 11

    (6) configdirective -> COMPLEXITYCONFIG = . optionsyesno
    (11) optionsyesno -> . YES
    (12) optionsyesno -> . NO

    YES             shift and go to state 27
    NO              shift and go to state 29

    optionsyesno                   shift and go to state 28

state 12

    (1) program -> config body .

    $end            reduce using rule 1 (program -> config body .)


state 13

    (13) body -> declarationsOpt . funcsOpt main funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (32) suprafunc -> . func block
    (155) empty -> .
    (33) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 155 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 31
    func                           shift and go to state 32
    empty                          shift and go to state 34

state 14

    (116) type -> STRING .

    ID              reduce using rule 116 (type -> STRING .)


state 15

    (114) type -> INT .

    ID              reduce using rule 114 (type -> INT .)


state 16

    (18) declaration -> type . push_type declarationB declarationC
    (21) push_type -> .

    ID              reduce using rule 21 (push_type -> .)

    push_type                      shift and go to state 35

state 17

    (115) type -> FLOAT .

    ID              reduce using rule 115 (type -> FLOAT .)


state 18

    (117) type -> BOOL .

    ID              reduce using rule 117 (type -> BOOL .)


state 19

    (16) declarationsOpt -> declaration . declarationsOpt
    (16) declarationsOpt -> . declaration declarationsOpt
    (17) declarationsOpt -> . empty
    (18) declaration -> . type push_type declarationB declarationC
    (155) empty -> .
    (114) type -> . INT
    (115) type -> . FLOAT
    (116) type -> . STRING
    (117) type -> . BOOL

    DEF             reduce using rule 155 (empty -> .)
    MAIN            reduce using rule 155 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    declarationsOpt                shift and go to state 36
    declaration                    shift and go to state 19
    type                           shift and go to state 16
    empty                          shift and go to state 20

state 20

    (17) declarationsOpt -> empty .

    DEF             reduce using rule 17 (declarationsOpt -> empty .)
    MAIN            reduce using rule 17 (declarationsOpt -> empty .)


state 21

    (8) options -> ALL .

    VARSCONFIG      reduce using rule 8 (options -> ALL .)
    DECISIONSCONFIG reduce using rule 8 (options -> ALL .)
    COMPLEXITYCONFIG reduce using rule 8 (options -> ALL .)
    INT             reduce using rule 8 (options -> ALL .)
    FLOAT           reduce using rule 8 (options -> ALL .)
    STRING          reduce using rule 8 (options -> ALL .)
    BOOL            reduce using rule 8 (options -> ALL .)
    DEF             reduce using rule 8 (options -> ALL .)
    MAIN            reduce using rule 8 (options -> ALL .)


state 22

    (7) options -> SOME .

    VARSCONFIG      reduce using rule 7 (options -> SOME .)
    DECISIONSCONFIG reduce using rule 7 (options -> SOME .)
    COMPLEXITYCONFIG reduce using rule 7 (options -> SOME .)
    INT             reduce using rule 7 (options -> SOME .)
    FLOAT           reduce using rule 7 (options -> SOME .)
    STRING          reduce using rule 7 (options -> SOME .)
    BOOL            reduce using rule 7 (options -> SOME .)
    DEF             reduce using rule 7 (options -> SOME .)
    MAIN            reduce using rule 7 (options -> SOME .)


state 23

    (10) options -> NONE .

    VARSCONFIG      reduce using rule 10 (options -> NONE .)
    DECISIONSCONFIG reduce using rule 10 (options -> NONE .)
    COMPLEXITYCONFIG reduce using rule 10 (options -> NONE .)
    INT             reduce using rule 10 (options -> NONE .)
    FLOAT           reduce using rule 10 (options -> NONE .)
    STRING          reduce using rule 10 (options -> NONE .)
    BOOL            reduce using rule 10 (options -> NONE .)
    DEF             reduce using rule 10 (options -> NONE .)
    MAIN            reduce using rule 10 (options -> NONE .)


state 24

    (9) options -> MOST .

    VARSCONFIG      reduce using rule 9 (options -> MOST .)
    DECISIONSCONFIG reduce using rule 9 (options -> MOST .)
    COMPLEXITYCONFIG reduce using rule 9 (options -> MOST .)
    INT             reduce using rule 9 (options -> MOST .)
    FLOAT           reduce using rule 9 (options -> MOST .)
    STRING          reduce using rule 9 (options -> MOST .)
    BOOL            reduce using rule 9 (options -> MOST .)
    DEF             reduce using rule 9 (options -> MOST .)
    MAIN            reduce using rule 9 (options -> MOST .)


state 25

    (5) configdirective -> DECISIONSCONFIG = options .

    VARSCONFIG      reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    INT             reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    FLOAT           reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    STRING          reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    BOOL            reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    DEF             reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    MAIN            reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)


state 26

    (4) configdirective -> VARSCONFIG = options .

    VARSCONFIG      reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    INT             reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    FLOAT           reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    STRING          reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    BOOL            reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    DEF             reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    MAIN            reduce using rule 4 (configdirective -> VARSCONFIG = options .)


state 27

    (11) optionsyesno -> YES .

    VARSCONFIG      reduce using rule 11 (optionsyesno -> YES .)
    DECISIONSCONFIG reduce using rule 11 (optionsyesno -> YES .)
    COMPLEXITYCONFIG reduce using rule 11 (optionsyesno -> YES .)
    INT             reduce using rule 11 (optionsyesno -> YES .)
    FLOAT           reduce using rule 11 (optionsyesno -> YES .)
    STRING          reduce using rule 11 (optionsyesno -> YES .)
    BOOL            reduce using rule 11 (optionsyesno -> YES .)
    DEF             reduce using rule 11 (optionsyesno -> YES .)
    MAIN            reduce using rule 11 (optionsyesno -> YES .)


state 28

    (6) configdirective -> COMPLEXITYCONFIG = optionsyesno .

    VARSCONFIG      reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DECISIONSCONFIG reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    COMPLEXITYCONFIG reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    INT             reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    FLOAT           reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    STRING          reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    BOOL            reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DEF             reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    MAIN            reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)


state 29

    (12) optionsyesno -> NO .

    VARSCONFIG      reduce using rule 12 (optionsyesno -> NO .)
    DECISIONSCONFIG reduce using rule 12 (optionsyesno -> NO .)
    COMPLEXITYCONFIG reduce using rule 12 (optionsyesno -> NO .)
    INT             reduce using rule 12 (optionsyesno -> NO .)
    FLOAT           reduce using rule 12 (optionsyesno -> NO .)
    STRING          reduce using rule 12 (optionsyesno -> NO .)
    BOOL            reduce using rule 12 (optionsyesno -> NO .)
    DEF             reduce using rule 12 (optionsyesno -> NO .)
    MAIN            reduce using rule 12 (optionsyesno -> NO .)


state 30

    (14) funcsOpt -> suprafunc . funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (32) suprafunc -> . func block
    (155) empty -> .
    (33) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 155 (empty -> .)
    $end            reduce using rule 155 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 37
    empty                          shift and go to state 34
    func                           shift and go to state 32

state 31

    (13) body -> declarationsOpt funcsOpt . main funcsOpt
    (30) main -> . MAIN ( ) seen_main block

    MAIN            shift and go to state 38

    main                           shift and go to state 39

state 32

    (32) suprafunc -> func . block
    (36) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 41

state 33

    (33) func -> DEF . returntype ID ( paramsOpt )
    (118) returntype -> . VOID
    (119) returntype -> . type
    (114) type -> . INT
    (115) type -> . FLOAT
    (116) type -> . STRING
    (117) type -> . BOOL

    VOID            shift and go to state 42
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    returntype                     shift and go to state 43
    type                           shift and go to state 44

state 34

    (15) funcsOpt -> empty .

    MAIN            reduce using rule 15 (funcsOpt -> empty .)
    $end            reduce using rule 15 (funcsOpt -> empty .)


state 35

    (18) declaration -> type push_type . declarationB declarationC
    (19) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 45

    declarationB                   shift and go to state 46

state 36

    (16) declarationsOpt -> declaration declarationsOpt .

    DEF             reduce using rule 16 (declarationsOpt -> declaration declarationsOpt .)
    MAIN            reduce using rule 16 (declarationsOpt -> declaration declarationsOpt .)


state 37

    (14) funcsOpt -> suprafunc funcsOpt .

    MAIN            reduce using rule 14 (funcsOpt -> suprafunc funcsOpt .)
    $end            reduce using rule 14 (funcsOpt -> suprafunc funcsOpt .)


state 38

    (30) main -> MAIN . ( ) seen_main block

    (               shift and go to state 47


state 39

    (13) body -> declarationsOpt funcsOpt main . funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (32) suprafunc -> . func block
    (155) empty -> .
    (33) func -> . DEF returntype ID ( paramsOpt )

    $end            reduce using rule 155 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 48
    func                           shift and go to state 32
    empty                          shift and go to state 34

state 40

    (36) block -> { . instructionsOpt }
    (37) instructionsOpt -> . instruction instructionsOpt
    (38) instructionsOpt -> . empty
    (49) instruction -> . assignfunccall ;
    (50) instruction -> . output ;
    (51) instruction -> . return ;
    (52) instruction -> . read ;
    (53) instruction -> . declaration
    (54) instruction -> . condition
    (55) instruction -> . whileloop
    (56) instruction -> . forloop
    (57) instruction -> . localdirective
    (155) empty -> .
    (58) assignfunccall -> . ID seen_funccall push_operand assignfunccallB
    (129) output -> . PRINT ( outputB
    (150) return -> . RETURN hyperexpression return_quadruple
    (124) read -> . READ ( validate_id push_operand read_quadruple readB )
    (18) declaration -> . type push_type declarationB declarationC
    (43) condition -> . IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple
    (110) whileloop -> . WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
    (120) forloop -> . FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (63) localdirective -> . localvardirective
    (64) localdirective -> . localdecisiondirective
    (65) localdirective -> . localmsgdirective
    (114) type -> . INT
    (115) type -> . FLOAT
    (116) type -> . STRING
    (117) type -> . BOOL
    (134) localvardirective -> . # localvardirectiveB ID
    (138) localdecisiondirective -> . TRACKDECISION
    (139) localdecisiondirective -> . FORGETDECISION
    (140) localdecisiondirective -> . empty
    (137) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 155 (empty -> .)
    ID              shift and go to state 68
    PRINT           shift and go to state 52
    RETURN          shift and go to state 49
    READ            shift and go to state 50
    IF              shift and go to state 70
    WHILE           shift and go to state 51
    FOR             shift and go to state 61
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    #               shift and go to state 54
    TRACKDECISION   shift and go to state 56
    FORGETDECISION  shift and go to state 65

  ! ID              [ reduce using rule 155 (empty -> .) ]
  ! PRINT           [ reduce using rule 155 (empty -> .) ]
  ! RETURN          [ reduce using rule 155 (empty -> .) ]
  ! READ            [ reduce using rule 155 (empty -> .) ]
  ! IF              [ reduce using rule 155 (empty -> .) ]
  ! WHILE           [ reduce using rule 155 (empty -> .) ]
  ! FOR             [ reduce using rule 155 (empty -> .) ]
  ! INT             [ reduce using rule 155 (empty -> .) ]
  ! FLOAT           [ reduce using rule 155 (empty -> .) ]
  ! STRING          [ reduce using rule 155 (empty -> .) ]
  ! BOOL            [ reduce using rule 155 (empty -> .) ]
  ! #               [ reduce using rule 155 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 155 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 155 (empty -> .) ]

    whileloop                      shift and go to state 53
    localvardirective              shift and go to state 55
    localmsgdirective              shift and go to state 57
    type                           shift and go to state 16
    empty                          shift and go to state 58
    forloop                        shift and go to state 59
    return                         shift and go to state 60
    read                           shift and go to state 62
    instructionsOpt                shift and go to state 63
    assignfunccall                 shift and go to state 64
    localdirective                 shift and go to state 66
    declaration                    shift and go to state 67
    condition                      shift and go to state 69
    instruction                    shift and go to state 71
    localdecisiondirective         shift and go to state 72
    output                         shift and go to state 73

state 41

    (32) suprafunc -> func block .

    DEF             reduce using rule 32 (suprafunc -> func block .)
    MAIN            reduce using rule 32 (suprafunc -> func block .)
    $end            reduce using rule 32 (suprafunc -> func block .)


state 42

    (118) returntype -> VOID .

    ID              reduce using rule 118 (returntype -> VOID .)


state 43

    (33) func -> DEF returntype . ID ( paramsOpt )

    ID              shift and go to state 74


state 44

    (119) returntype -> type .

    ID              reduce using rule 119 (returntype -> type .)


state 45

    (19) declarationB -> ID . push_operand dimensionsOpt
    (20) push_operand -> .

    [               reduce using rule 20 (push_operand -> .)
    =               reduce using rule 20 (push_operand -> .)
    ,               reduce using rule 20 (push_operand -> .)
    ;               reduce using rule 20 (push_operand -> .)

    push_operand                   shift and go to state 75

state 46

    (18) declaration -> type push_type declarationB . declarationC
    (25) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (26) declarationC -> . , repush_type declarationB declarationC
    (27) declarationC -> . ;

    =               shift and go to state 79
    ,               shift and go to state 76
    ;               shift and go to state 77

    declarationC                   shift and go to state 78

state 47

    (30) main -> MAIN ( . ) seen_main block

    )               shift and go to state 80


state 48

    (13) body -> declarationsOpt funcsOpt main funcsOpt .

    $end            reduce using rule 13 (body -> declarationsOpt funcsOpt main funcsOpt .)


state 49

    (150) return -> RETURN . hyperexpression return_quadruple
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 85
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 50

    (124) read -> READ . ( validate_id push_operand read_quadruple readB )

    (               shift and go to state 95


state 51

    (110) whileloop -> WHILE . init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
    (111) init_while -> .

    (               reduce using rule 111 (init_while -> .)

    init_while                     shift and go to state 96

state 52

    (129) output -> PRINT . ( outputB

    (               shift and go to state 97


state 53

    (55) instruction -> whileloop .

    ID              reduce using rule 55 (instruction -> whileloop .)
    PRINT           reduce using rule 55 (instruction -> whileloop .)
    RETURN          reduce using rule 55 (instruction -> whileloop .)
    READ            reduce using rule 55 (instruction -> whileloop .)
    IF              reduce using rule 55 (instruction -> whileloop .)
    WHILE           reduce using rule 55 (instruction -> whileloop .)
    FOR             reduce using rule 55 (instruction -> whileloop .)
    INT             reduce using rule 55 (instruction -> whileloop .)
    FLOAT           reduce using rule 55 (instruction -> whileloop .)
    STRING          reduce using rule 55 (instruction -> whileloop .)
    BOOL            reduce using rule 55 (instruction -> whileloop .)
    #               reduce using rule 55 (instruction -> whileloop .)
    TRACKDECISION   reduce using rule 55 (instruction -> whileloop .)
    FORGETDECISION  reduce using rule 55 (instruction -> whileloop .)
    }               reduce using rule 55 (instruction -> whileloop .)


state 54

    (134) localvardirective -> # . localvardirectiveB ID
    (137) localmsgdirective -> # . SHOW SCONST
    (135) localvardirectiveB -> . TRACK
    (136) localvardirectiveB -> . FORGET

    SHOW            shift and go to state 99
    TRACK           shift and go to state 100
    FORGET          shift and go to state 98

    localvardirectiveB             shift and go to state 101

state 55

    (63) localdirective -> localvardirective .

    ID              reduce using rule 63 (localdirective -> localvardirective .)
    PRINT           reduce using rule 63 (localdirective -> localvardirective .)
    RETURN          reduce using rule 63 (localdirective -> localvardirective .)
    READ            reduce using rule 63 (localdirective -> localvardirective .)
    IF              reduce using rule 63 (localdirective -> localvardirective .)
    WHILE           reduce using rule 63 (localdirective -> localvardirective .)
    FOR             reduce using rule 63 (localdirective -> localvardirective .)
    INT             reduce using rule 63 (localdirective -> localvardirective .)
    FLOAT           reduce using rule 63 (localdirective -> localvardirective .)
    STRING          reduce using rule 63 (localdirective -> localvardirective .)
    BOOL            reduce using rule 63 (localdirective -> localvardirective .)
    #               reduce using rule 63 (localdirective -> localvardirective .)
    TRACKDECISION   reduce using rule 63 (localdirective -> localvardirective .)
    FORGETDECISION  reduce using rule 63 (localdirective -> localvardirective .)
    }               reduce using rule 63 (localdirective -> localvardirective .)


state 56

    (138) localdecisiondirective -> TRACKDECISION .

    ID              reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    PRINT           reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    RETURN          reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    READ            reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    IF              reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    WHILE           reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    FOR             reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    INT             reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    FLOAT           reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    STRING          reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    BOOL            reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    #               reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    TRACKDECISION   reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    FORGETDECISION  reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)
    }               reduce using rule 138 (localdecisiondirective -> TRACKDECISION .)


state 57

    (65) localdirective -> localmsgdirective .

    ID              reduce using rule 65 (localdirective -> localmsgdirective .)
    PRINT           reduce using rule 65 (localdirective -> localmsgdirective .)
    RETURN          reduce using rule 65 (localdirective -> localmsgdirective .)
    READ            reduce using rule 65 (localdirective -> localmsgdirective .)
    IF              reduce using rule 65 (localdirective -> localmsgdirective .)
    WHILE           reduce using rule 65 (localdirective -> localmsgdirective .)
    FOR             reduce using rule 65 (localdirective -> localmsgdirective .)
    INT             reduce using rule 65 (localdirective -> localmsgdirective .)
    FLOAT           reduce using rule 65 (localdirective -> localmsgdirective .)
    STRING          reduce using rule 65 (localdirective -> localmsgdirective .)
    BOOL            reduce using rule 65 (localdirective -> localmsgdirective .)
    #               reduce using rule 65 (localdirective -> localmsgdirective .)
    TRACKDECISION   reduce using rule 65 (localdirective -> localmsgdirective .)
    FORGETDECISION  reduce using rule 65 (localdirective -> localmsgdirective .)
    }               reduce using rule 65 (localdirective -> localmsgdirective .)


state 58

    (38) instructionsOpt -> empty .
    (140) localdecisiondirective -> empty .

  ! reduce/reduce conflict for } resolved using rule 38 (instructionsOpt -> empty .)
    }               reduce using rule 38 (instructionsOpt -> empty .)
    ID              reduce using rule 140 (localdecisiondirective -> empty .)
    PRINT           reduce using rule 140 (localdecisiondirective -> empty .)
    RETURN          reduce using rule 140 (localdecisiondirective -> empty .)
    READ            reduce using rule 140 (localdecisiondirective -> empty .)
    IF              reduce using rule 140 (localdecisiondirective -> empty .)
    WHILE           reduce using rule 140 (localdecisiondirective -> empty .)
    FOR             reduce using rule 140 (localdecisiondirective -> empty .)
    INT             reduce using rule 140 (localdecisiondirective -> empty .)
    FLOAT           reduce using rule 140 (localdecisiondirective -> empty .)
    STRING          reduce using rule 140 (localdecisiondirective -> empty .)
    BOOL            reduce using rule 140 (localdecisiondirective -> empty .)
    #               reduce using rule 140 (localdecisiondirective -> empty .)
    TRACKDECISION   reduce using rule 140 (localdecisiondirective -> empty .)
    FORGETDECISION  reduce using rule 140 (localdecisiondirective -> empty .)

  ! }               [ reduce using rule 140 (localdecisiondirective -> empty .) ]


state 59

    (56) instruction -> forloop .

    ID              reduce using rule 56 (instruction -> forloop .)
    PRINT           reduce using rule 56 (instruction -> forloop .)
    RETURN          reduce using rule 56 (instruction -> forloop .)
    READ            reduce using rule 56 (instruction -> forloop .)
    IF              reduce using rule 56 (instruction -> forloop .)
    WHILE           reduce using rule 56 (instruction -> forloop .)
    FOR             reduce using rule 56 (instruction -> forloop .)
    INT             reduce using rule 56 (instruction -> forloop .)
    FLOAT           reduce using rule 56 (instruction -> forloop .)
    STRING          reduce using rule 56 (instruction -> forloop .)
    BOOL            reduce using rule 56 (instruction -> forloop .)
    #               reduce using rule 56 (instruction -> forloop .)
    TRACKDECISION   reduce using rule 56 (instruction -> forloop .)
    FORGETDECISION  reduce using rule 56 (instruction -> forloop .)
    }               reduce using rule 56 (instruction -> forloop .)


state 60

    (51) instruction -> return . ;

    ;               shift and go to state 102


state 61

    (120) forloop -> FOR . ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple

    (               shift and go to state 103


state 62

    (52) instruction -> read . ;

    ;               shift and go to state 104


state 63

    (36) block -> { instructionsOpt . }

    }               shift and go to state 105


state 64

    (49) instruction -> assignfunccall . ;

    ;               shift and go to state 106


state 65

    (139) localdecisiondirective -> FORGETDECISION .

    ID              reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    PRINT           reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    RETURN          reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    READ            reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    IF              reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    WHILE           reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    FOR             reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    INT             reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    FLOAT           reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    STRING          reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    BOOL            reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    #               reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    TRACKDECISION   reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    FORGETDECISION  reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)
    }               reduce using rule 139 (localdecisiondirective -> FORGETDECISION .)


state 66

    (57) instruction -> localdirective .

    ID              reduce using rule 57 (instruction -> localdirective .)
    PRINT           reduce using rule 57 (instruction -> localdirective .)
    RETURN          reduce using rule 57 (instruction -> localdirective .)
    READ            reduce using rule 57 (instruction -> localdirective .)
    IF              reduce using rule 57 (instruction -> localdirective .)
    WHILE           reduce using rule 57 (instruction -> localdirective .)
    FOR             reduce using rule 57 (instruction -> localdirective .)
    INT             reduce using rule 57 (instruction -> localdirective .)
    FLOAT           reduce using rule 57 (instruction -> localdirective .)
    STRING          reduce using rule 57 (instruction -> localdirective .)
    BOOL            reduce using rule 57 (instruction -> localdirective .)
    #               reduce using rule 57 (instruction -> localdirective .)
    TRACKDECISION   reduce using rule 57 (instruction -> localdirective .)
    FORGETDECISION  reduce using rule 57 (instruction -> localdirective .)
    }               reduce using rule 57 (instruction -> localdirective .)


state 67

    (53) instruction -> declaration .

    ID              reduce using rule 53 (instruction -> declaration .)
    PRINT           reduce using rule 53 (instruction -> declaration .)
    RETURN          reduce using rule 53 (instruction -> declaration .)
    READ            reduce using rule 53 (instruction -> declaration .)
    IF              reduce using rule 53 (instruction -> declaration .)
    WHILE           reduce using rule 53 (instruction -> declaration .)
    FOR             reduce using rule 53 (instruction -> declaration .)
    INT             reduce using rule 53 (instruction -> declaration .)
    FLOAT           reduce using rule 53 (instruction -> declaration .)
    STRING          reduce using rule 53 (instruction -> declaration .)
    BOOL            reduce using rule 53 (instruction -> declaration .)
    #               reduce using rule 53 (instruction -> declaration .)
    TRACKDECISION   reduce using rule 53 (instruction -> declaration .)
    FORGETDECISION  reduce using rule 53 (instruction -> declaration .)
    }               reduce using rule 53 (instruction -> declaration .)


state 68

    (58) assignfunccall -> ID . seen_funccall push_operand assignfunccallB
    (59) seen_funccall -> .

    (               reduce using rule 59 (seen_funccall -> .)
    [               reduce using rule 59 (seen_funccall -> .)
    =               reduce using rule 59 (seen_funccall -> .)

    seen_funccall                  shift and go to state 107

state 69

    (54) instruction -> condition .

    ID              reduce using rule 54 (instruction -> condition .)
    PRINT           reduce using rule 54 (instruction -> condition .)
    RETURN          reduce using rule 54 (instruction -> condition .)
    READ            reduce using rule 54 (instruction -> condition .)
    IF              reduce using rule 54 (instruction -> condition .)
    WHILE           reduce using rule 54 (instruction -> condition .)
    FOR             reduce using rule 54 (instruction -> condition .)
    INT             reduce using rule 54 (instruction -> condition .)
    FLOAT           reduce using rule 54 (instruction -> condition .)
    STRING          reduce using rule 54 (instruction -> condition .)
    BOOL            reduce using rule 54 (instruction -> condition .)
    #               reduce using rule 54 (instruction -> condition .)
    TRACKDECISION   reduce using rule 54 (instruction -> condition .)
    FORGETDECISION  reduce using rule 54 (instruction -> condition .)
    }               reduce using rule 54 (instruction -> condition .)


state 70

    (43) condition -> IF . ( hyperexpression condition_quadruple ) block else endcondition_quadruple

    (               shift and go to state 108


state 71

    (37) instructionsOpt -> instruction . instructionsOpt
    (37) instructionsOpt -> . instruction instructionsOpt
    (38) instructionsOpt -> . empty
    (49) instruction -> . assignfunccall ;
    (50) instruction -> . output ;
    (51) instruction -> . return ;
    (52) instruction -> . read ;
    (53) instruction -> . declaration
    (54) instruction -> . condition
    (55) instruction -> . whileloop
    (56) instruction -> . forloop
    (57) instruction -> . localdirective
    (155) empty -> .
    (58) assignfunccall -> . ID seen_funccall push_operand assignfunccallB
    (129) output -> . PRINT ( outputB
    (150) return -> . RETURN hyperexpression return_quadruple
    (124) read -> . READ ( validate_id push_operand read_quadruple readB )
    (18) declaration -> . type push_type declarationB declarationC
    (43) condition -> . IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple
    (110) whileloop -> . WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple
    (120) forloop -> . FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (63) localdirective -> . localvardirective
    (64) localdirective -> . localdecisiondirective
    (65) localdirective -> . localmsgdirective
    (114) type -> . INT
    (115) type -> . FLOAT
    (116) type -> . STRING
    (117) type -> . BOOL
    (134) localvardirective -> . # localvardirectiveB ID
    (138) localdecisiondirective -> . TRACKDECISION
    (139) localdecisiondirective -> . FORGETDECISION
    (140) localdecisiondirective -> . empty
    (137) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 155 (empty -> .)
    ID              shift and go to state 68
    PRINT           shift and go to state 52
    RETURN          shift and go to state 49
    READ            shift and go to state 50
    IF              shift and go to state 70
    WHILE           shift and go to state 51
    FOR             shift and go to state 61
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    #               shift and go to state 54
    TRACKDECISION   shift and go to state 56
    FORGETDECISION  shift and go to state 65

  ! ID              [ reduce using rule 155 (empty -> .) ]
  ! PRINT           [ reduce using rule 155 (empty -> .) ]
  ! RETURN          [ reduce using rule 155 (empty -> .) ]
  ! READ            [ reduce using rule 155 (empty -> .) ]
  ! IF              [ reduce using rule 155 (empty -> .) ]
  ! WHILE           [ reduce using rule 155 (empty -> .) ]
  ! FOR             [ reduce using rule 155 (empty -> .) ]
  ! INT             [ reduce using rule 155 (empty -> .) ]
  ! FLOAT           [ reduce using rule 155 (empty -> .) ]
  ! STRING          [ reduce using rule 155 (empty -> .) ]
  ! BOOL            [ reduce using rule 155 (empty -> .) ]
  ! #               [ reduce using rule 155 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 155 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 155 (empty -> .) ]

    whileloop                      shift and go to state 53
    localvardirective              shift and go to state 55
    localmsgdirective              shift and go to state 57
    type                           shift and go to state 16
    empty                          shift and go to state 58
    forloop                        shift and go to state 59
    return                         shift and go to state 60
    read                           shift and go to state 62
    instructionsOpt                shift and go to state 109
    assignfunccall                 shift and go to state 64
    localdirective                 shift and go to state 66
    declaration                    shift and go to state 67
    condition                      shift and go to state 69
    instruction                    shift and go to state 71
    localdecisiondirective         shift and go to state 72
    output                         shift and go to state 73

state 72

    (64) localdirective -> localdecisiondirective .

    ID              reduce using rule 64 (localdirective -> localdecisiondirective .)
    PRINT           reduce using rule 64 (localdirective -> localdecisiondirective .)
    RETURN          reduce using rule 64 (localdirective -> localdecisiondirective .)
    READ            reduce using rule 64 (localdirective -> localdecisiondirective .)
    IF              reduce using rule 64 (localdirective -> localdecisiondirective .)
    WHILE           reduce using rule 64 (localdirective -> localdecisiondirective .)
    FOR             reduce using rule 64 (localdirective -> localdecisiondirective .)
    INT             reduce using rule 64 (localdirective -> localdecisiondirective .)
    FLOAT           reduce using rule 64 (localdirective -> localdecisiondirective .)
    STRING          reduce using rule 64 (localdirective -> localdecisiondirective .)
    BOOL            reduce using rule 64 (localdirective -> localdecisiondirective .)
    #               reduce using rule 64 (localdirective -> localdecisiondirective .)
    TRACKDECISION   reduce using rule 64 (localdirective -> localdecisiondirective .)
    FORGETDECISION  reduce using rule 64 (localdirective -> localdecisiondirective .)
    }               reduce using rule 64 (localdirective -> localdecisiondirective .)


state 73

    (50) instruction -> output . ;

    ;               shift and go to state 110


state 74

    (33) func -> DEF returntype ID . ( paramsOpt )

    (               shift and go to state 111


state 75

    (19) declarationB -> ID push_operand . dimensionsOpt
    (41) dimensionsOpt -> . dimensions
    (42) dimensionsOpt -> . empty
    (147) dimensions -> . [ hyperexpression ] dimensionsB
    (155) empty -> .

    [               shift and go to state 113
    =               reduce using rule 155 (empty -> .)
    ,               reduce using rule 155 (empty -> .)
    ;               reduce using rule 155 (empty -> .)

    dimensions                     shift and go to state 112
    dimensionsOpt                  shift and go to state 114
    empty                          shift and go to state 115

state 76

    (26) declarationC -> , . repush_type declarationB declarationC
    (22) repush_type -> .

    ID              reduce using rule 22 (repush_type -> .)

    repush_type                    shift and go to state 116

state 77

    (27) declarationC -> ; .

    INT             reduce using rule 27 (declarationC -> ; .)
    FLOAT           reduce using rule 27 (declarationC -> ; .)
    STRING          reduce using rule 27 (declarationC -> ; .)
    BOOL            reduce using rule 27 (declarationC -> ; .)
    DEF             reduce using rule 27 (declarationC -> ; .)
    MAIN            reduce using rule 27 (declarationC -> ; .)
    ID              reduce using rule 27 (declarationC -> ; .)
    PRINT           reduce using rule 27 (declarationC -> ; .)
    RETURN          reduce using rule 27 (declarationC -> ; .)
    READ            reduce using rule 27 (declarationC -> ; .)
    IF              reduce using rule 27 (declarationC -> ; .)
    WHILE           reduce using rule 27 (declarationC -> ; .)
    FOR             reduce using rule 27 (declarationC -> ; .)
    #               reduce using rule 27 (declarationC -> ; .)
    TRACKDECISION   reduce using rule 27 (declarationC -> ; .)
    FORGETDECISION  reduce using rule 27 (declarationC -> ; .)
    }               reduce using rule 27 (declarationC -> ; .)


state 78

    (18) declaration -> type push_type declarationB declarationC .

    INT             reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    FLOAT           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    STRING          reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    BOOL            reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    DEF             reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    MAIN            reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    ID              reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    PRINT           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    RETURN          reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    READ            reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    IF              reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    WHILE           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    FOR             reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    #               reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    }               reduce using rule 18 (declaration -> type push_type declarationB declarationC .)


state 79

    (25) declarationC -> = . push_operator hyperexpression quadruple_assign declarationD
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 117

state 80

    (30) main -> MAIN ( ) . seen_main block
    (31) seen_main -> .

    {               reduce using rule 31 (seen_main -> .)

    seen_main                      shift and go to state 118

state 81

    (90) factor -> signB . constant
    (103) constant -> . FCONST seen_fconst
    (104) constant -> . ICONST seen_iconst
    (105) constant -> . SCONST seen_sconst
    (106) constant -> . TRUE seen_true
    (107) constant -> . FALSE seen_false

    FCONST          shift and go to state 120
    ICONST          shift and go to state 122
    SCONST          shift and go to state 121
    TRUE            shift and go to state 124
    FALSE           shift and go to state 123

    constant                       shift and go to state 119

state 82

    (91) factor -> ( . seen_parentheses hyperexpression )
    (94) seen_parentheses -> .

    (               reduce using rule 94 (seen_parentheses -> .)
    ID              reduce using rule 94 (seen_parentheses -> .)
    +               reduce using rule 94 (seen_parentheses -> .)
    -               reduce using rule 94 (seen_parentheses -> .)
    FCONST          reduce using rule 94 (seen_parentheses -> .)
    ICONST          reduce using rule 94 (seen_parentheses -> .)
    SCONST          reduce using rule 94 (seen_parentheses -> .)
    TRUE            reduce using rule 94 (seen_parentheses -> .)
    FALSE           reduce using rule 94 (seen_parentheses -> .)

    seen_parentheses               shift and go to state 125

state 83

    (108) sign -> + .

    FCONST          reduce using rule 108 (sign -> + .)
    ICONST          reduce using rule 108 (sign -> + .)
    SCONST          reduce using rule 108 (sign -> + .)
    TRUE            reduce using rule 108 (sign -> + .)
    FALSE           reduce using rule 108 (sign -> + .)


state 84

    (109) sign -> - .

    FCONST          reduce using rule 109 (sign -> - .)
    ICONST          reduce using rule 109 (sign -> - .)
    SCONST          reduce using rule 109 (sign -> - .)
    TRUE            reduce using rule 109 (sign -> - .)
    FALSE           reduce using rule 109 (sign -> - .)


state 85

    (150) return -> RETURN hyperexpression . return_quadruple
    (151) return_quadruple -> .

    ;               reduce using rule 151 (return_quadruple -> .)

    return_quadruple               shift and go to state 126

state 86

    (85) term -> factor . seen_factor termB
    (86) seen_factor -> .

    /               reduce using rule 86 (seen_factor -> .)
    *               reduce using rule 86 (seen_factor -> .)
    -               reduce using rule 86 (seen_factor -> .)
    +               reduce using rule 86 (seen_factor -> .)
    <               reduce using rule 86 (seen_factor -> .)
    >               reduce using rule 86 (seen_factor -> .)
    DIFF            reduce using rule 86 (seen_factor -> .)
    EQ              reduce using rule 86 (seen_factor -> .)
    LTEQ            reduce using rule 86 (seen_factor -> .)
    GTEQ            reduce using rule 86 (seen_factor -> .)
    AND             reduce using rule 86 (seen_factor -> .)
    OR              reduce using rule 86 (seen_factor -> .)
    ;               reduce using rule 86 (seen_factor -> .)
    )               reduce using rule 86 (seen_factor -> .)
    ,               reduce using rule 86 (seen_factor -> .)
    ]               reduce using rule 86 (seen_factor -> .)

    seen_factor                    shift and go to state 127

state 87

    (97) signB -> empty .

    FCONST          reduce using rule 97 (signB -> empty .)
    ICONST          reduce using rule 97 (signB -> empty .)
    SCONST          reduce using rule 97 (signB -> empty .)
    TRUE            reduce using rule 97 (signB -> empty .)
    FALSE           reduce using rule 97 (signB -> empty .)


state 88

    (92) factor -> funccall .

    /               reduce using rule 92 (factor -> funccall .)
    *               reduce using rule 92 (factor -> funccall .)
    -               reduce using rule 92 (factor -> funccall .)
    +               reduce using rule 92 (factor -> funccall .)
    <               reduce using rule 92 (factor -> funccall .)
    >               reduce using rule 92 (factor -> funccall .)
    DIFF            reduce using rule 92 (factor -> funccall .)
    EQ              reduce using rule 92 (factor -> funccall .)
    LTEQ            reduce using rule 92 (factor -> funccall .)
    GTEQ            reduce using rule 92 (factor -> funccall .)
    AND             reduce using rule 92 (factor -> funccall .)
    OR              reduce using rule 92 (factor -> funccall .)
    ,               reduce using rule 92 (factor -> funccall .)
    )               reduce using rule 92 (factor -> funccall .)
    ;               reduce using rule 92 (factor -> funccall .)
    ]               reduce using rule 92 (factor -> funccall .)


state 89

    (66) hyperexpression -> superexpression . hyperexpressionB
    (67) hyperexpressionB -> . OR push_operator hyperexpression
    (68) hyperexpressionB -> . empty
    (155) empty -> .

    OR              shift and go to state 129
    ;               reduce using rule 155 (empty -> .)
    )               reduce using rule 155 (empty -> .)
    ,               reduce using rule 155 (empty -> .)
    ]               reduce using rule 155 (empty -> .)

    hyperexpressionB               shift and go to state 128
    empty                          shift and go to state 130

state 90

    (96) signB -> sign .

    FCONST          reduce using rule 96 (signB -> sign .)
    ICONST          reduce using rule 96 (signB -> sign .)
    SCONST          reduce using rule 96 (signB -> sign .)
    TRUE            reduce using rule 96 (signB -> sign .)
    FALSE           reduce using rule 96 (signB -> sign .)


state 91

    (93) factor -> ID . seen_ID dimensionsOpt
    (141) funccall -> ID . ( funccallB funccallC
    (95) seen_ID -> .

    (               shift and go to state 131
    [               reduce using rule 95 (seen_ID -> .)
    /               reduce using rule 95 (seen_ID -> .)
    *               reduce using rule 95 (seen_ID -> .)
    -               reduce using rule 95 (seen_ID -> .)
    +               reduce using rule 95 (seen_ID -> .)
    <               reduce using rule 95 (seen_ID -> .)
    >               reduce using rule 95 (seen_ID -> .)
    DIFF            reduce using rule 95 (seen_ID -> .)
    EQ              reduce using rule 95 (seen_ID -> .)
    LTEQ            reduce using rule 95 (seen_ID -> .)
    GTEQ            reduce using rule 95 (seen_ID -> .)
    AND             reduce using rule 95 (seen_ID -> .)
    OR              reduce using rule 95 (seen_ID -> .)
    ;               reduce using rule 95 (seen_ID -> .)
    )               reduce using rule 95 (seen_ID -> .)
    ,               reduce using rule 95 (seen_ID -> .)
    ]               reduce using rule 95 (seen_ID -> .)

    seen_ID                        shift and go to state 132

state 92

    (80) exp -> term . seen_term expB
    (81) seen_term -> .

    -               reduce using rule 81 (seen_term -> .)
    +               reduce using rule 81 (seen_term -> .)
    <               reduce using rule 81 (seen_term -> .)
    >               reduce using rule 81 (seen_term -> .)
    DIFF            reduce using rule 81 (seen_term -> .)
    EQ              reduce using rule 81 (seen_term -> .)
    LTEQ            reduce using rule 81 (seen_term -> .)
    GTEQ            reduce using rule 81 (seen_term -> .)
    AND             reduce using rule 81 (seen_term -> .)
    OR              reduce using rule 81 (seen_term -> .)
    ;               reduce using rule 81 (seen_term -> .)
    )               reduce using rule 81 (seen_term -> .)
    ,               reduce using rule 81 (seen_term -> .)
    ]               reduce using rule 81 (seen_term -> .)

    seen_term                      shift and go to state 133

state 93

    (72) expression -> exp . expressionB
    (73) expressionB -> . < push_operator exp
    (74) expressionB -> . > push_operator exp
    (75) expressionB -> . DIFF push_operator exp
    (76) expressionB -> . EQ push_operator exp
    (77) expressionB -> . LTEQ push_operator exp
    (78) expressionB -> . GTEQ push_operator exp
    (79) expressionB -> . empty
    (155) empty -> .

    <               shift and go to state 139
    >               shift and go to state 141
    DIFF            shift and go to state 137
    EQ              shift and go to state 138
    LTEQ            shift and go to state 135
    GTEQ            shift and go to state 134
    AND             reduce using rule 155 (empty -> .)
    OR              reduce using rule 155 (empty -> .)
    ;               reduce using rule 155 (empty -> .)
    )               reduce using rule 155 (empty -> .)
    ,               reduce using rule 155 (empty -> .)
    ]               reduce using rule 155 (empty -> .)

    empty                          shift and go to state 140
    expressionB                    shift and go to state 136

state 94

    (69) superexpression -> expression . superexpressionB
    (70) superexpressionB -> . AND push_operator superexpression
    (71) superexpressionB -> . empty
    (155) empty -> .

    AND             shift and go to state 142
    OR              reduce using rule 155 (empty -> .)
    ;               reduce using rule 155 (empty -> .)
    )               reduce using rule 155 (empty -> .)
    ,               reduce using rule 155 (empty -> .)
    ]               reduce using rule 155 (empty -> .)

    empty                          shift and go to state 144
    superexpressionB               shift and go to state 143

state 95

    (124) read -> READ ( . validate_id push_operand read_quadruple readB )
    (125) validate_id -> . ID

    ID              shift and go to state 146

    validate_id                    shift and go to state 145

state 96

    (110) whileloop -> WHILE init_while . ( hyperexpression ) while_quadruple block endwhile_quadruple

    (               shift and go to state 147


state 97

    (129) output -> PRINT ( . outputB
    (130) outputB -> . hyperexpression print_quadruple outputC
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    signB                          shift and go to state 81
    hyperexpression                shift and go to state 148
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    outputB                        shift and go to state 149
    expression                     shift and go to state 94

state 98

    (136) localvardirectiveB -> FORGET .

    ID              reduce using rule 136 (localvardirectiveB -> FORGET .)


state 99

    (137) localmsgdirective -> # SHOW . SCONST

    SCONST          shift and go to state 150


state 100

    (135) localvardirectiveB -> TRACK .

    ID              reduce using rule 135 (localvardirectiveB -> TRACK .)


state 101

    (134) localvardirective -> # localvardirectiveB . ID

    ID              shift and go to state 151


state 102

    (51) instruction -> return ; .

    ID              reduce using rule 51 (instruction -> return ; .)
    PRINT           reduce using rule 51 (instruction -> return ; .)
    RETURN          reduce using rule 51 (instruction -> return ; .)
    READ            reduce using rule 51 (instruction -> return ; .)
    IF              reduce using rule 51 (instruction -> return ; .)
    WHILE           reduce using rule 51 (instruction -> return ; .)
    FOR             reduce using rule 51 (instruction -> return ; .)
    INT             reduce using rule 51 (instruction -> return ; .)
    FLOAT           reduce using rule 51 (instruction -> return ; .)
    STRING          reduce using rule 51 (instruction -> return ; .)
    BOOL            reduce using rule 51 (instruction -> return ; .)
    #               reduce using rule 51 (instruction -> return ; .)
    TRACKDECISION   reduce using rule 51 (instruction -> return ; .)
    FORGETDECISION  reduce using rule 51 (instruction -> return ; .)
    }               reduce using rule 51 (instruction -> return ; .)


state 103

    (120) forloop -> FOR ( . assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (39) assign -> . ID push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign

    ID              shift and go to state 152

    assign                         shift and go to state 153

state 104

    (52) instruction -> read ; .

    ID              reduce using rule 52 (instruction -> read ; .)
    PRINT           reduce using rule 52 (instruction -> read ; .)
    RETURN          reduce using rule 52 (instruction -> read ; .)
    READ            reduce using rule 52 (instruction -> read ; .)
    IF              reduce using rule 52 (instruction -> read ; .)
    WHILE           reduce using rule 52 (instruction -> read ; .)
    FOR             reduce using rule 52 (instruction -> read ; .)
    INT             reduce using rule 52 (instruction -> read ; .)
    FLOAT           reduce using rule 52 (instruction -> read ; .)
    STRING          reduce using rule 52 (instruction -> read ; .)
    BOOL            reduce using rule 52 (instruction -> read ; .)
    #               reduce using rule 52 (instruction -> read ; .)
    TRACKDECISION   reduce using rule 52 (instruction -> read ; .)
    FORGETDECISION  reduce using rule 52 (instruction -> read ; .)
    }               reduce using rule 52 (instruction -> read ; .)


state 105

    (36) block -> { instructionsOpt } .

    ID              reduce using rule 36 (block -> { instructionsOpt } .)
    PRINT           reduce using rule 36 (block -> { instructionsOpt } .)
    RETURN          reduce using rule 36 (block -> { instructionsOpt } .)
    READ            reduce using rule 36 (block -> { instructionsOpt } .)
    IF              reduce using rule 36 (block -> { instructionsOpt } .)
    WHILE           reduce using rule 36 (block -> { instructionsOpt } .)
    FOR             reduce using rule 36 (block -> { instructionsOpt } .)
    INT             reduce using rule 36 (block -> { instructionsOpt } .)
    FLOAT           reduce using rule 36 (block -> { instructionsOpt } .)
    STRING          reduce using rule 36 (block -> { instructionsOpt } .)
    BOOL            reduce using rule 36 (block -> { instructionsOpt } .)
    #               reduce using rule 36 (block -> { instructionsOpt } .)
    TRACKDECISION   reduce using rule 36 (block -> { instructionsOpt } .)
    FORGETDECISION  reduce using rule 36 (block -> { instructionsOpt } .)
    }               reduce using rule 36 (block -> { instructionsOpt } .)
    ELSE            reduce using rule 36 (block -> { instructionsOpt } .)
    DEF             reduce using rule 36 (block -> { instructionsOpt } .)
    $end            reduce using rule 36 (block -> { instructionsOpt } .)
    MAIN            reduce using rule 36 (block -> { instructionsOpt } .)


state 106

    (49) instruction -> assignfunccall ; .

    ID              reduce using rule 49 (instruction -> assignfunccall ; .)
    PRINT           reduce using rule 49 (instruction -> assignfunccall ; .)
    RETURN          reduce using rule 49 (instruction -> assignfunccall ; .)
    READ            reduce using rule 49 (instruction -> assignfunccall ; .)
    IF              reduce using rule 49 (instruction -> assignfunccall ; .)
    WHILE           reduce using rule 49 (instruction -> assignfunccall ; .)
    FOR             reduce using rule 49 (instruction -> assignfunccall ; .)
    INT             reduce using rule 49 (instruction -> assignfunccall ; .)
    FLOAT           reduce using rule 49 (instruction -> assignfunccall ; .)
    STRING          reduce using rule 49 (instruction -> assignfunccall ; .)
    BOOL            reduce using rule 49 (instruction -> assignfunccall ; .)
    #               reduce using rule 49 (instruction -> assignfunccall ; .)
    TRACKDECISION   reduce using rule 49 (instruction -> assignfunccall ; .)
    FORGETDECISION  reduce using rule 49 (instruction -> assignfunccall ; .)
    }               reduce using rule 49 (instruction -> assignfunccall ; .)


state 107

    (58) assignfunccall -> ID seen_funccall . push_operand assignfunccallB
    (20) push_operand -> .

    (               reduce using rule 20 (push_operand -> .)
    [               reduce using rule 20 (push_operand -> .)
    =               reduce using rule 20 (push_operand -> .)

    push_operand                   shift and go to state 154

state 108

    (43) condition -> IF ( . hyperexpression condition_quadruple ) block else endcondition_quadruple
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    signB                          shift and go to state 81
    hyperexpression                shift and go to state 155
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 109

    (37) instructionsOpt -> instruction instructionsOpt .

    }               reduce using rule 37 (instructionsOpt -> instruction instructionsOpt .)


state 110

    (50) instruction -> output ; .

    ID              reduce using rule 50 (instruction -> output ; .)
    PRINT           reduce using rule 50 (instruction -> output ; .)
    RETURN          reduce using rule 50 (instruction -> output ; .)
    READ            reduce using rule 50 (instruction -> output ; .)
    IF              reduce using rule 50 (instruction -> output ; .)
    WHILE           reduce using rule 50 (instruction -> output ; .)
    FOR             reduce using rule 50 (instruction -> output ; .)
    INT             reduce using rule 50 (instruction -> output ; .)
    FLOAT           reduce using rule 50 (instruction -> output ; .)
    STRING          reduce using rule 50 (instruction -> output ; .)
    BOOL            reduce using rule 50 (instruction -> output ; .)
    #               reduce using rule 50 (instruction -> output ; .)
    TRACKDECISION   reduce using rule 50 (instruction -> output ; .)
    FORGETDECISION  reduce using rule 50 (instruction -> output ; .)
    }               reduce using rule 50 (instruction -> output ; .)


state 111

    (33) func -> DEF returntype ID ( . paramsOpt )
    (34) paramsOpt -> . params paramsB
    (35) paramsOpt -> . empty
    (152) params -> . type ID
    (155) empty -> .
    (114) type -> . INT
    (115) type -> . FLOAT
    (116) type -> . STRING
    (117) type -> . BOOL

    )               reduce using rule 155 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    paramsOpt                      shift and go to state 156
    params                         shift and go to state 157
    type                           shift and go to state 159
    empty                          shift and go to state 158

state 112

    (41) dimensionsOpt -> dimensions .

    =               reduce using rule 41 (dimensionsOpt -> dimensions .)
    /               reduce using rule 41 (dimensionsOpt -> dimensions .)
    *               reduce using rule 41 (dimensionsOpt -> dimensions .)
    -               reduce using rule 41 (dimensionsOpt -> dimensions .)
    +               reduce using rule 41 (dimensionsOpt -> dimensions .)
    <               reduce using rule 41 (dimensionsOpt -> dimensions .)
    >               reduce using rule 41 (dimensionsOpt -> dimensions .)
    DIFF            reduce using rule 41 (dimensionsOpt -> dimensions .)
    EQ              reduce using rule 41 (dimensionsOpt -> dimensions .)
    LTEQ            reduce using rule 41 (dimensionsOpt -> dimensions .)
    GTEQ            reduce using rule 41 (dimensionsOpt -> dimensions .)
    AND             reduce using rule 41 (dimensionsOpt -> dimensions .)
    OR              reduce using rule 41 (dimensionsOpt -> dimensions .)
    ;               reduce using rule 41 (dimensionsOpt -> dimensions .)
    )               reduce using rule 41 (dimensionsOpt -> dimensions .)
    ,               reduce using rule 41 (dimensionsOpt -> dimensions .)
    ]               reduce using rule 41 (dimensionsOpt -> dimensions .)


state 113

    (147) dimensions -> [ . hyperexpression ] dimensionsB
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 160
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 114

    (19) declarationB -> ID push_operand dimensionsOpt .

    =               reduce using rule 19 (declarationB -> ID push_operand dimensionsOpt .)
    ,               reduce using rule 19 (declarationB -> ID push_operand dimensionsOpt .)
    ;               reduce using rule 19 (declarationB -> ID push_operand dimensionsOpt .)


state 115

    (42) dimensionsOpt -> empty .

    =               reduce using rule 42 (dimensionsOpt -> empty .)
    /               reduce using rule 42 (dimensionsOpt -> empty .)
    *               reduce using rule 42 (dimensionsOpt -> empty .)
    -               reduce using rule 42 (dimensionsOpt -> empty .)
    +               reduce using rule 42 (dimensionsOpt -> empty .)
    <               reduce using rule 42 (dimensionsOpt -> empty .)
    >               reduce using rule 42 (dimensionsOpt -> empty .)
    DIFF            reduce using rule 42 (dimensionsOpt -> empty .)
    EQ              reduce using rule 42 (dimensionsOpt -> empty .)
    LTEQ            reduce using rule 42 (dimensionsOpt -> empty .)
    GTEQ            reduce using rule 42 (dimensionsOpt -> empty .)
    AND             reduce using rule 42 (dimensionsOpt -> empty .)
    OR              reduce using rule 42 (dimensionsOpt -> empty .)
    ;               reduce using rule 42 (dimensionsOpt -> empty .)
    )               reduce using rule 42 (dimensionsOpt -> empty .)
    ,               reduce using rule 42 (dimensionsOpt -> empty .)
    ]               reduce using rule 42 (dimensionsOpt -> empty .)


state 116

    (26) declarationC -> , repush_type . declarationB declarationC
    (19) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 45

    declarationB                   shift and go to state 161

state 117

    (25) declarationC -> = push_operator . hyperexpression quadruple_assign declarationD
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    signB                          shift and go to state 81
    hyperexpression                shift and go to state 162
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 118

    (30) main -> MAIN ( ) seen_main . block
    (36) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 163

state 119

    (90) factor -> signB constant .

    /               reduce using rule 90 (factor -> signB constant .)
    *               reduce using rule 90 (factor -> signB constant .)
    -               reduce using rule 90 (factor -> signB constant .)
    +               reduce using rule 90 (factor -> signB constant .)
    <               reduce using rule 90 (factor -> signB constant .)
    >               reduce using rule 90 (factor -> signB constant .)
    DIFF            reduce using rule 90 (factor -> signB constant .)
    EQ              reduce using rule 90 (factor -> signB constant .)
    LTEQ            reduce using rule 90 (factor -> signB constant .)
    GTEQ            reduce using rule 90 (factor -> signB constant .)
    AND             reduce using rule 90 (factor -> signB constant .)
    OR              reduce using rule 90 (factor -> signB constant .)
    ,               reduce using rule 90 (factor -> signB constant .)
    )               reduce using rule 90 (factor -> signB constant .)
    ;               reduce using rule 90 (factor -> signB constant .)
    ]               reduce using rule 90 (factor -> signB constant .)


state 120

    (103) constant -> FCONST . seen_fconst
    (98) seen_fconst -> .

    /               reduce using rule 98 (seen_fconst -> .)
    *               reduce using rule 98 (seen_fconst -> .)
    -               reduce using rule 98 (seen_fconst -> .)
    +               reduce using rule 98 (seen_fconst -> .)
    <               reduce using rule 98 (seen_fconst -> .)
    >               reduce using rule 98 (seen_fconst -> .)
    DIFF            reduce using rule 98 (seen_fconst -> .)
    EQ              reduce using rule 98 (seen_fconst -> .)
    LTEQ            reduce using rule 98 (seen_fconst -> .)
    GTEQ            reduce using rule 98 (seen_fconst -> .)
    AND             reduce using rule 98 (seen_fconst -> .)
    OR              reduce using rule 98 (seen_fconst -> .)
    ;               reduce using rule 98 (seen_fconst -> .)
    )               reduce using rule 98 (seen_fconst -> .)
    ,               reduce using rule 98 (seen_fconst -> .)
    ]               reduce using rule 98 (seen_fconst -> .)

    seen_fconst                    shift and go to state 164

state 121

    (105) constant -> SCONST . seen_sconst
    (100) seen_sconst -> .

    /               reduce using rule 100 (seen_sconst -> .)
    *               reduce using rule 100 (seen_sconst -> .)
    -               reduce using rule 100 (seen_sconst -> .)
    +               reduce using rule 100 (seen_sconst -> .)
    <               reduce using rule 100 (seen_sconst -> .)
    >               reduce using rule 100 (seen_sconst -> .)
    DIFF            reduce using rule 100 (seen_sconst -> .)
    EQ              reduce using rule 100 (seen_sconst -> .)
    LTEQ            reduce using rule 100 (seen_sconst -> .)
    GTEQ            reduce using rule 100 (seen_sconst -> .)
    AND             reduce using rule 100 (seen_sconst -> .)
    OR              reduce using rule 100 (seen_sconst -> .)
    ;               reduce using rule 100 (seen_sconst -> .)
    )               reduce using rule 100 (seen_sconst -> .)
    ,               reduce using rule 100 (seen_sconst -> .)
    ]               reduce using rule 100 (seen_sconst -> .)

    seen_sconst                    shift and go to state 165

state 122

    (104) constant -> ICONST . seen_iconst
    (99) seen_iconst -> .

    /               reduce using rule 99 (seen_iconst -> .)
    *               reduce using rule 99 (seen_iconst -> .)
    -               reduce using rule 99 (seen_iconst -> .)
    +               reduce using rule 99 (seen_iconst -> .)
    <               reduce using rule 99 (seen_iconst -> .)
    >               reduce using rule 99 (seen_iconst -> .)
    DIFF            reduce using rule 99 (seen_iconst -> .)
    EQ              reduce using rule 99 (seen_iconst -> .)
    LTEQ            reduce using rule 99 (seen_iconst -> .)
    GTEQ            reduce using rule 99 (seen_iconst -> .)
    AND             reduce using rule 99 (seen_iconst -> .)
    OR              reduce using rule 99 (seen_iconst -> .)
    ;               reduce using rule 99 (seen_iconst -> .)
    )               reduce using rule 99 (seen_iconst -> .)
    ,               reduce using rule 99 (seen_iconst -> .)
    ]               reduce using rule 99 (seen_iconst -> .)

    seen_iconst                    shift and go to state 166

state 123

    (107) constant -> FALSE . seen_false
    (102) seen_false -> .

    /               reduce using rule 102 (seen_false -> .)
    *               reduce using rule 102 (seen_false -> .)
    -               reduce using rule 102 (seen_false -> .)
    +               reduce using rule 102 (seen_false -> .)
    <               reduce using rule 102 (seen_false -> .)
    >               reduce using rule 102 (seen_false -> .)
    DIFF            reduce using rule 102 (seen_false -> .)
    EQ              reduce using rule 102 (seen_false -> .)
    LTEQ            reduce using rule 102 (seen_false -> .)
    GTEQ            reduce using rule 102 (seen_false -> .)
    AND             reduce using rule 102 (seen_false -> .)
    OR              reduce using rule 102 (seen_false -> .)
    ;               reduce using rule 102 (seen_false -> .)
    )               reduce using rule 102 (seen_false -> .)
    ,               reduce using rule 102 (seen_false -> .)
    ]               reduce using rule 102 (seen_false -> .)

    seen_false                     shift and go to state 167

state 124

    (106) constant -> TRUE . seen_true
    (101) seen_true -> .

    /               reduce using rule 101 (seen_true -> .)
    *               reduce using rule 101 (seen_true -> .)
    -               reduce using rule 101 (seen_true -> .)
    +               reduce using rule 101 (seen_true -> .)
    <               reduce using rule 101 (seen_true -> .)
    >               reduce using rule 101 (seen_true -> .)
    DIFF            reduce using rule 101 (seen_true -> .)
    EQ              reduce using rule 101 (seen_true -> .)
    LTEQ            reduce using rule 101 (seen_true -> .)
    GTEQ            reduce using rule 101 (seen_true -> .)
    AND             reduce using rule 101 (seen_true -> .)
    OR              reduce using rule 101 (seen_true -> .)
    ;               reduce using rule 101 (seen_true -> .)
    )               reduce using rule 101 (seen_true -> .)
    ,               reduce using rule 101 (seen_true -> .)
    ]               reduce using rule 101 (seen_true -> .)

    seen_true                      shift and go to state 168

state 125

    (91) factor -> ( seen_parentheses . hyperexpression )
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 169
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 126

    (150) return -> RETURN hyperexpression return_quadruple .

    ;               reduce using rule 150 (return -> RETURN hyperexpression return_quadruple .)


state 127

    (85) term -> factor seen_factor . termB
    (87) termB -> . / push_operator term
    (88) termB -> . * push_operator term
    (89) termB -> . empty
    (155) empty -> .

    /               shift and go to state 173
    *               shift and go to state 170
    -               reduce using rule 155 (empty -> .)
    +               reduce using rule 155 (empty -> .)
    <               reduce using rule 155 (empty -> .)
    >               reduce using rule 155 (empty -> .)
    DIFF            reduce using rule 155 (empty -> .)
    EQ              reduce using rule 155 (empty -> .)
    LTEQ            reduce using rule 155 (empty -> .)
    GTEQ            reduce using rule 155 (empty -> .)
    AND             reduce using rule 155 (empty -> .)
    OR              reduce using rule 155 (empty -> .)
    ;               reduce using rule 155 (empty -> .)
    )               reduce using rule 155 (empty -> .)
    ,               reduce using rule 155 (empty -> .)
    ]               reduce using rule 155 (empty -> .)

    termB                          shift and go to state 171
    empty                          shift and go to state 172

state 128

    (66) hyperexpression -> superexpression hyperexpressionB .

    )               reduce using rule 66 (hyperexpression -> superexpression hyperexpressionB .)
    ;               reduce using rule 66 (hyperexpression -> superexpression hyperexpressionB .)
    ,               reduce using rule 66 (hyperexpression -> superexpression hyperexpressionB .)
    ]               reduce using rule 66 (hyperexpression -> superexpression hyperexpressionB .)


state 129

    (67) hyperexpressionB -> OR . push_operator hyperexpression
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 174

state 130

    (68) hyperexpressionB -> empty .

    ;               reduce using rule 68 (hyperexpressionB -> empty .)
    )               reduce using rule 68 (hyperexpressionB -> empty .)
    ,               reduce using rule 68 (hyperexpressionB -> empty .)
    ]               reduce using rule 68 (hyperexpressionB -> empty .)


state 131

    (141) funccall -> ID ( . funccallB funccallC
    (142) funccallB -> . hyperexpression seen_param
    (143) funccallB -> . empty
    (66) hyperexpression -> . superexpression hyperexpressionB
    (155) empty -> .
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -

    ,               reduce using rule 155 (empty -> .)
    )               reduce using rule 155 (empty -> .)
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84

    funccallB                      shift and go to state 175
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 176
    factor                         shift and go to state 86
    empty                          shift and go to state 177
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 132

    (93) factor -> ID seen_ID . dimensionsOpt
    (41) dimensionsOpt -> . dimensions
    (42) dimensionsOpt -> . empty
    (147) dimensions -> . [ hyperexpression ] dimensionsB
    (155) empty -> .

    [               shift and go to state 113
    /               reduce using rule 155 (empty -> .)
    *               reduce using rule 155 (empty -> .)
    -               reduce using rule 155 (empty -> .)
    +               reduce using rule 155 (empty -> .)
    <               reduce using rule 155 (empty -> .)
    >               reduce using rule 155 (empty -> .)
    DIFF            reduce using rule 155 (empty -> .)
    EQ              reduce using rule 155 (empty -> .)
    LTEQ            reduce using rule 155 (empty -> .)
    GTEQ            reduce using rule 155 (empty -> .)
    AND             reduce using rule 155 (empty -> .)
    OR              reduce using rule 155 (empty -> .)
    ;               reduce using rule 155 (empty -> .)
    )               reduce using rule 155 (empty -> .)
    ,               reduce using rule 155 (empty -> .)
    ]               reduce using rule 155 (empty -> .)

    dimensions                     shift and go to state 112
    dimensionsOpt                  shift and go to state 178
    empty                          shift and go to state 115

state 133

    (80) exp -> term seen_term . expB
    (82) expB -> . - push_operator exp
    (83) expB -> . + push_operator exp
    (84) expB -> . empty
    (155) empty -> .

    -               shift and go to state 180
    +               shift and go to state 179
    <               reduce using rule 155 (empty -> .)
    >               reduce using rule 155 (empty -> .)
    DIFF            reduce using rule 155 (empty -> .)
    EQ              reduce using rule 155 (empty -> .)
    LTEQ            reduce using rule 155 (empty -> .)
    GTEQ            reduce using rule 155 (empty -> .)
    AND             reduce using rule 155 (empty -> .)
    OR              reduce using rule 155 (empty -> .)
    ;               reduce using rule 155 (empty -> .)
    )               reduce using rule 155 (empty -> .)
    ,               reduce using rule 155 (empty -> .)
    ]               reduce using rule 155 (empty -> .)

    expB                           shift and go to state 181
    empty                          shift and go to state 182

state 134

    (78) expressionB -> GTEQ . push_operator exp
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 183

state 135

    (77) expressionB -> LTEQ . push_operator exp
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 184

state 136

    (72) expression -> exp expressionB .

    AND             reduce using rule 72 (expression -> exp expressionB .)
    OR              reduce using rule 72 (expression -> exp expressionB .)
    ]               reduce using rule 72 (expression -> exp expressionB .)
    ,               reduce using rule 72 (expression -> exp expressionB .)
    )               reduce using rule 72 (expression -> exp expressionB .)
    ;               reduce using rule 72 (expression -> exp expressionB .)


state 137

    (75) expressionB -> DIFF . push_operator exp
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 185

state 138

    (76) expressionB -> EQ . push_operator exp
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 186

state 139

    (73) expressionB -> < . push_operator exp
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 187

state 140

    (79) expressionB -> empty .

    AND             reduce using rule 79 (expressionB -> empty .)
    OR              reduce using rule 79 (expressionB -> empty .)
    ;               reduce using rule 79 (expressionB -> empty .)
    )               reduce using rule 79 (expressionB -> empty .)
    ,               reduce using rule 79 (expressionB -> empty .)
    ]               reduce using rule 79 (expressionB -> empty .)


state 141

    (74) expressionB -> > . push_operator exp
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 188

state 142

    (70) superexpressionB -> AND . push_operator superexpression
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 189

state 143

    (69) superexpression -> expression superexpressionB .

    OR              reduce using rule 69 (superexpression -> expression superexpressionB .)
    ;               reduce using rule 69 (superexpression -> expression superexpressionB .)
    )               reduce using rule 69 (superexpression -> expression superexpressionB .)
    ,               reduce using rule 69 (superexpression -> expression superexpressionB .)
    ]               reduce using rule 69 (superexpression -> expression superexpressionB .)


state 144

    (71) superexpressionB -> empty .

    OR              reduce using rule 71 (superexpressionB -> empty .)
    ;               reduce using rule 71 (superexpressionB -> empty .)
    )               reduce using rule 71 (superexpressionB -> empty .)
    ,               reduce using rule 71 (superexpressionB -> empty .)
    ]               reduce using rule 71 (superexpressionB -> empty .)


state 145

    (124) read -> READ ( validate_id . push_operand read_quadruple readB )
    (20) push_operand -> .

    ,               reduce using rule 20 (push_operand -> .)
    )               reduce using rule 20 (push_operand -> .)

    push_operand                   shift and go to state 190

state 146

    (125) validate_id -> ID .

    ,               reduce using rule 125 (validate_id -> ID .)
    )               reduce using rule 125 (validate_id -> ID .)


state 147

    (110) whileloop -> WHILE init_while ( . hyperexpression ) while_quadruple block endwhile_quadruple
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    signB                          shift and go to state 81
    hyperexpression                shift and go to state 191
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 148

    (130) outputB -> hyperexpression . print_quadruple outputC
    (131) print_quadruple -> .

    )               reduce using rule 131 (print_quadruple -> .)
    ,               reduce using rule 131 (print_quadruple -> .)

    print_quadruple                shift and go to state 192

state 149

    (129) output -> PRINT ( outputB .

    ;               reduce using rule 129 (output -> PRINT ( outputB .)


state 150

    (137) localmsgdirective -> # SHOW SCONST .

    ID              reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    PRINT           reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    RETURN          reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    READ            reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    IF              reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    WHILE           reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    FOR             reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    INT             reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    FLOAT           reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    STRING          reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    BOOL            reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    #               reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    TRACKDECISION   reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    FORGETDECISION  reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)
    }               reduce using rule 137 (localmsgdirective -> # SHOW SCONST .)


state 151

    (134) localvardirective -> # localvardirectiveB ID .

    ID              reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    PRINT           reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    RETURN          reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    READ            reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    IF              reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    WHILE           reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    FOR             reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    INT             reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    FLOAT           reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    STRING          reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    BOOL            reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    #               reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    TRACKDECISION   reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    FORGETDECISION  reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)
    }               reduce using rule 134 (localvardirective -> # localvardirectiveB ID .)


state 152

    (39) assign -> ID . push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign
    (20) push_operand -> .

    [               reduce using rule 20 (push_operand -> .)
    =               reduce using rule 20 (push_operand -> .)

    push_operand                   shift and go to state 193

state 153

    (120) forloop -> FOR ( assign . ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple

    ;               shift and go to state 194


state 154

    (58) assignfunccall -> ID seen_funccall push_operand . assignfunccallB
    (61) assignfunccallB -> . ( pop_operand funccallB funccallC
    (62) assignfunccallB -> . assignB
    (40) assignB -> . dimensionsOpt = push_operator hyperexpression quadruple_assign
    (41) dimensionsOpt -> . dimensions
    (42) dimensionsOpt -> . empty
    (147) dimensions -> . [ hyperexpression ] dimensionsB
    (155) empty -> .

    (               shift and go to state 196
    [               shift and go to state 113
    =               reduce using rule 155 (empty -> .)

    dimensions                     shift and go to state 112
    assignfunccallB                shift and go to state 195
    assignB                        shift and go to state 197
    dimensionsOpt                  shift and go to state 198
    empty                          shift and go to state 115

state 155

    (43) condition -> IF ( hyperexpression . condition_quadruple ) block else endcondition_quadruple
    (46) condition_quadruple -> .

    )               reduce using rule 46 (condition_quadruple -> .)

    condition_quadruple            shift and go to state 199

state 156

    (33) func -> DEF returntype ID ( paramsOpt . )

    )               shift and go to state 200


state 157

    (34) paramsOpt -> params . paramsB
    (153) paramsB -> . , params paramsB
    (154) paramsB -> . empty
    (155) empty -> .

    ,               shift and go to state 202
    )               reduce using rule 155 (empty -> .)

    paramsB                        shift and go to state 201
    empty                          shift and go to state 203

state 158

    (35) paramsOpt -> empty .

    )               reduce using rule 35 (paramsOpt -> empty .)


state 159

    (152) params -> type . ID

    ID              shift and go to state 204


state 160

    (147) dimensions -> [ hyperexpression . ] dimensionsB

    ]               shift and go to state 205


state 161

    (26) declarationC -> , repush_type declarationB . declarationC
    (25) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (26) declarationC -> . , repush_type declarationB declarationC
    (27) declarationC -> . ;

    =               shift and go to state 79
    ,               shift and go to state 76
    ;               shift and go to state 77

    declarationC                   shift and go to state 206

state 162

    (25) declarationC -> = push_operator hyperexpression . quadruple_assign declarationD
    (24) quadruple_assign -> .

    ,               reduce using rule 24 (quadruple_assign -> .)
    ;               reduce using rule 24 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 207

state 163

    (30) main -> MAIN ( ) seen_main block .

    DEF             reduce using rule 30 (main -> MAIN ( ) seen_main block .)
    $end            reduce using rule 30 (main -> MAIN ( ) seen_main block .)


state 164

    (103) constant -> FCONST seen_fconst .

    /               reduce using rule 103 (constant -> FCONST seen_fconst .)
    *               reduce using rule 103 (constant -> FCONST seen_fconst .)
    -               reduce using rule 103 (constant -> FCONST seen_fconst .)
    +               reduce using rule 103 (constant -> FCONST seen_fconst .)
    <               reduce using rule 103 (constant -> FCONST seen_fconst .)
    >               reduce using rule 103 (constant -> FCONST seen_fconst .)
    DIFF            reduce using rule 103 (constant -> FCONST seen_fconst .)
    EQ              reduce using rule 103 (constant -> FCONST seen_fconst .)
    LTEQ            reduce using rule 103 (constant -> FCONST seen_fconst .)
    GTEQ            reduce using rule 103 (constant -> FCONST seen_fconst .)
    AND             reduce using rule 103 (constant -> FCONST seen_fconst .)
    OR              reduce using rule 103 (constant -> FCONST seen_fconst .)
    ;               reduce using rule 103 (constant -> FCONST seen_fconst .)
    )               reduce using rule 103 (constant -> FCONST seen_fconst .)
    ,               reduce using rule 103 (constant -> FCONST seen_fconst .)
    ]               reduce using rule 103 (constant -> FCONST seen_fconst .)


state 165

    (105) constant -> SCONST seen_sconst .

    /               reduce using rule 105 (constant -> SCONST seen_sconst .)
    *               reduce using rule 105 (constant -> SCONST seen_sconst .)
    -               reduce using rule 105 (constant -> SCONST seen_sconst .)
    +               reduce using rule 105 (constant -> SCONST seen_sconst .)
    <               reduce using rule 105 (constant -> SCONST seen_sconst .)
    >               reduce using rule 105 (constant -> SCONST seen_sconst .)
    DIFF            reduce using rule 105 (constant -> SCONST seen_sconst .)
    EQ              reduce using rule 105 (constant -> SCONST seen_sconst .)
    LTEQ            reduce using rule 105 (constant -> SCONST seen_sconst .)
    GTEQ            reduce using rule 105 (constant -> SCONST seen_sconst .)
    AND             reduce using rule 105 (constant -> SCONST seen_sconst .)
    OR              reduce using rule 105 (constant -> SCONST seen_sconst .)
    ;               reduce using rule 105 (constant -> SCONST seen_sconst .)
    )               reduce using rule 105 (constant -> SCONST seen_sconst .)
    ,               reduce using rule 105 (constant -> SCONST seen_sconst .)
    ]               reduce using rule 105 (constant -> SCONST seen_sconst .)


state 166

    (104) constant -> ICONST seen_iconst .

    /               reduce using rule 104 (constant -> ICONST seen_iconst .)
    *               reduce using rule 104 (constant -> ICONST seen_iconst .)
    -               reduce using rule 104 (constant -> ICONST seen_iconst .)
    +               reduce using rule 104 (constant -> ICONST seen_iconst .)
    <               reduce using rule 104 (constant -> ICONST seen_iconst .)
    >               reduce using rule 104 (constant -> ICONST seen_iconst .)
    DIFF            reduce using rule 104 (constant -> ICONST seen_iconst .)
    EQ              reduce using rule 104 (constant -> ICONST seen_iconst .)
    LTEQ            reduce using rule 104 (constant -> ICONST seen_iconst .)
    GTEQ            reduce using rule 104 (constant -> ICONST seen_iconst .)
    AND             reduce using rule 104 (constant -> ICONST seen_iconst .)
    OR              reduce using rule 104 (constant -> ICONST seen_iconst .)
    ;               reduce using rule 104 (constant -> ICONST seen_iconst .)
    )               reduce using rule 104 (constant -> ICONST seen_iconst .)
    ,               reduce using rule 104 (constant -> ICONST seen_iconst .)
    ]               reduce using rule 104 (constant -> ICONST seen_iconst .)


state 167

    (107) constant -> FALSE seen_false .

    /               reduce using rule 107 (constant -> FALSE seen_false .)
    *               reduce using rule 107 (constant -> FALSE seen_false .)
    -               reduce using rule 107 (constant -> FALSE seen_false .)
    +               reduce using rule 107 (constant -> FALSE seen_false .)
    <               reduce using rule 107 (constant -> FALSE seen_false .)
    >               reduce using rule 107 (constant -> FALSE seen_false .)
    DIFF            reduce using rule 107 (constant -> FALSE seen_false .)
    EQ              reduce using rule 107 (constant -> FALSE seen_false .)
    LTEQ            reduce using rule 107 (constant -> FALSE seen_false .)
    GTEQ            reduce using rule 107 (constant -> FALSE seen_false .)
    AND             reduce using rule 107 (constant -> FALSE seen_false .)
    OR              reduce using rule 107 (constant -> FALSE seen_false .)
    ;               reduce using rule 107 (constant -> FALSE seen_false .)
    )               reduce using rule 107 (constant -> FALSE seen_false .)
    ,               reduce using rule 107 (constant -> FALSE seen_false .)
    ]               reduce using rule 107 (constant -> FALSE seen_false .)


state 168

    (106) constant -> TRUE seen_true .

    /               reduce using rule 106 (constant -> TRUE seen_true .)
    *               reduce using rule 106 (constant -> TRUE seen_true .)
    -               reduce using rule 106 (constant -> TRUE seen_true .)
    +               reduce using rule 106 (constant -> TRUE seen_true .)
    <               reduce using rule 106 (constant -> TRUE seen_true .)
    >               reduce using rule 106 (constant -> TRUE seen_true .)
    DIFF            reduce using rule 106 (constant -> TRUE seen_true .)
    EQ              reduce using rule 106 (constant -> TRUE seen_true .)
    LTEQ            reduce using rule 106 (constant -> TRUE seen_true .)
    GTEQ            reduce using rule 106 (constant -> TRUE seen_true .)
    AND             reduce using rule 106 (constant -> TRUE seen_true .)
    OR              reduce using rule 106 (constant -> TRUE seen_true .)
    ;               reduce using rule 106 (constant -> TRUE seen_true .)
    )               reduce using rule 106 (constant -> TRUE seen_true .)
    ,               reduce using rule 106 (constant -> TRUE seen_true .)
    ]               reduce using rule 106 (constant -> TRUE seen_true .)


state 169

    (91) factor -> ( seen_parentheses hyperexpression . )

    )               shift and go to state 208


state 170

    (88) termB -> * . push_operator term
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 209

state 171

    (85) term -> factor seen_factor termB .

    -               reduce using rule 85 (term -> factor seen_factor termB .)
    +               reduce using rule 85 (term -> factor seen_factor termB .)
    <               reduce using rule 85 (term -> factor seen_factor termB .)
    >               reduce using rule 85 (term -> factor seen_factor termB .)
    DIFF            reduce using rule 85 (term -> factor seen_factor termB .)
    EQ              reduce using rule 85 (term -> factor seen_factor termB .)
    LTEQ            reduce using rule 85 (term -> factor seen_factor termB .)
    GTEQ            reduce using rule 85 (term -> factor seen_factor termB .)
    AND             reduce using rule 85 (term -> factor seen_factor termB .)
    OR              reduce using rule 85 (term -> factor seen_factor termB .)
    ,               reduce using rule 85 (term -> factor seen_factor termB .)
    )               reduce using rule 85 (term -> factor seen_factor termB .)
    ]               reduce using rule 85 (term -> factor seen_factor termB .)
    ;               reduce using rule 85 (term -> factor seen_factor termB .)


state 172

    (89) termB -> empty .

    -               reduce using rule 89 (termB -> empty .)
    +               reduce using rule 89 (termB -> empty .)
    <               reduce using rule 89 (termB -> empty .)
    >               reduce using rule 89 (termB -> empty .)
    DIFF            reduce using rule 89 (termB -> empty .)
    EQ              reduce using rule 89 (termB -> empty .)
    LTEQ            reduce using rule 89 (termB -> empty .)
    GTEQ            reduce using rule 89 (termB -> empty .)
    AND             reduce using rule 89 (termB -> empty .)
    OR              reduce using rule 89 (termB -> empty .)
    ;               reduce using rule 89 (termB -> empty .)
    )               reduce using rule 89 (termB -> empty .)
    ,               reduce using rule 89 (termB -> empty .)
    ]               reduce using rule 89 (termB -> empty .)


state 173

    (87) termB -> / . push_operator term
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 210

state 174

    (67) hyperexpressionB -> OR push_operator . hyperexpression
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 211
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 175

    (141) funccall -> ID ( funccallB . funccallC
    (145) funccallC -> . , funccallB funccallC
    (146) funccallC -> . )

    ,               shift and go to state 214
    )               shift and go to state 213

    funccallC                      shift and go to state 212

state 176

    (142) funccallB -> hyperexpression . seen_param
    (144) seen_param -> .

    ,               reduce using rule 144 (seen_param -> .)
    )               reduce using rule 144 (seen_param -> .)

    seen_param                     shift and go to state 215

state 177

    (143) funccallB -> empty .
    (97) signB -> empty .

    ,               reduce using rule 143 (funccallB -> empty .)
    )               reduce using rule 143 (funccallB -> empty .)
    FCONST          reduce using rule 97 (signB -> empty .)
    ICONST          reduce using rule 97 (signB -> empty .)
    SCONST          reduce using rule 97 (signB -> empty .)
    TRUE            reduce using rule 97 (signB -> empty .)
    FALSE           reduce using rule 97 (signB -> empty .)


state 178

    (93) factor -> ID seen_ID dimensionsOpt .

    /               reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    *               reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    -               reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    +               reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    <               reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    >               reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    DIFF            reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    EQ              reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    LTEQ            reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    GTEQ            reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    AND             reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    OR              reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    ,               reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    )               reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    ;               reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)
    ]               reduce using rule 93 (factor -> ID seen_ID dimensionsOpt .)


state 179

    (83) expB -> + . push_operator exp
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 216

state 180

    (82) expB -> - . push_operator exp
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 217

state 181

    (80) exp -> term seen_term expB .

    AND             reduce using rule 80 (exp -> term seen_term expB .)
    OR              reduce using rule 80 (exp -> term seen_term expB .)
    ;               reduce using rule 80 (exp -> term seen_term expB .)
    )               reduce using rule 80 (exp -> term seen_term expB .)
    ,               reduce using rule 80 (exp -> term seen_term expB .)
    ]               reduce using rule 80 (exp -> term seen_term expB .)
    <               reduce using rule 80 (exp -> term seen_term expB .)
    >               reduce using rule 80 (exp -> term seen_term expB .)
    DIFF            reduce using rule 80 (exp -> term seen_term expB .)
    EQ              reduce using rule 80 (exp -> term seen_term expB .)
    LTEQ            reduce using rule 80 (exp -> term seen_term expB .)
    GTEQ            reduce using rule 80 (exp -> term seen_term expB .)


state 182

    (84) expB -> empty .

    <               reduce using rule 84 (expB -> empty .)
    >               reduce using rule 84 (expB -> empty .)
    DIFF            reduce using rule 84 (expB -> empty .)
    EQ              reduce using rule 84 (expB -> empty .)
    LTEQ            reduce using rule 84 (expB -> empty .)
    GTEQ            reduce using rule 84 (expB -> empty .)
    AND             reduce using rule 84 (expB -> empty .)
    OR              reduce using rule 84 (expB -> empty .)
    ;               reduce using rule 84 (expB -> empty .)
    )               reduce using rule 84 (expB -> empty .)
    ,               reduce using rule 84 (expB -> empty .)
    ]               reduce using rule 84 (expB -> empty .)


state 183

    (78) expressionB -> GTEQ push_operator . exp
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 218
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 184

    (77) expressionB -> LTEQ push_operator . exp
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 219
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 185

    (75) expressionB -> DIFF push_operator . exp
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 220
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 186

    (76) expressionB -> EQ push_operator . exp
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 221
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 187

    (73) expressionB -> < push_operator . exp
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 222
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 188

    (74) expressionB -> > push_operator . exp
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 223
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 189

    (70) superexpressionB -> AND push_operator . superexpression
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 224
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 190

    (124) read -> READ ( validate_id push_operand . read_quadruple readB )
    (126) read_quadruple -> .

    ,               reduce using rule 126 (read_quadruple -> .)
    )               reduce using rule 126 (read_quadruple -> .)

    read_quadruple                 shift and go to state 225

state 191

    (110) whileloop -> WHILE init_while ( hyperexpression . ) while_quadruple block endwhile_quadruple

    )               shift and go to state 226


state 192

    (130) outputB -> hyperexpression print_quadruple . outputC
    (132) outputC -> . )
    (133) outputC -> . , outputB

    )               shift and go to state 227
    ,               shift and go to state 228

    outputC                        shift and go to state 229

state 193

    (39) assign -> ID push_operand . dimensionsOpt = push_operator hyperexpression quadruple_assign
    (41) dimensionsOpt -> . dimensions
    (42) dimensionsOpt -> . empty
    (147) dimensions -> . [ hyperexpression ] dimensionsB
    (155) empty -> .

    [               shift and go to state 113
    =               reduce using rule 155 (empty -> .)

    dimensions                     shift and go to state 112
    dimensionsOpt                  shift and go to state 230
    empty                          shift and go to state 115

state 194

    (120) forloop -> FOR ( assign ; . init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (111) init_while -> .

    (               reduce using rule 111 (init_while -> .)
    ID              reduce using rule 111 (init_while -> .)
    +               reduce using rule 111 (init_while -> .)
    -               reduce using rule 111 (init_while -> .)
    FCONST          reduce using rule 111 (init_while -> .)
    ICONST          reduce using rule 111 (init_while -> .)
    SCONST          reduce using rule 111 (init_while -> .)
    TRUE            reduce using rule 111 (init_while -> .)
    FALSE           reduce using rule 111 (init_while -> .)

    init_while                     shift and go to state 231

state 195

    (58) assignfunccall -> ID seen_funccall push_operand assignfunccallB .

    ;               reduce using rule 58 (assignfunccall -> ID seen_funccall push_operand assignfunccallB .)


state 196

    (61) assignfunccallB -> ( . pop_operand funccallB funccallC
    (60) pop_operand -> .

    (               reduce using rule 60 (pop_operand -> .)
    ID              reduce using rule 60 (pop_operand -> .)
    +               reduce using rule 60 (pop_operand -> .)
    -               reduce using rule 60 (pop_operand -> .)
    ,               reduce using rule 60 (pop_operand -> .)
    )               reduce using rule 60 (pop_operand -> .)
    FCONST          reduce using rule 60 (pop_operand -> .)
    ICONST          reduce using rule 60 (pop_operand -> .)
    SCONST          reduce using rule 60 (pop_operand -> .)
    TRUE            reduce using rule 60 (pop_operand -> .)
    FALSE           reduce using rule 60 (pop_operand -> .)

    pop_operand                    shift and go to state 232

state 197

    (62) assignfunccallB -> assignB .

    ;               reduce using rule 62 (assignfunccallB -> assignB .)


state 198

    (40) assignB -> dimensionsOpt . = push_operator hyperexpression quadruple_assign

    =               shift and go to state 233


state 199

    (43) condition -> IF ( hyperexpression condition_quadruple . ) block else endcondition_quadruple

    )               shift and go to state 234


state 200

    (33) func -> DEF returntype ID ( paramsOpt ) .

    {               reduce using rule 33 (func -> DEF returntype ID ( paramsOpt ) .)


state 201

    (34) paramsOpt -> params paramsB .

    )               reduce using rule 34 (paramsOpt -> params paramsB .)


state 202

    (153) paramsB -> , . params paramsB
    (152) params -> . type ID
    (114) type -> . INT
    (115) type -> . FLOAT
    (116) type -> . STRING
    (117) type -> . BOOL

    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    type                           shift and go to state 159
    params                         shift and go to state 235

state 203

    (154) paramsB -> empty .

    )               reduce using rule 154 (paramsB -> empty .)


state 204

    (152) params -> type ID .

    ,               reduce using rule 152 (params -> type ID .)
    )               reduce using rule 152 (params -> type ID .)


state 205

    (147) dimensions -> [ hyperexpression ] . dimensionsB
    (148) dimensionsB -> . [ hyperexpression ]
    (149) dimensionsB -> . empty
    (155) empty -> .

    [               shift and go to state 237
    =               reduce using rule 155 (empty -> .)
    ,               reduce using rule 155 (empty -> .)
    ;               reduce using rule 155 (empty -> .)
    /               reduce using rule 155 (empty -> .)
    *               reduce using rule 155 (empty -> .)
    -               reduce using rule 155 (empty -> .)
    +               reduce using rule 155 (empty -> .)
    <               reduce using rule 155 (empty -> .)
    >               reduce using rule 155 (empty -> .)
    DIFF            reduce using rule 155 (empty -> .)
    EQ              reduce using rule 155 (empty -> .)
    LTEQ            reduce using rule 155 (empty -> .)
    GTEQ            reduce using rule 155 (empty -> .)
    AND             reduce using rule 155 (empty -> .)
    OR              reduce using rule 155 (empty -> .)
    )               reduce using rule 155 (empty -> .)
    ]               reduce using rule 155 (empty -> .)

    dimensionsB                    shift and go to state 236
    empty                          shift and go to state 238

state 206

    (26) declarationC -> , repush_type declarationB declarationC .

    INT             reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    FLOAT           reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    STRING          reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    BOOL            reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    DEF             reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    MAIN            reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    ID              reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    PRINT           reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    RETURN          reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    READ            reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    IF              reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    WHILE           reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    FOR             reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    #               reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)
    }               reduce using rule 26 (declarationC -> , repush_type declarationB declarationC .)


state 207

    (25) declarationC -> = push_operator hyperexpression quadruple_assign . declarationD
    (28) declarationD -> . , repush_type declarationB declarationC
    (29) declarationD -> . ;

    ,               shift and go to state 239
    ;               shift and go to state 240

    declarationD                   shift and go to state 241

state 208

    (91) factor -> ( seen_parentheses hyperexpression ) .

    /               reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    *               reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    -               reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    +               reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    <               reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    >               reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    DIFF            reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    EQ              reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    LTEQ            reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    GTEQ            reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    AND             reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    OR              reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    ,               reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    )               reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    ;               reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)
    ]               reduce using rule 91 (factor -> ( seen_parentheses hyperexpression ) .)


state 209

    (88) termB -> * push_operator . term
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    term                           shift and go to state 242
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 210

    (87) termB -> / push_operator . term
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    term                           shift and go to state 243
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 211

    (67) hyperexpressionB -> OR push_operator hyperexpression .

    ;               reduce using rule 67 (hyperexpressionB -> OR push_operator hyperexpression .)
    )               reduce using rule 67 (hyperexpressionB -> OR push_operator hyperexpression .)
    ,               reduce using rule 67 (hyperexpressionB -> OR push_operator hyperexpression .)
    ]               reduce using rule 67 (hyperexpressionB -> OR push_operator hyperexpression .)


state 212

    (141) funccall -> ID ( funccallB funccallC .

    /               reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    *               reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    -               reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    +               reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    <               reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    >               reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    DIFF            reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    EQ              reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    LTEQ            reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    GTEQ            reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    AND             reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    OR              reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    ;               reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    ]               reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    ,               reduce using rule 141 (funccall -> ID ( funccallB funccallC .)
    )               reduce using rule 141 (funccall -> ID ( funccallB funccallC .)


state 213

    (146) funccallC -> ) .

    ;               reduce using rule 146 (funccallC -> ) .)
    /               reduce using rule 146 (funccallC -> ) .)
    *               reduce using rule 146 (funccallC -> ) .)
    -               reduce using rule 146 (funccallC -> ) .)
    +               reduce using rule 146 (funccallC -> ) .)
    <               reduce using rule 146 (funccallC -> ) .)
    >               reduce using rule 146 (funccallC -> ) .)
    DIFF            reduce using rule 146 (funccallC -> ) .)
    EQ              reduce using rule 146 (funccallC -> ) .)
    LTEQ            reduce using rule 146 (funccallC -> ) .)
    GTEQ            reduce using rule 146 (funccallC -> ) .)
    AND             reduce using rule 146 (funccallC -> ) .)
    OR              reduce using rule 146 (funccallC -> ) .)
    )               reduce using rule 146 (funccallC -> ) .)
    ,               reduce using rule 146 (funccallC -> ) .)
    ]               reduce using rule 146 (funccallC -> ) .)


state 214

    (145) funccallC -> , . funccallB funccallC
    (142) funccallB -> . hyperexpression seen_param
    (143) funccallB -> . empty
    (66) hyperexpression -> . superexpression hyperexpressionB
    (155) empty -> .
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -

    ,               reduce using rule 155 (empty -> .)
    )               reduce using rule 155 (empty -> .)
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84

    funccallB                      shift and go to state 244
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 176
    factor                         shift and go to state 86
    empty                          shift and go to state 177
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 215

    (142) funccallB -> hyperexpression seen_param .

    ,               reduce using rule 142 (funccallB -> hyperexpression seen_param .)
    )               reduce using rule 142 (funccallB -> hyperexpression seen_param .)


state 216

    (83) expB -> + push_operator . exp
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 245
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 217

    (82) expB -> - push_operator . exp
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 246
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 218

    (78) expressionB -> GTEQ push_operator exp .

    AND             reduce using rule 78 (expressionB -> GTEQ push_operator exp .)
    OR              reduce using rule 78 (expressionB -> GTEQ push_operator exp .)
    ;               reduce using rule 78 (expressionB -> GTEQ push_operator exp .)
    )               reduce using rule 78 (expressionB -> GTEQ push_operator exp .)
    ,               reduce using rule 78 (expressionB -> GTEQ push_operator exp .)
    ]               reduce using rule 78 (expressionB -> GTEQ push_operator exp .)


state 219

    (77) expressionB -> LTEQ push_operator exp .

    AND             reduce using rule 77 (expressionB -> LTEQ push_operator exp .)
    OR              reduce using rule 77 (expressionB -> LTEQ push_operator exp .)
    ;               reduce using rule 77 (expressionB -> LTEQ push_operator exp .)
    )               reduce using rule 77 (expressionB -> LTEQ push_operator exp .)
    ,               reduce using rule 77 (expressionB -> LTEQ push_operator exp .)
    ]               reduce using rule 77 (expressionB -> LTEQ push_operator exp .)


state 220

    (75) expressionB -> DIFF push_operator exp .

    AND             reduce using rule 75 (expressionB -> DIFF push_operator exp .)
    OR              reduce using rule 75 (expressionB -> DIFF push_operator exp .)
    ;               reduce using rule 75 (expressionB -> DIFF push_operator exp .)
    )               reduce using rule 75 (expressionB -> DIFF push_operator exp .)
    ,               reduce using rule 75 (expressionB -> DIFF push_operator exp .)
    ]               reduce using rule 75 (expressionB -> DIFF push_operator exp .)


state 221

    (76) expressionB -> EQ push_operator exp .

    AND             reduce using rule 76 (expressionB -> EQ push_operator exp .)
    OR              reduce using rule 76 (expressionB -> EQ push_operator exp .)
    ;               reduce using rule 76 (expressionB -> EQ push_operator exp .)
    )               reduce using rule 76 (expressionB -> EQ push_operator exp .)
    ,               reduce using rule 76 (expressionB -> EQ push_operator exp .)
    ]               reduce using rule 76 (expressionB -> EQ push_operator exp .)


state 222

    (73) expressionB -> < push_operator exp .

    AND             reduce using rule 73 (expressionB -> < push_operator exp .)
    OR              reduce using rule 73 (expressionB -> < push_operator exp .)
    ;               reduce using rule 73 (expressionB -> < push_operator exp .)
    )               reduce using rule 73 (expressionB -> < push_operator exp .)
    ,               reduce using rule 73 (expressionB -> < push_operator exp .)
    ]               reduce using rule 73 (expressionB -> < push_operator exp .)


state 223

    (74) expressionB -> > push_operator exp .

    AND             reduce using rule 74 (expressionB -> > push_operator exp .)
    OR              reduce using rule 74 (expressionB -> > push_operator exp .)
    ;               reduce using rule 74 (expressionB -> > push_operator exp .)
    )               reduce using rule 74 (expressionB -> > push_operator exp .)
    ,               reduce using rule 74 (expressionB -> > push_operator exp .)
    ]               reduce using rule 74 (expressionB -> > push_operator exp .)


state 224

    (70) superexpressionB -> AND push_operator superexpression .

    OR              reduce using rule 70 (superexpressionB -> AND push_operator superexpression .)
    ;               reduce using rule 70 (superexpressionB -> AND push_operator superexpression .)
    )               reduce using rule 70 (superexpressionB -> AND push_operator superexpression .)
    ,               reduce using rule 70 (superexpressionB -> AND push_operator superexpression .)
    ]               reduce using rule 70 (superexpressionB -> AND push_operator superexpression .)


state 225

    (124) read -> READ ( validate_id push_operand read_quadruple . readB )
    (127) readB -> . , validate_id push_operand read_quadruple readB
    (128) readB -> . empty
    (155) empty -> .

    ,               shift and go to state 248
    )               reduce using rule 155 (empty -> .)

    readB                          shift and go to state 247
    empty                          shift and go to state 249

state 226

    (110) whileloop -> WHILE init_while ( hyperexpression ) . while_quadruple block endwhile_quadruple
    (112) while_quadruple -> .

    {               reduce using rule 112 (while_quadruple -> .)

    while_quadruple                shift and go to state 250

state 227

    (132) outputC -> ) .

    ;               reduce using rule 132 (outputC -> ) .)


state 228

    (133) outputC -> , . outputB
    (130) outputB -> . hyperexpression print_quadruple outputC
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    signB                          shift and go to state 81
    hyperexpression                shift and go to state 148
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    outputB                        shift and go to state 251
    expression                     shift and go to state 94

state 229

    (130) outputB -> hyperexpression print_quadruple outputC .

    ;               reduce using rule 130 (outputB -> hyperexpression print_quadruple outputC .)


state 230

    (39) assign -> ID push_operand dimensionsOpt . = push_operator hyperexpression quadruple_assign

    =               shift and go to state 252


state 231

    (120) forloop -> FOR ( assign ; init_while . hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    signB                          shift and go to state 81
    hyperexpression                shift and go to state 253
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 232

    (61) assignfunccallB -> ( pop_operand . funccallB funccallC
    (142) funccallB -> . hyperexpression seen_param
    (143) funccallB -> . empty
    (66) hyperexpression -> . superexpression hyperexpressionB
    (155) empty -> .
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -

    ,               reduce using rule 155 (empty -> .)
    )               reduce using rule 155 (empty -> .)
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)
    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84

    funccallB                      shift and go to state 254
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 176
    factor                         shift and go to state 86
    empty                          shift and go to state 177
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 233

    (40) assignB -> dimensionsOpt = . push_operator hyperexpression quadruple_assign
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 255

state 234

    (43) condition -> IF ( hyperexpression condition_quadruple ) . block else endcondition_quadruple
    (36) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 256

state 235

    (153) paramsB -> , params . paramsB
    (153) paramsB -> . , params paramsB
    (154) paramsB -> . empty
    (155) empty -> .

    ,               shift and go to state 202
    )               reduce using rule 155 (empty -> .)

    paramsB                        shift and go to state 257
    empty                          shift and go to state 203

state 236

    (147) dimensions -> [ hyperexpression ] dimensionsB .

    /               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    *               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    -               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    +               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    <               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    >               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    DIFF            reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    EQ              reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    LTEQ            reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    GTEQ            reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    AND             reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    OR              reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    ;               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    )               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    ,               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    ]               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)
    =               reduce using rule 147 (dimensions -> [ hyperexpression ] dimensionsB .)


state 237

    (148) dimensionsB -> [ . hyperexpression ]
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 258
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 238

    (149) dimensionsB -> empty .

    =               reduce using rule 149 (dimensionsB -> empty .)
    ,               reduce using rule 149 (dimensionsB -> empty .)
    ;               reduce using rule 149 (dimensionsB -> empty .)
    /               reduce using rule 149 (dimensionsB -> empty .)
    *               reduce using rule 149 (dimensionsB -> empty .)
    -               reduce using rule 149 (dimensionsB -> empty .)
    +               reduce using rule 149 (dimensionsB -> empty .)
    <               reduce using rule 149 (dimensionsB -> empty .)
    >               reduce using rule 149 (dimensionsB -> empty .)
    DIFF            reduce using rule 149 (dimensionsB -> empty .)
    EQ              reduce using rule 149 (dimensionsB -> empty .)
    LTEQ            reduce using rule 149 (dimensionsB -> empty .)
    GTEQ            reduce using rule 149 (dimensionsB -> empty .)
    AND             reduce using rule 149 (dimensionsB -> empty .)
    OR              reduce using rule 149 (dimensionsB -> empty .)
    )               reduce using rule 149 (dimensionsB -> empty .)
    ]               reduce using rule 149 (dimensionsB -> empty .)


state 239

    (28) declarationD -> , . repush_type declarationB declarationC
    (22) repush_type -> .

    ID              reduce using rule 22 (repush_type -> .)

    repush_type                    shift and go to state 259

state 240

    (29) declarationD -> ; .

    INT             reduce using rule 29 (declarationD -> ; .)
    FLOAT           reduce using rule 29 (declarationD -> ; .)
    STRING          reduce using rule 29 (declarationD -> ; .)
    BOOL            reduce using rule 29 (declarationD -> ; .)
    DEF             reduce using rule 29 (declarationD -> ; .)
    MAIN            reduce using rule 29 (declarationD -> ; .)
    ID              reduce using rule 29 (declarationD -> ; .)
    PRINT           reduce using rule 29 (declarationD -> ; .)
    RETURN          reduce using rule 29 (declarationD -> ; .)
    READ            reduce using rule 29 (declarationD -> ; .)
    IF              reduce using rule 29 (declarationD -> ; .)
    WHILE           reduce using rule 29 (declarationD -> ; .)
    FOR             reduce using rule 29 (declarationD -> ; .)
    #               reduce using rule 29 (declarationD -> ; .)
    TRACKDECISION   reduce using rule 29 (declarationD -> ; .)
    FORGETDECISION  reduce using rule 29 (declarationD -> ; .)
    }               reduce using rule 29 (declarationD -> ; .)


state 241

    (25) declarationC -> = push_operator hyperexpression quadruple_assign declarationD .

    INT             reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FLOAT           reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    STRING          reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    BOOL            reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    DEF             reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    MAIN            reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    ID              reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    PRINT           reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    RETURN          reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    READ            reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    IF              reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    WHILE           reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FOR             reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    #               reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    TRACKDECISION   reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FORGETDECISION  reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    }               reduce using rule 25 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)


state 242

    (88) termB -> * push_operator term .

    -               reduce using rule 88 (termB -> * push_operator term .)
    +               reduce using rule 88 (termB -> * push_operator term .)
    <               reduce using rule 88 (termB -> * push_operator term .)
    >               reduce using rule 88 (termB -> * push_operator term .)
    DIFF            reduce using rule 88 (termB -> * push_operator term .)
    EQ              reduce using rule 88 (termB -> * push_operator term .)
    LTEQ            reduce using rule 88 (termB -> * push_operator term .)
    GTEQ            reduce using rule 88 (termB -> * push_operator term .)
    AND             reduce using rule 88 (termB -> * push_operator term .)
    OR              reduce using rule 88 (termB -> * push_operator term .)
    ;               reduce using rule 88 (termB -> * push_operator term .)
    )               reduce using rule 88 (termB -> * push_operator term .)
    ,               reduce using rule 88 (termB -> * push_operator term .)
    ]               reduce using rule 88 (termB -> * push_operator term .)


state 243

    (87) termB -> / push_operator term .

    -               reduce using rule 87 (termB -> / push_operator term .)
    +               reduce using rule 87 (termB -> / push_operator term .)
    <               reduce using rule 87 (termB -> / push_operator term .)
    >               reduce using rule 87 (termB -> / push_operator term .)
    DIFF            reduce using rule 87 (termB -> / push_operator term .)
    EQ              reduce using rule 87 (termB -> / push_operator term .)
    LTEQ            reduce using rule 87 (termB -> / push_operator term .)
    GTEQ            reduce using rule 87 (termB -> / push_operator term .)
    AND             reduce using rule 87 (termB -> / push_operator term .)
    OR              reduce using rule 87 (termB -> / push_operator term .)
    ;               reduce using rule 87 (termB -> / push_operator term .)
    )               reduce using rule 87 (termB -> / push_operator term .)
    ,               reduce using rule 87 (termB -> / push_operator term .)
    ]               reduce using rule 87 (termB -> / push_operator term .)


state 244

    (145) funccallC -> , funccallB . funccallC
    (145) funccallC -> . , funccallB funccallC
    (146) funccallC -> . )

    ,               shift and go to state 214
    )               shift and go to state 213

    funccallC                      shift and go to state 260

state 245

    (83) expB -> + push_operator exp .

    <               reduce using rule 83 (expB -> + push_operator exp .)
    >               reduce using rule 83 (expB -> + push_operator exp .)
    DIFF            reduce using rule 83 (expB -> + push_operator exp .)
    EQ              reduce using rule 83 (expB -> + push_operator exp .)
    LTEQ            reduce using rule 83 (expB -> + push_operator exp .)
    GTEQ            reduce using rule 83 (expB -> + push_operator exp .)
    AND             reduce using rule 83 (expB -> + push_operator exp .)
    OR              reduce using rule 83 (expB -> + push_operator exp .)
    ;               reduce using rule 83 (expB -> + push_operator exp .)
    )               reduce using rule 83 (expB -> + push_operator exp .)
    ,               reduce using rule 83 (expB -> + push_operator exp .)
    ]               reduce using rule 83 (expB -> + push_operator exp .)


state 246

    (82) expB -> - push_operator exp .

    <               reduce using rule 82 (expB -> - push_operator exp .)
    >               reduce using rule 82 (expB -> - push_operator exp .)
    DIFF            reduce using rule 82 (expB -> - push_operator exp .)
    EQ              reduce using rule 82 (expB -> - push_operator exp .)
    LTEQ            reduce using rule 82 (expB -> - push_operator exp .)
    GTEQ            reduce using rule 82 (expB -> - push_operator exp .)
    AND             reduce using rule 82 (expB -> - push_operator exp .)
    OR              reduce using rule 82 (expB -> - push_operator exp .)
    ;               reduce using rule 82 (expB -> - push_operator exp .)
    )               reduce using rule 82 (expB -> - push_operator exp .)
    ,               reduce using rule 82 (expB -> - push_operator exp .)
    ]               reduce using rule 82 (expB -> - push_operator exp .)


state 247

    (124) read -> READ ( validate_id push_operand read_quadruple readB . )

    )               shift and go to state 261


state 248

    (127) readB -> , . validate_id push_operand read_quadruple readB
    (125) validate_id -> . ID

    ID              shift and go to state 146

    validate_id                    shift and go to state 262

state 249

    (128) readB -> empty .

    )               reduce using rule 128 (readB -> empty .)


state 250

    (110) whileloop -> WHILE init_while ( hyperexpression ) while_quadruple . block endwhile_quadruple
    (36) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 263

state 251

    (133) outputC -> , outputB .

    ;               reduce using rule 133 (outputC -> , outputB .)


state 252

    (39) assign -> ID push_operand dimensionsOpt = . push_operator hyperexpression quadruple_assign
    (23) push_operator -> .

    (               reduce using rule 23 (push_operator -> .)
    ID              reduce using rule 23 (push_operator -> .)
    +               reduce using rule 23 (push_operator -> .)
    -               reduce using rule 23 (push_operator -> .)
    FCONST          reduce using rule 23 (push_operator -> .)
    ICONST          reduce using rule 23 (push_operator -> .)
    SCONST          reduce using rule 23 (push_operator -> .)
    TRUE            reduce using rule 23 (push_operator -> .)
    FALSE           reduce using rule 23 (push_operator -> .)

    push_operator                  shift and go to state 264

state 253

    (120) forloop -> FOR ( assign ; init_while hyperexpression . for_quadruple ; hyperexpression for_expression ) block endfor_quadruple
    (121) for_quadruple -> .

    ;               reduce using rule 121 (for_quadruple -> .)

    for_quadruple                  shift and go to state 265

state 254

    (61) assignfunccallB -> ( pop_operand funccallB . funccallC
    (145) funccallC -> . , funccallB funccallC
    (146) funccallC -> . )

    ,               shift and go to state 214
    )               shift and go to state 213

    funccallC                      shift and go to state 266

state 255

    (40) assignB -> dimensionsOpt = push_operator . hyperexpression quadruple_assign
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 267
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 256

    (43) condition -> IF ( hyperexpression condition_quadruple ) block . else endcondition_quadruple
    (44) else -> . ELSE elsecondition_quadruple block
    (45) else -> . empty
    (155) empty -> .

    ELSE            shift and go to state 268
    ID              reduce using rule 155 (empty -> .)
    PRINT           reduce using rule 155 (empty -> .)
    RETURN          reduce using rule 155 (empty -> .)
    READ            reduce using rule 155 (empty -> .)
    IF              reduce using rule 155 (empty -> .)
    WHILE           reduce using rule 155 (empty -> .)
    FOR             reduce using rule 155 (empty -> .)
    INT             reduce using rule 155 (empty -> .)
    FLOAT           reduce using rule 155 (empty -> .)
    STRING          reduce using rule 155 (empty -> .)
    BOOL            reduce using rule 155 (empty -> .)
    #               reduce using rule 155 (empty -> .)
    TRACKDECISION   reduce using rule 155 (empty -> .)
    FORGETDECISION  reduce using rule 155 (empty -> .)
    }               reduce using rule 155 (empty -> .)

    else                           shift and go to state 270
    empty                          shift and go to state 269

state 257

    (153) paramsB -> , params paramsB .

    )               reduce using rule 153 (paramsB -> , params paramsB .)


state 258

    (148) dimensionsB -> [ hyperexpression . ]

    ]               shift and go to state 271


state 259

    (28) declarationD -> , repush_type . declarationB declarationC
    (19) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 45

    declarationB                   shift and go to state 272

state 260

    (145) funccallC -> , funccallB funccallC .

    ;               reduce using rule 145 (funccallC -> , funccallB funccallC .)
    /               reduce using rule 145 (funccallC -> , funccallB funccallC .)
    *               reduce using rule 145 (funccallC -> , funccallB funccallC .)
    -               reduce using rule 145 (funccallC -> , funccallB funccallC .)
    +               reduce using rule 145 (funccallC -> , funccallB funccallC .)
    <               reduce using rule 145 (funccallC -> , funccallB funccallC .)
    >               reduce using rule 145 (funccallC -> , funccallB funccallC .)
    DIFF            reduce using rule 145 (funccallC -> , funccallB funccallC .)
    EQ              reduce using rule 145 (funccallC -> , funccallB funccallC .)
    LTEQ            reduce using rule 145 (funccallC -> , funccallB funccallC .)
    GTEQ            reduce using rule 145 (funccallC -> , funccallB funccallC .)
    AND             reduce using rule 145 (funccallC -> , funccallB funccallC .)
    OR              reduce using rule 145 (funccallC -> , funccallB funccallC .)
    )               reduce using rule 145 (funccallC -> , funccallB funccallC .)
    ,               reduce using rule 145 (funccallC -> , funccallB funccallC .)
    ]               reduce using rule 145 (funccallC -> , funccallB funccallC .)


state 261

    (124) read -> READ ( validate_id push_operand read_quadruple readB ) .

    ;               reduce using rule 124 (read -> READ ( validate_id push_operand read_quadruple readB ) .)


state 262

    (127) readB -> , validate_id . push_operand read_quadruple readB
    (20) push_operand -> .

    ,               reduce using rule 20 (push_operand -> .)
    )               reduce using rule 20 (push_operand -> .)

    push_operand                   shift and go to state 273

state 263

    (110) whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block . endwhile_quadruple
    (113) endwhile_quadruple -> .

    ID              reduce using rule 113 (endwhile_quadruple -> .)
    PRINT           reduce using rule 113 (endwhile_quadruple -> .)
    RETURN          reduce using rule 113 (endwhile_quadruple -> .)
    READ            reduce using rule 113 (endwhile_quadruple -> .)
    IF              reduce using rule 113 (endwhile_quadruple -> .)
    WHILE           reduce using rule 113 (endwhile_quadruple -> .)
    FOR             reduce using rule 113 (endwhile_quadruple -> .)
    INT             reduce using rule 113 (endwhile_quadruple -> .)
    FLOAT           reduce using rule 113 (endwhile_quadruple -> .)
    STRING          reduce using rule 113 (endwhile_quadruple -> .)
    BOOL            reduce using rule 113 (endwhile_quadruple -> .)
    #               reduce using rule 113 (endwhile_quadruple -> .)
    TRACKDECISION   reduce using rule 113 (endwhile_quadruple -> .)
    FORGETDECISION  reduce using rule 113 (endwhile_quadruple -> .)
    }               reduce using rule 113 (endwhile_quadruple -> .)

    endwhile_quadruple             shift and go to state 274

state 264

    (39) assign -> ID push_operand dimensionsOpt = push_operator . hyperexpression quadruple_assign
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    signB                          shift and go to state 81
    hyperexpression                shift and go to state 275
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 265

    (120) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple . ; hyperexpression for_expression ) block endfor_quadruple

    ;               shift and go to state 276


state 266

    (61) assignfunccallB -> ( pop_operand funccallB funccallC .

    ;               reduce using rule 61 (assignfunccallB -> ( pop_operand funccallB funccallC .)


state 267

    (40) assignB -> dimensionsOpt = push_operator hyperexpression . quadruple_assign
    (24) quadruple_assign -> .

    ;               reduce using rule 24 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 277

state 268

    (44) else -> ELSE . elsecondition_quadruple block
    (47) elsecondition_quadruple -> .

    {               reduce using rule 47 (elsecondition_quadruple -> .)

    elsecondition_quadruple        shift and go to state 278

state 269

    (45) else -> empty .

    ID              reduce using rule 45 (else -> empty .)
    PRINT           reduce using rule 45 (else -> empty .)
    RETURN          reduce using rule 45 (else -> empty .)
    READ            reduce using rule 45 (else -> empty .)
    IF              reduce using rule 45 (else -> empty .)
    WHILE           reduce using rule 45 (else -> empty .)
    FOR             reduce using rule 45 (else -> empty .)
    INT             reduce using rule 45 (else -> empty .)
    FLOAT           reduce using rule 45 (else -> empty .)
    STRING          reduce using rule 45 (else -> empty .)
    BOOL            reduce using rule 45 (else -> empty .)
    #               reduce using rule 45 (else -> empty .)
    TRACKDECISION   reduce using rule 45 (else -> empty .)
    FORGETDECISION  reduce using rule 45 (else -> empty .)
    }               reduce using rule 45 (else -> empty .)


state 270

    (43) condition -> IF ( hyperexpression condition_quadruple ) block else . endcondition_quadruple
    (48) endcondition_quadruple -> .

    ID              reduce using rule 48 (endcondition_quadruple -> .)
    PRINT           reduce using rule 48 (endcondition_quadruple -> .)
    RETURN          reduce using rule 48 (endcondition_quadruple -> .)
    READ            reduce using rule 48 (endcondition_quadruple -> .)
    IF              reduce using rule 48 (endcondition_quadruple -> .)
    WHILE           reduce using rule 48 (endcondition_quadruple -> .)
    FOR             reduce using rule 48 (endcondition_quadruple -> .)
    INT             reduce using rule 48 (endcondition_quadruple -> .)
    FLOAT           reduce using rule 48 (endcondition_quadruple -> .)
    STRING          reduce using rule 48 (endcondition_quadruple -> .)
    BOOL            reduce using rule 48 (endcondition_quadruple -> .)
    #               reduce using rule 48 (endcondition_quadruple -> .)
    TRACKDECISION   reduce using rule 48 (endcondition_quadruple -> .)
    FORGETDECISION  reduce using rule 48 (endcondition_quadruple -> .)
    }               reduce using rule 48 (endcondition_quadruple -> .)

    endcondition_quadruple         shift and go to state 279

state 271

    (148) dimensionsB -> [ hyperexpression ] .

    =               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    ,               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    ;               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    /               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    *               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    -               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    +               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    <               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    >               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    DIFF            reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    EQ              reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    LTEQ            reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    GTEQ            reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    AND             reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    OR              reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    )               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)
    ]               reduce using rule 148 (dimensionsB -> [ hyperexpression ] .)


state 272

    (28) declarationD -> , repush_type declarationB . declarationC
    (25) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (26) declarationC -> . , repush_type declarationB declarationC
    (27) declarationC -> . ;

    =               shift and go to state 79
    ,               shift and go to state 76
    ;               shift and go to state 77

    declarationC                   shift and go to state 280

state 273

    (127) readB -> , validate_id push_operand . read_quadruple readB
    (126) read_quadruple -> .

    ,               reduce using rule 126 (read_quadruple -> .)
    )               reduce using rule 126 (read_quadruple -> .)

    read_quadruple                 shift and go to state 281

state 274

    (110) whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .

    ID              reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    PRINT           reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    RETURN          reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    READ            reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    IF              reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    WHILE           reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    FOR             reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    INT             reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    FLOAT           reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    STRING          reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    BOOL            reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    #               reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    TRACKDECISION   reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    FORGETDECISION  reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)
    }               reduce using rule 110 (whileloop -> WHILE init_while ( hyperexpression ) while_quadruple block endwhile_quadruple .)


state 275

    (39) assign -> ID push_operand dimensionsOpt = push_operator hyperexpression . quadruple_assign
    (24) quadruple_assign -> .

    ;               reduce using rule 24 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 282

state 276

    (120) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; . hyperexpression for_expression ) block endfor_quadruple
    (66) hyperexpression -> . superexpression hyperexpressionB
    (69) superexpression -> . expression superexpressionB
    (72) expression -> . exp expressionB
    (80) exp -> . term seen_term expB
    (85) term -> . factor seen_factor termB
    (90) factor -> . signB constant
    (91) factor -> . ( seen_parentheses hyperexpression )
    (92) factor -> . funccall
    (93) factor -> . ID seen_ID dimensionsOpt
    (96) signB -> . sign
    (97) signB -> . empty
    (141) funccall -> . ID ( funccallB funccallC
    (108) sign -> . +
    (109) sign -> . -
    (155) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 155 (empty -> .)
    ICONST          reduce using rule 155 (empty -> .)
    SCONST          reduce using rule 155 (empty -> .)
    TRUE            reduce using rule 155 (empty -> .)
    FALSE           reduce using rule 155 (empty -> .)

    signB                          shift and go to state 81
    hyperexpression                shift and go to state 283
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 277

    (40) assignB -> dimensionsOpt = push_operator hyperexpression quadruple_assign .

    ;               reduce using rule 40 (assignB -> dimensionsOpt = push_operator hyperexpression quadruple_assign .)


state 278

    (44) else -> ELSE elsecondition_quadruple . block
    (36) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 284

state 279

    (43) condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .

    ID              reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    PRINT           reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    RETURN          reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    READ            reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    IF              reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    WHILE           reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    FOR             reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    INT             reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    FLOAT           reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    STRING          reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    BOOL            reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    #               reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    TRACKDECISION   reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    FORGETDECISION  reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)
    }               reduce using rule 43 (condition -> IF ( hyperexpression condition_quadruple ) block else endcondition_quadruple .)


state 280

    (28) declarationD -> , repush_type declarationB declarationC .

    INT             reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    FLOAT           reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    STRING          reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    BOOL            reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    DEF             reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    MAIN            reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    ID              reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    PRINT           reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    RETURN          reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    READ            reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    IF              reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    WHILE           reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    FOR             reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    #               reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)
    }               reduce using rule 28 (declarationD -> , repush_type declarationB declarationC .)


state 281

    (127) readB -> , validate_id push_operand read_quadruple . readB
    (127) readB -> . , validate_id push_operand read_quadruple readB
    (128) readB -> . empty
    (155) empty -> .

    ,               shift and go to state 248
    )               reduce using rule 155 (empty -> .)

    readB                          shift and go to state 285
    empty                          shift and go to state 249

state 282

    (39) assign -> ID push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign .

    ;               reduce using rule 39 (assign -> ID push_operand dimensionsOpt = push_operator hyperexpression quadruple_assign .)


state 283

    (120) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression . for_expression ) block endfor_quadruple
    (122) for_expression -> .

    )               reduce using rule 122 (for_expression -> .)

    for_expression                 shift and go to state 286

state 284

    (44) else -> ELSE elsecondition_quadruple block .

    ID              reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    PRINT           reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    RETURN          reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    READ            reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    IF              reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    WHILE           reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    FOR             reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    INT             reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    FLOAT           reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    STRING          reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    BOOL            reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    #               reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    TRACKDECISION   reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    FORGETDECISION  reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)
    }               reduce using rule 44 (else -> ELSE elsecondition_quadruple block .)


state 285

    (127) readB -> , validate_id push_operand read_quadruple readB .

    )               reduce using rule 127 (readB -> , validate_id push_operand read_quadruple readB .)


state 286

    (120) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression . ) block endfor_quadruple

    )               shift and go to state 287


state 287

    (120) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) . block endfor_quadruple
    (36) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 288

state 288

    (120) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block . endfor_quadruple
    (123) endfor_quadruple -> .

    ID              reduce using rule 123 (endfor_quadruple -> .)
    PRINT           reduce using rule 123 (endfor_quadruple -> .)
    RETURN          reduce using rule 123 (endfor_quadruple -> .)
    READ            reduce using rule 123 (endfor_quadruple -> .)
    IF              reduce using rule 123 (endfor_quadruple -> .)
    WHILE           reduce using rule 123 (endfor_quadruple -> .)
    FOR             reduce using rule 123 (endfor_quadruple -> .)
    INT             reduce using rule 123 (endfor_quadruple -> .)
    FLOAT           reduce using rule 123 (endfor_quadruple -> .)
    STRING          reduce using rule 123 (endfor_quadruple -> .)
    BOOL            reduce using rule 123 (endfor_quadruple -> .)
    #               reduce using rule 123 (endfor_quadruple -> .)
    TRACKDECISION   reduce using rule 123 (endfor_quadruple -> .)
    FORGETDECISION  reduce using rule 123 (endfor_quadruple -> .)
    }               reduce using rule 123 (endfor_quadruple -> .)

    endfor_quadruple               shift and go to state 289

state 289

    (120) forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .

    ID              reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    PRINT           reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    RETURN          reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    READ            reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    IF              reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    WHILE           reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    FOR             reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    INT             reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    FLOAT           reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    STRING          reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    BOOL            reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    #               reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    TRACKDECISION   reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    FORGETDECISION  reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)
    }               reduce using rule 120 (forloop -> FOR ( assign ; init_while hyperexpression for_quadruple ; hyperexpression for_expression ) block endfor_quadruple .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 40 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 40 resolved as shift
WARNING: shift/reduce conflict for READ in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for FOR in state 40 resolved as shift
WARNING: shift/reduce conflict for INT in state 40 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 40 resolved as shift
WARNING: shift/reduce conflict for STRING in state 40 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 40 resolved as shift
WARNING: shift/reduce conflict for # in state 40 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 40 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 71 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 71 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 71 resolved as shift
WARNING: shift/reduce conflict for READ in state 71 resolved as shift
WARNING: shift/reduce conflict for IF in state 71 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 71 resolved as shift
WARNING: shift/reduce conflict for FOR in state 71 resolved as shift
WARNING: shift/reduce conflict for INT in state 71 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 71 resolved as shift
WARNING: shift/reduce conflict for STRING in state 71 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 71 resolved as shift
WARNING: shift/reduce conflict for # in state 71 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 71 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 71 resolved as shift
WARNING: reduce/reduce conflict in state 58 resolved using rule (instructionsOpt -> empty)
WARNING: rejected rule (localdecisiondirective -> empty) in state 58
