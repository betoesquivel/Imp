Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> config body
Rule 2     config -> configdirective config
Rule 3     config -> empty
Rule 4     configdirective -> VARSCONFIG = options
Rule 5     configdirective -> DECISIONSCONFIG = options
Rule 6     configdirective -> COMPLEXITYCONFIG = optionsyesno
Rule 7     options -> SOME
Rule 8     options -> ALL
Rule 9     options -> MOST
Rule 10    options -> NONE
Rule 11    optionsyesno -> YES
Rule 12    optionsyesno -> NO
Rule 13    body -> declarationsOpt funcsOpt main funcsOpt
Rule 14    funcsOpt -> suprafunc funcsOpt
Rule 15    funcsOpt -> empty
Rule 16    declarationsOpt -> declaration declarationsOpt
Rule 17    declarationsOpt -> empty
Rule 18    declaration -> type push_type declarationB declarationC
Rule 19    declarationB -> ID push_operand dimensionsOpt
Rule 20    push_operand -> <empty>
Rule 21    push_type -> <empty>
Rule 22    push_operator -> <empty>
Rule 23    quadruple_assign -> <empty>
Rule 24    declarationC -> = push_operator hyperexpression quadruple_assign declarationD
Rule 25    declarationC -> , declarationB declarationC
Rule 26    declarationC -> ;
Rule 27    declarationD -> , declarationB declarationC
Rule 28    declarationD -> ;
Rule 29    main -> MAIN ( ) block
Rule 30    suprafunc -> func block
Rule 31    func -> DEF returntype ID ( paramsOpt )
Rule 32    paramsOpt -> params paramsB
Rule 33    paramsOpt -> empty
Rule 34    block -> { instructionsOpt }
Rule 35    instructionsOpt -> instruction instructionsOpt
Rule 36    instructionsOpt -> empty
Rule 37    assign -> ID dimensionsOpt = hyperexpression
Rule 38    assignB -> dimensionsOpt = hyperexpression
Rule 39    dimensionsOpt -> dimensions
Rule 40    dimensionsOpt -> empty
Rule 41    condition -> IF ( hyperexpression ) block else
Rule 42    else -> ELSE block
Rule 43    else -> empty
Rule 44    instruction -> assignfunccall ;
Rule 45    instruction -> output ;
Rule 46    instruction -> return ;
Rule 47    instruction -> input ;
Rule 48    instruction -> declaration
Rule 49    instruction -> condition
Rule 50    instruction -> whileloop
Rule 51    instruction -> forloop
Rule 52    instruction -> localdirective
Rule 53    assignfunccall -> ID assignfunccallB
Rule 54    assignfunccallB -> ( funccallB funccallC
Rule 55    assignfunccallB -> assignB
Rule 56    localdirective -> localvardirective
Rule 57    localdirective -> localdecisiondirective
Rule 58    localdirective -> localmsgdirective
Rule 59    hyperexpression -> superexpression hyperexpressionB
Rule 60    hyperexpressionB -> OR push_operator hyperexpression
Rule 61    hyperexpressionB -> empty
Rule 62    superexpression -> expression superexpressionB
Rule 63    superexpressionB -> AND push_operator superexpression
Rule 64    superexpressionB -> empty
Rule 65    expression -> exp expressionB
Rule 66    expressionB -> < push_operator exp
Rule 67    expressionB -> > push_operator exp
Rule 68    expressionB -> DIFF push_operator exp
Rule 69    expressionB -> EQ push_operator exp
Rule 70    expressionB -> LTEQ push_operator exp
Rule 71    expressionB -> GTEQ push_operator exp
Rule 72    expressionB -> empty
Rule 73    exp -> term seen_term expB
Rule 74    seen_term -> <empty>
Rule 75    expB -> - push_operator exp
Rule 76    expB -> + push_operator exp
Rule 77    expB -> empty
Rule 78    term -> factor seen_factor termB
Rule 79    seen_factor -> <empty>
Rule 80    termB -> / push_operator term
Rule 81    termB -> * push_operator term
Rule 82    termB -> empty
Rule 83    factor -> signB constant
Rule 84    factor -> ( seen_parentheses hyperexpression )
Rule 85    factor -> funccall
Rule 86    factor -> ID seen_ID dimensionsOpt
Rule 87    seen_parentheses -> <empty>
Rule 88    seen_ID -> <empty>
Rule 89    signB -> sign
Rule 90    signB -> empty
Rule 91    seen_fconst -> <empty>
Rule 92    seen_iconst -> <empty>
Rule 93    seen_sconst -> <empty>
Rule 94    seen_true -> <empty>
Rule 95    seen_false -> <empty>
Rule 96    constant -> FCONST seen_fconst
Rule 97    constant -> ICONST seen_iconst
Rule 98    constant -> SCONST seen_sconst
Rule 99    constant -> TRUE seen_true
Rule 100   constant -> FALSE seen_false
Rule 101   sign -> +
Rule 102   sign -> -
Rule 103   whileloop -> WHILE ( hyperexpression ) block
Rule 104   type -> INT
Rule 105   type -> FLOAT
Rule 106   type -> STRING
Rule 107   type -> BOOL
Rule 108   returntype -> VOID
Rule 109   returntype -> type
Rule 110   forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block
Rule 111   input -> INPUT ( ID inputB )
Rule 112   inputB -> , ID inputB
Rule 113   inputB -> empty
Rule 114   output -> PRINT ( outputB
Rule 115   outputB -> SCONST outputC
Rule 116   outputB -> hyperexpression outputC
Rule 117   outputC -> )
Rule 118   outputC -> , outputB
Rule 119   localvardirective -> # localvardirectiveB ID
Rule 120   localvardirectiveB -> TRACK
Rule 121   localvardirectiveB -> FORGET
Rule 122   localmsgdirective -> # SHOW SCONST
Rule 123   localdecisiondirective -> TRACKDECISION
Rule 124   localdecisiondirective -> FORGETDECISION
Rule 125   localdecisiondirective -> empty
Rule 126   funccall -> ID ( funccallB funccallC
Rule 127   funccallB -> hyperexpression
Rule 128   funccallB -> empty
Rule 129   funccallC -> , funccallB funccallC
Rule 130   funccallC -> )
Rule 131   dimensions -> [ hyperexpression ] dimensionsB
Rule 132   dimensionsB -> [ hyperexpression ]
Rule 133   dimensionsB -> empty
Rule 134   return -> RETURN hyperexpression
Rule 135   params -> type ID
Rule 136   paramsB -> , params paramsB
Rule 137   paramsB -> empty
Rule 138   empty -> <empty>

Terminals, with rules where they appear

#                    : 119 122
(                    : 29 31 41 54 84 103 110 111 114 126
)                    : 29 31 41 84 103 110 111 117 130
*                    : 81
+                    : 76 101
,                    : 25 27 112 118 129 136
-                    : 75 102
/                    : 80
;                    : 26 28 44 45 46 47 110 110
<                    : 66
=                    : 4 5 6 24 37 38
>                    : 67
ALL                  : 8
AND                  : 63
BOOL                 : 107
COMPLEXITYCONFIG     : 6
DECISIONSCONFIG      : 5
DEF                  : 31
DIFF                 : 68
ELSE                 : 42
EQ                   : 69
FALSE                : 100
FCONST               : 96
FLOAT                : 105
FOR                  : 110
FORGET               : 121
FORGETDECISION       : 124
GTEQ                 : 71
ICONST               : 97
ID                   : 19 31 37 53 86 111 112 119 126 135
IF                   : 41
INPUT                : 111
INT                  : 104
LTEQ                 : 70
MAIN                 : 29
MOST                 : 9
NO                   : 12
NONE                 : 10
OR                   : 60
PRINT                : 114
RETURN               : 134
SCONST               : 98 115 122
SHOW                 : 122
SOME                 : 7
STRING               : 106
TRACK                : 120
TRACKDECISION        : 123
TRUE                 : 99
VARSCONFIG           : 4
VOID                 : 108
WHILE                : 103
YES                  : 11
[                    : 131 132
]                    : 131 132
error                : 
{                    : 34
}                    : 34

Nonterminals, with rules where they appear

assign               : 110
assignB              : 55
assignfunccall       : 44
assignfunccallB      : 53
block                : 29 30 41 42 103 110
body                 : 1
condition            : 49
config               : 1 2
configdirective      : 2
constant             : 83
declaration          : 16 48
declarationB         : 18 25 27
declarationC         : 18 25 27
declarationD         : 24
declarationsOpt      : 13 16
dimensions           : 39
dimensionsB          : 131
dimensionsOpt        : 19 37 38 86
else                 : 41
empty                : 3 15 17 33 36 40 43 61 64 72 77 82 90 113 125 128 133 137
exp                  : 65 66 67 68 69 70 71 75 76
expB                 : 73
expression           : 62
expressionB          : 65
factor               : 78
forloop              : 51
func                 : 30
funccall             : 85
funccallB            : 54 126 129
funccallC            : 54 126 129
funcsOpt             : 13 13 14
hyperexpression      : 24 37 38 41 60 84 103 110 110 116 127 131 132 134
hyperexpressionB     : 59
input                : 47
inputB               : 111 112
instruction          : 35
instructionsOpt      : 34 35
localdecisiondirective : 57
localdirective       : 52
localmsgdirective    : 58
localvardirective    : 56
localvardirectiveB   : 119
main                 : 13
options              : 4 5
optionsyesno         : 6
output               : 45
outputB              : 114 118
outputC              : 115 116
params               : 32 136
paramsB              : 32 136
paramsOpt            : 31
program              : 0
push_operand         : 19
push_operator        : 24 60 63 66 67 68 69 70 71 75 76 80 81
push_type            : 18
quadruple_assign     : 24
return               : 46
returntype           : 31
seen_ID              : 86
seen_factor          : 78
seen_false           : 100
seen_fconst          : 96
seen_iconst          : 97
seen_parentheses     : 84
seen_sconst          : 98
seen_term            : 73
seen_true            : 99
sign                 : 89
signB                : 83
superexpression      : 59 63
superexpressionB     : 62
suprafunc            : 14
term                 : 73 80 81
termB                : 78
type                 : 18 109 135
whileloop            : 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . config body
    (2) config -> . configdirective config
    (3) config -> . empty
    (4) configdirective -> . VARSCONFIG = options
    (5) configdirective -> . DECISIONSCONFIG = options
    (6) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (138) empty -> .

    VARSCONFIG      shift and go to state 2
    DECISIONSCONFIG shift and go to state 1
    COMPLEXITYCONFIG shift and go to state 4
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    STRING          reduce using rule 138 (empty -> .)
    BOOL            reduce using rule 138 (empty -> .)
    DEF             reduce using rule 138 (empty -> .)
    MAIN            reduce using rule 138 (empty -> .)

    configdirective                shift and go to state 3
    program                        shift and go to state 5
    config                         shift and go to state 6
    empty                          shift and go to state 7

state 1

    (5) configdirective -> DECISIONSCONFIG . = options

    =               shift and go to state 8


state 2

    (4) configdirective -> VARSCONFIG . = options

    =               shift and go to state 9


state 3

    (2) config -> configdirective . config
    (2) config -> . configdirective config
    (3) config -> . empty
    (4) configdirective -> . VARSCONFIG = options
    (5) configdirective -> . DECISIONSCONFIG = options
    (6) configdirective -> . COMPLEXITYCONFIG = optionsyesno
    (138) empty -> .

    VARSCONFIG      shift and go to state 2
    DECISIONSCONFIG shift and go to state 1
    COMPLEXITYCONFIG shift and go to state 4
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    STRING          reduce using rule 138 (empty -> .)
    BOOL            reduce using rule 138 (empty -> .)
    DEF             reduce using rule 138 (empty -> .)
    MAIN            reduce using rule 138 (empty -> .)

    config                         shift and go to state 10
    empty                          shift and go to state 7
    configdirective                shift and go to state 3

state 4

    (6) configdirective -> COMPLEXITYCONFIG . = optionsyesno

    =               shift and go to state 11


state 5

    (0) S' -> program .



state 6

    (1) program -> config . body
    (13) body -> . declarationsOpt funcsOpt main funcsOpt
    (16) declarationsOpt -> . declaration declarationsOpt
    (17) declarationsOpt -> . empty
    (18) declaration -> . type push_type declarationB declarationC
    (138) empty -> .
    (104) type -> . INT
    (105) type -> . FLOAT
    (106) type -> . STRING
    (107) type -> . BOOL

    DEF             reduce using rule 138 (empty -> .)
    MAIN            reduce using rule 138 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    body                           shift and go to state 12
    declarationsOpt                shift and go to state 13
    type                           shift and go to state 16
    declaration                    shift and go to state 19
    empty                          shift and go to state 20

state 7

    (3) config -> empty .

    INT             reduce using rule 3 (config -> empty .)
    FLOAT           reduce using rule 3 (config -> empty .)
    STRING          reduce using rule 3 (config -> empty .)
    BOOL            reduce using rule 3 (config -> empty .)
    DEF             reduce using rule 3 (config -> empty .)
    MAIN            reduce using rule 3 (config -> empty .)


state 8

    (5) configdirective -> DECISIONSCONFIG = . options
    (7) options -> . SOME
    (8) options -> . ALL
    (9) options -> . MOST
    (10) options -> . NONE

    SOME            shift and go to state 22
    ALL             shift and go to state 21
    MOST            shift and go to state 24
    NONE            shift and go to state 23

    options                        shift and go to state 25

state 9

    (4) configdirective -> VARSCONFIG = . options
    (7) options -> . SOME
    (8) options -> . ALL
    (9) options -> . MOST
    (10) options -> . NONE

    SOME            shift and go to state 22
    ALL             shift and go to state 21
    MOST            shift and go to state 24
    NONE            shift and go to state 23

    options                        shift and go to state 26

state 10

    (2) config -> configdirective config .

    INT             reduce using rule 2 (config -> configdirective config .)
    FLOAT           reduce using rule 2 (config -> configdirective config .)
    STRING          reduce using rule 2 (config -> configdirective config .)
    BOOL            reduce using rule 2 (config -> configdirective config .)
    DEF             reduce using rule 2 (config -> configdirective config .)
    MAIN            reduce using rule 2 (config -> configdirective config .)


state 11

    (6) configdirective -> COMPLEXITYCONFIG = . optionsyesno
    (11) optionsyesno -> . YES
    (12) optionsyesno -> . NO

    YES             shift and go to state 27
    NO              shift and go to state 29

    optionsyesno                   shift and go to state 28

state 12

    (1) program -> config body .

    $end            reduce using rule 1 (program -> config body .)


state 13

    (13) body -> declarationsOpt . funcsOpt main funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (30) suprafunc -> . func block
    (138) empty -> .
    (31) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 138 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 31
    func                           shift and go to state 32
    empty                          shift and go to state 34

state 14

    (106) type -> STRING .

    ID              reduce using rule 106 (type -> STRING .)


state 15

    (104) type -> INT .

    ID              reduce using rule 104 (type -> INT .)


state 16

    (18) declaration -> type . push_type declarationB declarationC
    (21) push_type -> .

    ID              reduce using rule 21 (push_type -> .)

    push_type                      shift and go to state 35

state 17

    (105) type -> FLOAT .

    ID              reduce using rule 105 (type -> FLOAT .)


state 18

    (107) type -> BOOL .

    ID              reduce using rule 107 (type -> BOOL .)


state 19

    (16) declarationsOpt -> declaration . declarationsOpt
    (16) declarationsOpt -> . declaration declarationsOpt
    (17) declarationsOpt -> . empty
    (18) declaration -> . type push_type declarationB declarationC
    (138) empty -> .
    (104) type -> . INT
    (105) type -> . FLOAT
    (106) type -> . STRING
    (107) type -> . BOOL

    DEF             reduce using rule 138 (empty -> .)
    MAIN            reduce using rule 138 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    declarationsOpt                shift and go to state 36
    declaration                    shift and go to state 19
    type                           shift and go to state 16
    empty                          shift and go to state 20

state 20

    (17) declarationsOpt -> empty .

    DEF             reduce using rule 17 (declarationsOpt -> empty .)
    MAIN            reduce using rule 17 (declarationsOpt -> empty .)


state 21

    (8) options -> ALL .

    VARSCONFIG      reduce using rule 8 (options -> ALL .)
    DECISIONSCONFIG reduce using rule 8 (options -> ALL .)
    COMPLEXITYCONFIG reduce using rule 8 (options -> ALL .)
    INT             reduce using rule 8 (options -> ALL .)
    FLOAT           reduce using rule 8 (options -> ALL .)
    STRING          reduce using rule 8 (options -> ALL .)
    BOOL            reduce using rule 8 (options -> ALL .)
    DEF             reduce using rule 8 (options -> ALL .)
    MAIN            reduce using rule 8 (options -> ALL .)


state 22

    (7) options -> SOME .

    VARSCONFIG      reduce using rule 7 (options -> SOME .)
    DECISIONSCONFIG reduce using rule 7 (options -> SOME .)
    COMPLEXITYCONFIG reduce using rule 7 (options -> SOME .)
    INT             reduce using rule 7 (options -> SOME .)
    FLOAT           reduce using rule 7 (options -> SOME .)
    STRING          reduce using rule 7 (options -> SOME .)
    BOOL            reduce using rule 7 (options -> SOME .)
    DEF             reduce using rule 7 (options -> SOME .)
    MAIN            reduce using rule 7 (options -> SOME .)


state 23

    (10) options -> NONE .

    VARSCONFIG      reduce using rule 10 (options -> NONE .)
    DECISIONSCONFIG reduce using rule 10 (options -> NONE .)
    COMPLEXITYCONFIG reduce using rule 10 (options -> NONE .)
    INT             reduce using rule 10 (options -> NONE .)
    FLOAT           reduce using rule 10 (options -> NONE .)
    STRING          reduce using rule 10 (options -> NONE .)
    BOOL            reduce using rule 10 (options -> NONE .)
    DEF             reduce using rule 10 (options -> NONE .)
    MAIN            reduce using rule 10 (options -> NONE .)


state 24

    (9) options -> MOST .

    VARSCONFIG      reduce using rule 9 (options -> MOST .)
    DECISIONSCONFIG reduce using rule 9 (options -> MOST .)
    COMPLEXITYCONFIG reduce using rule 9 (options -> MOST .)
    INT             reduce using rule 9 (options -> MOST .)
    FLOAT           reduce using rule 9 (options -> MOST .)
    STRING          reduce using rule 9 (options -> MOST .)
    BOOL            reduce using rule 9 (options -> MOST .)
    DEF             reduce using rule 9 (options -> MOST .)
    MAIN            reduce using rule 9 (options -> MOST .)


state 25

    (5) configdirective -> DECISIONSCONFIG = options .

    VARSCONFIG      reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    INT             reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    FLOAT           reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    STRING          reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    BOOL            reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    DEF             reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)
    MAIN            reduce using rule 5 (configdirective -> DECISIONSCONFIG = options .)


state 26

    (4) configdirective -> VARSCONFIG = options .

    VARSCONFIG      reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    DECISIONSCONFIG reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    COMPLEXITYCONFIG reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    INT             reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    FLOAT           reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    STRING          reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    BOOL            reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    DEF             reduce using rule 4 (configdirective -> VARSCONFIG = options .)
    MAIN            reduce using rule 4 (configdirective -> VARSCONFIG = options .)


state 27

    (11) optionsyesno -> YES .

    VARSCONFIG      reduce using rule 11 (optionsyesno -> YES .)
    DECISIONSCONFIG reduce using rule 11 (optionsyesno -> YES .)
    COMPLEXITYCONFIG reduce using rule 11 (optionsyesno -> YES .)
    INT             reduce using rule 11 (optionsyesno -> YES .)
    FLOAT           reduce using rule 11 (optionsyesno -> YES .)
    STRING          reduce using rule 11 (optionsyesno -> YES .)
    BOOL            reduce using rule 11 (optionsyesno -> YES .)
    DEF             reduce using rule 11 (optionsyesno -> YES .)
    MAIN            reduce using rule 11 (optionsyesno -> YES .)


state 28

    (6) configdirective -> COMPLEXITYCONFIG = optionsyesno .

    VARSCONFIG      reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DECISIONSCONFIG reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    COMPLEXITYCONFIG reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    INT             reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    FLOAT           reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    STRING          reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    BOOL            reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    DEF             reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)
    MAIN            reduce using rule 6 (configdirective -> COMPLEXITYCONFIG = optionsyesno .)


state 29

    (12) optionsyesno -> NO .

    VARSCONFIG      reduce using rule 12 (optionsyesno -> NO .)
    DECISIONSCONFIG reduce using rule 12 (optionsyesno -> NO .)
    COMPLEXITYCONFIG reduce using rule 12 (optionsyesno -> NO .)
    INT             reduce using rule 12 (optionsyesno -> NO .)
    FLOAT           reduce using rule 12 (optionsyesno -> NO .)
    STRING          reduce using rule 12 (optionsyesno -> NO .)
    BOOL            reduce using rule 12 (optionsyesno -> NO .)
    DEF             reduce using rule 12 (optionsyesno -> NO .)
    MAIN            reduce using rule 12 (optionsyesno -> NO .)


state 30

    (14) funcsOpt -> suprafunc . funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (30) suprafunc -> . func block
    (138) empty -> .
    (31) func -> . DEF returntype ID ( paramsOpt )

    MAIN            reduce using rule 138 (empty -> .)
    $end            reduce using rule 138 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 37
    empty                          shift and go to state 34
    func                           shift and go to state 32

state 31

    (13) body -> declarationsOpt funcsOpt . main funcsOpt
    (29) main -> . MAIN ( ) block

    MAIN            shift and go to state 38

    main                           shift and go to state 39

state 32

    (30) suprafunc -> func . block
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 41

state 33

    (31) func -> DEF . returntype ID ( paramsOpt )
    (108) returntype -> . VOID
    (109) returntype -> . type
    (104) type -> . INT
    (105) type -> . FLOAT
    (106) type -> . STRING
    (107) type -> . BOOL

    VOID            shift and go to state 42
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    returntype                     shift and go to state 43
    type                           shift and go to state 44

state 34

    (15) funcsOpt -> empty .

    MAIN            reduce using rule 15 (funcsOpt -> empty .)
    $end            reduce using rule 15 (funcsOpt -> empty .)


state 35

    (18) declaration -> type push_type . declarationB declarationC
    (19) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 45

    declarationB                   shift and go to state 46

state 36

    (16) declarationsOpt -> declaration declarationsOpt .

    DEF             reduce using rule 16 (declarationsOpt -> declaration declarationsOpt .)
    MAIN            reduce using rule 16 (declarationsOpt -> declaration declarationsOpt .)


state 37

    (14) funcsOpt -> suprafunc funcsOpt .

    MAIN            reduce using rule 14 (funcsOpt -> suprafunc funcsOpt .)
    $end            reduce using rule 14 (funcsOpt -> suprafunc funcsOpt .)


state 38

    (29) main -> MAIN . ( ) block

    (               shift and go to state 47


state 39

    (13) body -> declarationsOpt funcsOpt main . funcsOpt
    (14) funcsOpt -> . suprafunc funcsOpt
    (15) funcsOpt -> . empty
    (30) suprafunc -> . func block
    (138) empty -> .
    (31) func -> . DEF returntype ID ( paramsOpt )

    $end            reduce using rule 138 (empty -> .)
    DEF             shift and go to state 33

    suprafunc                      shift and go to state 30
    funcsOpt                       shift and go to state 48
    func                           shift and go to state 32
    empty                          shift and go to state 34

state 40

    (34) block -> { . instructionsOpt }
    (35) instructionsOpt -> . instruction instructionsOpt
    (36) instructionsOpt -> . empty
    (44) instruction -> . assignfunccall ;
    (45) instruction -> . output ;
    (46) instruction -> . return ;
    (47) instruction -> . input ;
    (48) instruction -> . declaration
    (49) instruction -> . condition
    (50) instruction -> . whileloop
    (51) instruction -> . forloop
    (52) instruction -> . localdirective
    (138) empty -> .
    (53) assignfunccall -> . ID assignfunccallB
    (114) output -> . PRINT ( outputB
    (134) return -> . RETURN hyperexpression
    (111) input -> . INPUT ( ID inputB )
    (18) declaration -> . type push_type declarationB declarationC
    (41) condition -> . IF ( hyperexpression ) block else
    (103) whileloop -> . WHILE ( hyperexpression ) block
    (110) forloop -> . FOR ( assign ; hyperexpression ; hyperexpression ) block
    (56) localdirective -> . localvardirective
    (57) localdirective -> . localdecisiondirective
    (58) localdirective -> . localmsgdirective
    (104) type -> . INT
    (105) type -> . FLOAT
    (106) type -> . STRING
    (107) type -> . BOOL
    (119) localvardirective -> . # localvardirectiveB ID
    (123) localdecisiondirective -> . TRACKDECISION
    (124) localdecisiondirective -> . FORGETDECISION
    (125) localdecisiondirective -> . empty
    (122) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 138 (empty -> .)
    ID              shift and go to state 67
    PRINT           shift and go to state 52
    RETURN          shift and go to state 49
    INPUT           shift and go to state 66
    IF              shift and go to state 69
    WHILE           shift and go to state 51
    FOR             shift and go to state 61
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    #               shift and go to state 54
    TRACKDECISION   shift and go to state 56
    FORGETDECISION  shift and go to state 63

  ! ID              [ reduce using rule 138 (empty -> .) ]
  ! PRINT           [ reduce using rule 138 (empty -> .) ]
  ! RETURN          [ reduce using rule 138 (empty -> .) ]
  ! INPUT           [ reduce using rule 138 (empty -> .) ]
  ! IF              [ reduce using rule 138 (empty -> .) ]
  ! WHILE           [ reduce using rule 138 (empty -> .) ]
  ! FOR             [ reduce using rule 138 (empty -> .) ]
  ! INT             [ reduce using rule 138 (empty -> .) ]
  ! FLOAT           [ reduce using rule 138 (empty -> .) ]
  ! STRING          [ reduce using rule 138 (empty -> .) ]
  ! BOOL            [ reduce using rule 138 (empty -> .) ]
  ! #               [ reduce using rule 138 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 138 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 138 (empty -> .) ]

    assignfunccall                 shift and go to state 50
    whileloop                      shift and go to state 53
    localvardirective              shift and go to state 55
    input                          shift and go to state 57
    type                           shift and go to state 16
    empty                          shift and go to state 58
    forloop                        shift and go to state 59
    return                         shift and go to state 60
    instructionsOpt                shift and go to state 62
    localdirective                 shift and go to state 64
    declaration                    shift and go to state 65
    condition                      shift and go to state 68
    instruction                    shift and go to state 70
    localmsgdirective              shift and go to state 71
    localdecisiondirective         shift and go to state 72
    output                         shift and go to state 73

state 41

    (30) suprafunc -> func block .

    DEF             reduce using rule 30 (suprafunc -> func block .)
    MAIN            reduce using rule 30 (suprafunc -> func block .)
    $end            reduce using rule 30 (suprafunc -> func block .)


state 42

    (108) returntype -> VOID .

    ID              reduce using rule 108 (returntype -> VOID .)


state 43

    (31) func -> DEF returntype . ID ( paramsOpt )

    ID              shift and go to state 74


state 44

    (109) returntype -> type .

    ID              reduce using rule 109 (returntype -> type .)


state 45

    (19) declarationB -> ID . push_operand dimensionsOpt
    (20) push_operand -> .

    [               reduce using rule 20 (push_operand -> .)
    =               reduce using rule 20 (push_operand -> .)
    ,               reduce using rule 20 (push_operand -> .)
    ;               reduce using rule 20 (push_operand -> .)

    push_operand                   shift and go to state 75

state 46

    (18) declaration -> type push_type declarationB . declarationC
    (24) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (25) declarationC -> . , declarationB declarationC
    (26) declarationC -> . ;

    =               shift and go to state 79
    ,               shift and go to state 76
    ;               shift and go to state 77

    declarationC                   shift and go to state 78

state 47

    (29) main -> MAIN ( . ) block

    )               shift and go to state 80


state 48

    (13) body -> declarationsOpt funcsOpt main funcsOpt .

    $end            reduce using rule 13 (body -> declarationsOpt funcsOpt main funcsOpt .)


state 49

    (134) return -> RETURN . hyperexpression
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 85
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 50

    (44) instruction -> assignfunccall . ;

    ;               shift and go to state 95


state 51

    (103) whileloop -> WHILE . ( hyperexpression ) block

    (               shift and go to state 96


state 52

    (114) output -> PRINT . ( outputB

    (               shift and go to state 97


state 53

    (50) instruction -> whileloop .

    ID              reduce using rule 50 (instruction -> whileloop .)
    PRINT           reduce using rule 50 (instruction -> whileloop .)
    RETURN          reduce using rule 50 (instruction -> whileloop .)
    INPUT           reduce using rule 50 (instruction -> whileloop .)
    IF              reduce using rule 50 (instruction -> whileloop .)
    WHILE           reduce using rule 50 (instruction -> whileloop .)
    FOR             reduce using rule 50 (instruction -> whileloop .)
    INT             reduce using rule 50 (instruction -> whileloop .)
    FLOAT           reduce using rule 50 (instruction -> whileloop .)
    STRING          reduce using rule 50 (instruction -> whileloop .)
    BOOL            reduce using rule 50 (instruction -> whileloop .)
    #               reduce using rule 50 (instruction -> whileloop .)
    TRACKDECISION   reduce using rule 50 (instruction -> whileloop .)
    FORGETDECISION  reduce using rule 50 (instruction -> whileloop .)
    }               reduce using rule 50 (instruction -> whileloop .)


state 54

    (119) localvardirective -> # . localvardirectiveB ID
    (122) localmsgdirective -> # . SHOW SCONST
    (120) localvardirectiveB -> . TRACK
    (121) localvardirectiveB -> . FORGET

    SHOW            shift and go to state 99
    TRACK           shift and go to state 100
    FORGET          shift and go to state 98

    localvardirectiveB             shift and go to state 101

state 55

    (56) localdirective -> localvardirective .

    ID              reduce using rule 56 (localdirective -> localvardirective .)
    PRINT           reduce using rule 56 (localdirective -> localvardirective .)
    RETURN          reduce using rule 56 (localdirective -> localvardirective .)
    INPUT           reduce using rule 56 (localdirective -> localvardirective .)
    IF              reduce using rule 56 (localdirective -> localvardirective .)
    WHILE           reduce using rule 56 (localdirective -> localvardirective .)
    FOR             reduce using rule 56 (localdirective -> localvardirective .)
    INT             reduce using rule 56 (localdirective -> localvardirective .)
    FLOAT           reduce using rule 56 (localdirective -> localvardirective .)
    STRING          reduce using rule 56 (localdirective -> localvardirective .)
    BOOL            reduce using rule 56 (localdirective -> localvardirective .)
    #               reduce using rule 56 (localdirective -> localvardirective .)
    TRACKDECISION   reduce using rule 56 (localdirective -> localvardirective .)
    FORGETDECISION  reduce using rule 56 (localdirective -> localvardirective .)
    }               reduce using rule 56 (localdirective -> localvardirective .)


state 56

    (123) localdecisiondirective -> TRACKDECISION .

    ID              reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    PRINT           reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    RETURN          reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    INPUT           reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    IF              reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    WHILE           reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    FOR             reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    INT             reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    FLOAT           reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    STRING          reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    BOOL            reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    #               reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    TRACKDECISION   reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    FORGETDECISION  reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)
    }               reduce using rule 123 (localdecisiondirective -> TRACKDECISION .)


state 57

    (47) instruction -> input . ;

    ;               shift and go to state 102


state 58

    (36) instructionsOpt -> empty .
    (125) localdecisiondirective -> empty .

  ! reduce/reduce conflict for } resolved using rule 36 (instructionsOpt -> empty .)
    }               reduce using rule 36 (instructionsOpt -> empty .)
    ID              reduce using rule 125 (localdecisiondirective -> empty .)
    PRINT           reduce using rule 125 (localdecisiondirective -> empty .)
    RETURN          reduce using rule 125 (localdecisiondirective -> empty .)
    INPUT           reduce using rule 125 (localdecisiondirective -> empty .)
    IF              reduce using rule 125 (localdecisiondirective -> empty .)
    WHILE           reduce using rule 125 (localdecisiondirective -> empty .)
    FOR             reduce using rule 125 (localdecisiondirective -> empty .)
    INT             reduce using rule 125 (localdecisiondirective -> empty .)
    FLOAT           reduce using rule 125 (localdecisiondirective -> empty .)
    STRING          reduce using rule 125 (localdecisiondirective -> empty .)
    BOOL            reduce using rule 125 (localdecisiondirective -> empty .)
    #               reduce using rule 125 (localdecisiondirective -> empty .)
    TRACKDECISION   reduce using rule 125 (localdecisiondirective -> empty .)
    FORGETDECISION  reduce using rule 125 (localdecisiondirective -> empty .)

  ! }               [ reduce using rule 125 (localdecisiondirective -> empty .) ]


state 59

    (51) instruction -> forloop .

    ID              reduce using rule 51 (instruction -> forloop .)
    PRINT           reduce using rule 51 (instruction -> forloop .)
    RETURN          reduce using rule 51 (instruction -> forloop .)
    INPUT           reduce using rule 51 (instruction -> forloop .)
    IF              reduce using rule 51 (instruction -> forloop .)
    WHILE           reduce using rule 51 (instruction -> forloop .)
    FOR             reduce using rule 51 (instruction -> forloop .)
    INT             reduce using rule 51 (instruction -> forloop .)
    FLOAT           reduce using rule 51 (instruction -> forloop .)
    STRING          reduce using rule 51 (instruction -> forloop .)
    BOOL            reduce using rule 51 (instruction -> forloop .)
    #               reduce using rule 51 (instruction -> forloop .)
    TRACKDECISION   reduce using rule 51 (instruction -> forloop .)
    FORGETDECISION  reduce using rule 51 (instruction -> forloop .)
    }               reduce using rule 51 (instruction -> forloop .)


state 60

    (46) instruction -> return . ;

    ;               shift and go to state 103


state 61

    (110) forloop -> FOR . ( assign ; hyperexpression ; hyperexpression ) block

    (               shift and go to state 104


state 62

    (34) block -> { instructionsOpt . }

    }               shift and go to state 105


state 63

    (124) localdecisiondirective -> FORGETDECISION .

    ID              reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    PRINT           reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    RETURN          reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    INPUT           reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    IF              reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    WHILE           reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    FOR             reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    INT             reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    FLOAT           reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    STRING          reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    BOOL            reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    #               reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    TRACKDECISION   reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    FORGETDECISION  reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)
    }               reduce using rule 124 (localdecisiondirective -> FORGETDECISION .)


state 64

    (52) instruction -> localdirective .

    ID              reduce using rule 52 (instruction -> localdirective .)
    PRINT           reduce using rule 52 (instruction -> localdirective .)
    RETURN          reduce using rule 52 (instruction -> localdirective .)
    INPUT           reduce using rule 52 (instruction -> localdirective .)
    IF              reduce using rule 52 (instruction -> localdirective .)
    WHILE           reduce using rule 52 (instruction -> localdirective .)
    FOR             reduce using rule 52 (instruction -> localdirective .)
    INT             reduce using rule 52 (instruction -> localdirective .)
    FLOAT           reduce using rule 52 (instruction -> localdirective .)
    STRING          reduce using rule 52 (instruction -> localdirective .)
    BOOL            reduce using rule 52 (instruction -> localdirective .)
    #               reduce using rule 52 (instruction -> localdirective .)
    TRACKDECISION   reduce using rule 52 (instruction -> localdirective .)
    FORGETDECISION  reduce using rule 52 (instruction -> localdirective .)
    }               reduce using rule 52 (instruction -> localdirective .)


state 65

    (48) instruction -> declaration .

    ID              reduce using rule 48 (instruction -> declaration .)
    PRINT           reduce using rule 48 (instruction -> declaration .)
    RETURN          reduce using rule 48 (instruction -> declaration .)
    INPUT           reduce using rule 48 (instruction -> declaration .)
    IF              reduce using rule 48 (instruction -> declaration .)
    WHILE           reduce using rule 48 (instruction -> declaration .)
    FOR             reduce using rule 48 (instruction -> declaration .)
    INT             reduce using rule 48 (instruction -> declaration .)
    FLOAT           reduce using rule 48 (instruction -> declaration .)
    STRING          reduce using rule 48 (instruction -> declaration .)
    BOOL            reduce using rule 48 (instruction -> declaration .)
    #               reduce using rule 48 (instruction -> declaration .)
    TRACKDECISION   reduce using rule 48 (instruction -> declaration .)
    FORGETDECISION  reduce using rule 48 (instruction -> declaration .)
    }               reduce using rule 48 (instruction -> declaration .)


state 66

    (111) input -> INPUT . ( ID inputB )

    (               shift and go to state 106


state 67

    (53) assignfunccall -> ID . assignfunccallB
    (54) assignfunccallB -> . ( funccallB funccallC
    (55) assignfunccallB -> . assignB
    (38) assignB -> . dimensionsOpt = hyperexpression
    (39) dimensionsOpt -> . dimensions
    (40) dimensionsOpt -> . empty
    (131) dimensions -> . [ hyperexpression ] dimensionsB
    (138) empty -> .

    (               shift and go to state 109
    [               shift and go to state 111
    =               reduce using rule 138 (empty -> .)

    dimensions                     shift and go to state 107
    assignfunccallB                shift and go to state 108
    assignB                        shift and go to state 110
    dimensionsOpt                  shift and go to state 112
    empty                          shift and go to state 113

state 68

    (49) instruction -> condition .

    ID              reduce using rule 49 (instruction -> condition .)
    PRINT           reduce using rule 49 (instruction -> condition .)
    RETURN          reduce using rule 49 (instruction -> condition .)
    INPUT           reduce using rule 49 (instruction -> condition .)
    IF              reduce using rule 49 (instruction -> condition .)
    WHILE           reduce using rule 49 (instruction -> condition .)
    FOR             reduce using rule 49 (instruction -> condition .)
    INT             reduce using rule 49 (instruction -> condition .)
    FLOAT           reduce using rule 49 (instruction -> condition .)
    STRING          reduce using rule 49 (instruction -> condition .)
    BOOL            reduce using rule 49 (instruction -> condition .)
    #               reduce using rule 49 (instruction -> condition .)
    TRACKDECISION   reduce using rule 49 (instruction -> condition .)
    FORGETDECISION  reduce using rule 49 (instruction -> condition .)
    }               reduce using rule 49 (instruction -> condition .)


state 69

    (41) condition -> IF . ( hyperexpression ) block else

    (               shift and go to state 114


state 70

    (35) instructionsOpt -> instruction . instructionsOpt
    (35) instructionsOpt -> . instruction instructionsOpt
    (36) instructionsOpt -> . empty
    (44) instruction -> . assignfunccall ;
    (45) instruction -> . output ;
    (46) instruction -> . return ;
    (47) instruction -> . input ;
    (48) instruction -> . declaration
    (49) instruction -> . condition
    (50) instruction -> . whileloop
    (51) instruction -> . forloop
    (52) instruction -> . localdirective
    (138) empty -> .
    (53) assignfunccall -> . ID assignfunccallB
    (114) output -> . PRINT ( outputB
    (134) return -> . RETURN hyperexpression
    (111) input -> . INPUT ( ID inputB )
    (18) declaration -> . type push_type declarationB declarationC
    (41) condition -> . IF ( hyperexpression ) block else
    (103) whileloop -> . WHILE ( hyperexpression ) block
    (110) forloop -> . FOR ( assign ; hyperexpression ; hyperexpression ) block
    (56) localdirective -> . localvardirective
    (57) localdirective -> . localdecisiondirective
    (58) localdirective -> . localmsgdirective
    (104) type -> . INT
    (105) type -> . FLOAT
    (106) type -> . STRING
    (107) type -> . BOOL
    (119) localvardirective -> . # localvardirectiveB ID
    (123) localdecisiondirective -> . TRACKDECISION
    (124) localdecisiondirective -> . FORGETDECISION
    (125) localdecisiondirective -> . empty
    (122) localmsgdirective -> . # SHOW SCONST

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for TRACKDECISION resolved as shift
  ! shift/reduce conflict for FORGETDECISION resolved as shift
    }               reduce using rule 138 (empty -> .)
    ID              shift and go to state 67
    PRINT           shift and go to state 52
    RETURN          shift and go to state 49
    INPUT           shift and go to state 66
    IF              shift and go to state 69
    WHILE           shift and go to state 51
    FOR             shift and go to state 61
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18
    #               shift and go to state 54
    TRACKDECISION   shift and go to state 56
    FORGETDECISION  shift and go to state 63

  ! ID              [ reduce using rule 138 (empty -> .) ]
  ! PRINT           [ reduce using rule 138 (empty -> .) ]
  ! RETURN          [ reduce using rule 138 (empty -> .) ]
  ! INPUT           [ reduce using rule 138 (empty -> .) ]
  ! IF              [ reduce using rule 138 (empty -> .) ]
  ! WHILE           [ reduce using rule 138 (empty -> .) ]
  ! FOR             [ reduce using rule 138 (empty -> .) ]
  ! INT             [ reduce using rule 138 (empty -> .) ]
  ! FLOAT           [ reduce using rule 138 (empty -> .) ]
  ! STRING          [ reduce using rule 138 (empty -> .) ]
  ! BOOL            [ reduce using rule 138 (empty -> .) ]
  ! #               [ reduce using rule 138 (empty -> .) ]
  ! TRACKDECISION   [ reduce using rule 138 (empty -> .) ]
  ! FORGETDECISION  [ reduce using rule 138 (empty -> .) ]

    assignfunccall                 shift and go to state 50
    whileloop                      shift and go to state 53
    localvardirective              shift and go to state 55
    input                          shift and go to state 57
    type                           shift and go to state 16
    empty                          shift and go to state 58
    forloop                        shift and go to state 59
    return                         shift and go to state 60
    instructionsOpt                shift and go to state 115
    localdirective                 shift and go to state 64
    declaration                    shift and go to state 65
    condition                      shift and go to state 68
    instruction                    shift and go to state 70
    localmsgdirective              shift and go to state 71
    localdecisiondirective         shift and go to state 72
    output                         shift and go to state 73

state 71

    (58) localdirective -> localmsgdirective .

    ID              reduce using rule 58 (localdirective -> localmsgdirective .)
    PRINT           reduce using rule 58 (localdirective -> localmsgdirective .)
    RETURN          reduce using rule 58 (localdirective -> localmsgdirective .)
    INPUT           reduce using rule 58 (localdirective -> localmsgdirective .)
    IF              reduce using rule 58 (localdirective -> localmsgdirective .)
    WHILE           reduce using rule 58 (localdirective -> localmsgdirective .)
    FOR             reduce using rule 58 (localdirective -> localmsgdirective .)
    INT             reduce using rule 58 (localdirective -> localmsgdirective .)
    FLOAT           reduce using rule 58 (localdirective -> localmsgdirective .)
    STRING          reduce using rule 58 (localdirective -> localmsgdirective .)
    BOOL            reduce using rule 58 (localdirective -> localmsgdirective .)
    #               reduce using rule 58 (localdirective -> localmsgdirective .)
    TRACKDECISION   reduce using rule 58 (localdirective -> localmsgdirective .)
    FORGETDECISION  reduce using rule 58 (localdirective -> localmsgdirective .)
    }               reduce using rule 58 (localdirective -> localmsgdirective .)


state 72

    (57) localdirective -> localdecisiondirective .

    ID              reduce using rule 57 (localdirective -> localdecisiondirective .)
    PRINT           reduce using rule 57 (localdirective -> localdecisiondirective .)
    RETURN          reduce using rule 57 (localdirective -> localdecisiondirective .)
    INPUT           reduce using rule 57 (localdirective -> localdecisiondirective .)
    IF              reduce using rule 57 (localdirective -> localdecisiondirective .)
    WHILE           reduce using rule 57 (localdirective -> localdecisiondirective .)
    FOR             reduce using rule 57 (localdirective -> localdecisiondirective .)
    INT             reduce using rule 57 (localdirective -> localdecisiondirective .)
    FLOAT           reduce using rule 57 (localdirective -> localdecisiondirective .)
    STRING          reduce using rule 57 (localdirective -> localdecisiondirective .)
    BOOL            reduce using rule 57 (localdirective -> localdecisiondirective .)
    #               reduce using rule 57 (localdirective -> localdecisiondirective .)
    TRACKDECISION   reduce using rule 57 (localdirective -> localdecisiondirective .)
    FORGETDECISION  reduce using rule 57 (localdirective -> localdecisiondirective .)
    }               reduce using rule 57 (localdirective -> localdecisiondirective .)


state 73

    (45) instruction -> output . ;

    ;               shift and go to state 116


state 74

    (31) func -> DEF returntype ID . ( paramsOpt )

    (               shift and go to state 117


state 75

    (19) declarationB -> ID push_operand . dimensionsOpt
    (39) dimensionsOpt -> . dimensions
    (40) dimensionsOpt -> . empty
    (131) dimensions -> . [ hyperexpression ] dimensionsB
    (138) empty -> .

    [               shift and go to state 111
    =               reduce using rule 138 (empty -> .)
    ,               reduce using rule 138 (empty -> .)
    ;               reduce using rule 138 (empty -> .)

    dimensions                     shift and go to state 107
    dimensionsOpt                  shift and go to state 118
    empty                          shift and go to state 113

state 76

    (25) declarationC -> , . declarationB declarationC
    (19) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 45

    declarationB                   shift and go to state 119

state 77

    (26) declarationC -> ; .

    INT             reduce using rule 26 (declarationC -> ; .)
    FLOAT           reduce using rule 26 (declarationC -> ; .)
    STRING          reduce using rule 26 (declarationC -> ; .)
    BOOL            reduce using rule 26 (declarationC -> ; .)
    DEF             reduce using rule 26 (declarationC -> ; .)
    MAIN            reduce using rule 26 (declarationC -> ; .)
    ID              reduce using rule 26 (declarationC -> ; .)
    PRINT           reduce using rule 26 (declarationC -> ; .)
    RETURN          reduce using rule 26 (declarationC -> ; .)
    INPUT           reduce using rule 26 (declarationC -> ; .)
    IF              reduce using rule 26 (declarationC -> ; .)
    WHILE           reduce using rule 26 (declarationC -> ; .)
    FOR             reduce using rule 26 (declarationC -> ; .)
    #               reduce using rule 26 (declarationC -> ; .)
    TRACKDECISION   reduce using rule 26 (declarationC -> ; .)
    FORGETDECISION  reduce using rule 26 (declarationC -> ; .)
    }               reduce using rule 26 (declarationC -> ; .)


state 78

    (18) declaration -> type push_type declarationB declarationC .

    INT             reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    FLOAT           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    STRING          reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    BOOL            reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    DEF             reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    MAIN            reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    ID              reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    PRINT           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    RETURN          reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    INPUT           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    IF              reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    WHILE           reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    FOR             reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    #               reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    TRACKDECISION   reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    FORGETDECISION  reduce using rule 18 (declaration -> type push_type declarationB declarationC .)
    }               reduce using rule 18 (declaration -> type push_type declarationB declarationC .)


state 79

    (24) declarationC -> = . push_operator hyperexpression quadruple_assign declarationD
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 120

state 80

    (29) main -> MAIN ( ) . block
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 121

state 81

    (83) factor -> signB . constant
    (96) constant -> . FCONST seen_fconst
    (97) constant -> . ICONST seen_iconst
    (98) constant -> . SCONST seen_sconst
    (99) constant -> . TRUE seen_true
    (100) constant -> . FALSE seen_false

    FCONST          shift and go to state 123
    ICONST          shift and go to state 125
    SCONST          shift and go to state 124
    TRUE            shift and go to state 127
    FALSE           shift and go to state 126

    constant                       shift and go to state 122

state 82

    (84) factor -> ( . seen_parentheses hyperexpression )
    (87) seen_parentheses -> .

    (               reduce using rule 87 (seen_parentheses -> .)
    ID              reduce using rule 87 (seen_parentheses -> .)
    +               reduce using rule 87 (seen_parentheses -> .)
    -               reduce using rule 87 (seen_parentheses -> .)
    FCONST          reduce using rule 87 (seen_parentheses -> .)
    ICONST          reduce using rule 87 (seen_parentheses -> .)
    SCONST          reduce using rule 87 (seen_parentheses -> .)
    TRUE            reduce using rule 87 (seen_parentheses -> .)
    FALSE           reduce using rule 87 (seen_parentheses -> .)

    seen_parentheses               shift and go to state 128

state 83

    (101) sign -> + .

    FCONST          reduce using rule 101 (sign -> + .)
    ICONST          reduce using rule 101 (sign -> + .)
    SCONST          reduce using rule 101 (sign -> + .)
    TRUE            reduce using rule 101 (sign -> + .)
    FALSE           reduce using rule 101 (sign -> + .)


state 84

    (102) sign -> - .

    FCONST          reduce using rule 102 (sign -> - .)
    ICONST          reduce using rule 102 (sign -> - .)
    SCONST          reduce using rule 102 (sign -> - .)
    TRUE            reduce using rule 102 (sign -> - .)
    FALSE           reduce using rule 102 (sign -> - .)


state 85

    (134) return -> RETURN hyperexpression .

    ;               reduce using rule 134 (return -> RETURN hyperexpression .)


state 86

    (78) term -> factor . seen_factor termB
    (79) seen_factor -> .

    /               reduce using rule 79 (seen_factor -> .)
    *               reduce using rule 79 (seen_factor -> .)
    -               reduce using rule 79 (seen_factor -> .)
    +               reduce using rule 79 (seen_factor -> .)
    <               reduce using rule 79 (seen_factor -> .)
    >               reduce using rule 79 (seen_factor -> .)
    DIFF            reduce using rule 79 (seen_factor -> .)
    EQ              reduce using rule 79 (seen_factor -> .)
    LTEQ            reduce using rule 79 (seen_factor -> .)
    GTEQ            reduce using rule 79 (seen_factor -> .)
    AND             reduce using rule 79 (seen_factor -> .)
    OR              reduce using rule 79 (seen_factor -> .)
    ;               reduce using rule 79 (seen_factor -> .)
    )               reduce using rule 79 (seen_factor -> .)
    ,               reduce using rule 79 (seen_factor -> .)
    ]               reduce using rule 79 (seen_factor -> .)

    seen_factor                    shift and go to state 129

state 87

    (90) signB -> empty .

    FCONST          reduce using rule 90 (signB -> empty .)
    ICONST          reduce using rule 90 (signB -> empty .)
    SCONST          reduce using rule 90 (signB -> empty .)
    TRUE            reduce using rule 90 (signB -> empty .)
    FALSE           reduce using rule 90 (signB -> empty .)


state 88

    (85) factor -> funccall .

    /               reduce using rule 85 (factor -> funccall .)
    *               reduce using rule 85 (factor -> funccall .)
    -               reduce using rule 85 (factor -> funccall .)
    +               reduce using rule 85 (factor -> funccall .)
    <               reduce using rule 85 (factor -> funccall .)
    >               reduce using rule 85 (factor -> funccall .)
    DIFF            reduce using rule 85 (factor -> funccall .)
    EQ              reduce using rule 85 (factor -> funccall .)
    LTEQ            reduce using rule 85 (factor -> funccall .)
    GTEQ            reduce using rule 85 (factor -> funccall .)
    AND             reduce using rule 85 (factor -> funccall .)
    OR              reduce using rule 85 (factor -> funccall .)
    ,               reduce using rule 85 (factor -> funccall .)
    ;               reduce using rule 85 (factor -> funccall .)
    )               reduce using rule 85 (factor -> funccall .)
    ]               reduce using rule 85 (factor -> funccall .)


state 89

    (59) hyperexpression -> superexpression . hyperexpressionB
    (60) hyperexpressionB -> . OR push_operator hyperexpression
    (61) hyperexpressionB -> . empty
    (138) empty -> .

    OR              shift and go to state 131
    ;               reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    ,               reduce using rule 138 (empty -> .)
    ]               reduce using rule 138 (empty -> .)

    hyperexpressionB               shift and go to state 130
    empty                          shift and go to state 132

state 90

    (89) signB -> sign .

    FCONST          reduce using rule 89 (signB -> sign .)
    ICONST          reduce using rule 89 (signB -> sign .)
    SCONST          reduce using rule 89 (signB -> sign .)
    TRUE            reduce using rule 89 (signB -> sign .)
    FALSE           reduce using rule 89 (signB -> sign .)


state 91

    (86) factor -> ID . seen_ID dimensionsOpt
    (126) funccall -> ID . ( funccallB funccallC
    (88) seen_ID -> .

    (               shift and go to state 133
    [               reduce using rule 88 (seen_ID -> .)
    /               reduce using rule 88 (seen_ID -> .)
    *               reduce using rule 88 (seen_ID -> .)
    -               reduce using rule 88 (seen_ID -> .)
    +               reduce using rule 88 (seen_ID -> .)
    <               reduce using rule 88 (seen_ID -> .)
    >               reduce using rule 88 (seen_ID -> .)
    DIFF            reduce using rule 88 (seen_ID -> .)
    EQ              reduce using rule 88 (seen_ID -> .)
    LTEQ            reduce using rule 88 (seen_ID -> .)
    GTEQ            reduce using rule 88 (seen_ID -> .)
    AND             reduce using rule 88 (seen_ID -> .)
    OR              reduce using rule 88 (seen_ID -> .)
    ;               reduce using rule 88 (seen_ID -> .)
    )               reduce using rule 88 (seen_ID -> .)
    ,               reduce using rule 88 (seen_ID -> .)
    ]               reduce using rule 88 (seen_ID -> .)

    seen_ID                        shift and go to state 134

state 92

    (73) exp -> term . seen_term expB
    (74) seen_term -> .

    -               reduce using rule 74 (seen_term -> .)
    +               reduce using rule 74 (seen_term -> .)
    <               reduce using rule 74 (seen_term -> .)
    >               reduce using rule 74 (seen_term -> .)
    DIFF            reduce using rule 74 (seen_term -> .)
    EQ              reduce using rule 74 (seen_term -> .)
    LTEQ            reduce using rule 74 (seen_term -> .)
    GTEQ            reduce using rule 74 (seen_term -> .)
    AND             reduce using rule 74 (seen_term -> .)
    OR              reduce using rule 74 (seen_term -> .)
    ;               reduce using rule 74 (seen_term -> .)
    )               reduce using rule 74 (seen_term -> .)
    ,               reduce using rule 74 (seen_term -> .)
    ]               reduce using rule 74 (seen_term -> .)

    seen_term                      shift and go to state 135

state 93

    (65) expression -> exp . expressionB
    (66) expressionB -> . < push_operator exp
    (67) expressionB -> . > push_operator exp
    (68) expressionB -> . DIFF push_operator exp
    (69) expressionB -> . EQ push_operator exp
    (70) expressionB -> . LTEQ push_operator exp
    (71) expressionB -> . GTEQ push_operator exp
    (72) expressionB -> . empty
    (138) empty -> .

    <               shift and go to state 141
    >               shift and go to state 143
    DIFF            shift and go to state 139
    EQ              shift and go to state 140
    LTEQ            shift and go to state 137
    GTEQ            shift and go to state 136
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    ;               reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    ,               reduce using rule 138 (empty -> .)
    ]               reduce using rule 138 (empty -> .)

    empty                          shift and go to state 142
    expressionB                    shift and go to state 138

state 94

    (62) superexpression -> expression . superexpressionB
    (63) superexpressionB -> . AND push_operator superexpression
    (64) superexpressionB -> . empty
    (138) empty -> .

    AND             shift and go to state 144
    OR              reduce using rule 138 (empty -> .)
    ;               reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    ,               reduce using rule 138 (empty -> .)
    ]               reduce using rule 138 (empty -> .)

    empty                          shift and go to state 146
    superexpressionB               shift and go to state 145

state 95

    (44) instruction -> assignfunccall ; .

    ID              reduce using rule 44 (instruction -> assignfunccall ; .)
    PRINT           reduce using rule 44 (instruction -> assignfunccall ; .)
    RETURN          reduce using rule 44 (instruction -> assignfunccall ; .)
    INPUT           reduce using rule 44 (instruction -> assignfunccall ; .)
    IF              reduce using rule 44 (instruction -> assignfunccall ; .)
    WHILE           reduce using rule 44 (instruction -> assignfunccall ; .)
    FOR             reduce using rule 44 (instruction -> assignfunccall ; .)
    INT             reduce using rule 44 (instruction -> assignfunccall ; .)
    FLOAT           reduce using rule 44 (instruction -> assignfunccall ; .)
    STRING          reduce using rule 44 (instruction -> assignfunccall ; .)
    BOOL            reduce using rule 44 (instruction -> assignfunccall ; .)
    #               reduce using rule 44 (instruction -> assignfunccall ; .)
    TRACKDECISION   reduce using rule 44 (instruction -> assignfunccall ; .)
    FORGETDECISION  reduce using rule 44 (instruction -> assignfunccall ; .)
    }               reduce using rule 44 (instruction -> assignfunccall ; .)


state 96

    (103) whileloop -> WHILE ( . hyperexpression ) block
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 147
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 97

    (114) output -> PRINT ( . outputB
    (115) outputB -> . SCONST outputC
    (116) outputB -> . hyperexpression outputC
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

  ! shift/reduce conflict for SCONST resolved as shift
    SCONST          shift and go to state 148
    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

  ! SCONST          [ reduce using rule 138 (empty -> .) ]

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 149
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    outputB                        shift and go to state 150
    expression                     shift and go to state 94

state 98

    (121) localvardirectiveB -> FORGET .

    ID              reduce using rule 121 (localvardirectiveB -> FORGET .)


state 99

    (122) localmsgdirective -> # SHOW . SCONST

    SCONST          shift and go to state 151


state 100

    (120) localvardirectiveB -> TRACK .

    ID              reduce using rule 120 (localvardirectiveB -> TRACK .)


state 101

    (119) localvardirective -> # localvardirectiveB . ID

    ID              shift and go to state 152


state 102

    (47) instruction -> input ; .

    ID              reduce using rule 47 (instruction -> input ; .)
    PRINT           reduce using rule 47 (instruction -> input ; .)
    RETURN          reduce using rule 47 (instruction -> input ; .)
    INPUT           reduce using rule 47 (instruction -> input ; .)
    IF              reduce using rule 47 (instruction -> input ; .)
    WHILE           reduce using rule 47 (instruction -> input ; .)
    FOR             reduce using rule 47 (instruction -> input ; .)
    INT             reduce using rule 47 (instruction -> input ; .)
    FLOAT           reduce using rule 47 (instruction -> input ; .)
    STRING          reduce using rule 47 (instruction -> input ; .)
    BOOL            reduce using rule 47 (instruction -> input ; .)
    #               reduce using rule 47 (instruction -> input ; .)
    TRACKDECISION   reduce using rule 47 (instruction -> input ; .)
    FORGETDECISION  reduce using rule 47 (instruction -> input ; .)
    }               reduce using rule 47 (instruction -> input ; .)


state 103

    (46) instruction -> return ; .

    ID              reduce using rule 46 (instruction -> return ; .)
    PRINT           reduce using rule 46 (instruction -> return ; .)
    RETURN          reduce using rule 46 (instruction -> return ; .)
    INPUT           reduce using rule 46 (instruction -> return ; .)
    IF              reduce using rule 46 (instruction -> return ; .)
    WHILE           reduce using rule 46 (instruction -> return ; .)
    FOR             reduce using rule 46 (instruction -> return ; .)
    INT             reduce using rule 46 (instruction -> return ; .)
    FLOAT           reduce using rule 46 (instruction -> return ; .)
    STRING          reduce using rule 46 (instruction -> return ; .)
    BOOL            reduce using rule 46 (instruction -> return ; .)
    #               reduce using rule 46 (instruction -> return ; .)
    TRACKDECISION   reduce using rule 46 (instruction -> return ; .)
    FORGETDECISION  reduce using rule 46 (instruction -> return ; .)
    }               reduce using rule 46 (instruction -> return ; .)


state 104

    (110) forloop -> FOR ( . assign ; hyperexpression ; hyperexpression ) block
    (37) assign -> . ID dimensionsOpt = hyperexpression

    ID              shift and go to state 153

    assign                         shift and go to state 154

state 105

    (34) block -> { instructionsOpt } .

    DEF             reduce using rule 34 (block -> { instructionsOpt } .)
    $end            reduce using rule 34 (block -> { instructionsOpt } .)
    ID              reduce using rule 34 (block -> { instructionsOpt } .)
    PRINT           reduce using rule 34 (block -> { instructionsOpt } .)
    RETURN          reduce using rule 34 (block -> { instructionsOpt } .)
    INPUT           reduce using rule 34 (block -> { instructionsOpt } .)
    IF              reduce using rule 34 (block -> { instructionsOpt } .)
    WHILE           reduce using rule 34 (block -> { instructionsOpt } .)
    FOR             reduce using rule 34 (block -> { instructionsOpt } .)
    INT             reduce using rule 34 (block -> { instructionsOpt } .)
    FLOAT           reduce using rule 34 (block -> { instructionsOpt } .)
    STRING          reduce using rule 34 (block -> { instructionsOpt } .)
    BOOL            reduce using rule 34 (block -> { instructionsOpt } .)
    #               reduce using rule 34 (block -> { instructionsOpt } .)
    TRACKDECISION   reduce using rule 34 (block -> { instructionsOpt } .)
    FORGETDECISION  reduce using rule 34 (block -> { instructionsOpt } .)
    }               reduce using rule 34 (block -> { instructionsOpt } .)
    ELSE            reduce using rule 34 (block -> { instructionsOpt } .)
    MAIN            reduce using rule 34 (block -> { instructionsOpt } .)


state 106

    (111) input -> INPUT ( . ID inputB )

    ID              shift and go to state 155


state 107

    (39) dimensionsOpt -> dimensions .

    =               reduce using rule 39 (dimensionsOpt -> dimensions .)
    ,               reduce using rule 39 (dimensionsOpt -> dimensions .)
    ;               reduce using rule 39 (dimensionsOpt -> dimensions .)
    /               reduce using rule 39 (dimensionsOpt -> dimensions .)
    *               reduce using rule 39 (dimensionsOpt -> dimensions .)
    -               reduce using rule 39 (dimensionsOpt -> dimensions .)
    +               reduce using rule 39 (dimensionsOpt -> dimensions .)
    <               reduce using rule 39 (dimensionsOpt -> dimensions .)
    >               reduce using rule 39 (dimensionsOpt -> dimensions .)
    DIFF            reduce using rule 39 (dimensionsOpt -> dimensions .)
    EQ              reduce using rule 39 (dimensionsOpt -> dimensions .)
    LTEQ            reduce using rule 39 (dimensionsOpt -> dimensions .)
    GTEQ            reduce using rule 39 (dimensionsOpt -> dimensions .)
    AND             reduce using rule 39 (dimensionsOpt -> dimensions .)
    OR              reduce using rule 39 (dimensionsOpt -> dimensions .)
    )               reduce using rule 39 (dimensionsOpt -> dimensions .)
    ]               reduce using rule 39 (dimensionsOpt -> dimensions .)


state 108

    (53) assignfunccall -> ID assignfunccallB .

    ;               reduce using rule 53 (assignfunccall -> ID assignfunccallB .)


state 109

    (54) assignfunccallB -> ( . funccallB funccallC
    (127) funccallB -> . hyperexpression
    (128) funccallB -> . empty
    (59) hyperexpression -> . superexpression hyperexpressionB
    (138) empty -> .
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -

    ,               reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)
    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84

    funccallB                      shift and go to state 156
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 157
    factor                         shift and go to state 86
    empty                          shift and go to state 158
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 110

    (55) assignfunccallB -> assignB .

    ;               reduce using rule 55 (assignfunccallB -> assignB .)


state 111

    (131) dimensions -> [ . hyperexpression ] dimensionsB
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 159
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 112

    (38) assignB -> dimensionsOpt . = hyperexpression

    =               shift and go to state 160


state 113

    (40) dimensionsOpt -> empty .

    =               reduce using rule 40 (dimensionsOpt -> empty .)
    ,               reduce using rule 40 (dimensionsOpt -> empty .)
    ;               reduce using rule 40 (dimensionsOpt -> empty .)
    /               reduce using rule 40 (dimensionsOpt -> empty .)
    *               reduce using rule 40 (dimensionsOpt -> empty .)
    -               reduce using rule 40 (dimensionsOpt -> empty .)
    +               reduce using rule 40 (dimensionsOpt -> empty .)
    <               reduce using rule 40 (dimensionsOpt -> empty .)
    >               reduce using rule 40 (dimensionsOpt -> empty .)
    DIFF            reduce using rule 40 (dimensionsOpt -> empty .)
    EQ              reduce using rule 40 (dimensionsOpt -> empty .)
    LTEQ            reduce using rule 40 (dimensionsOpt -> empty .)
    GTEQ            reduce using rule 40 (dimensionsOpt -> empty .)
    AND             reduce using rule 40 (dimensionsOpt -> empty .)
    OR              reduce using rule 40 (dimensionsOpt -> empty .)
    )               reduce using rule 40 (dimensionsOpt -> empty .)
    ]               reduce using rule 40 (dimensionsOpt -> empty .)


state 114

    (41) condition -> IF ( . hyperexpression ) block else
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 161
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 115

    (35) instructionsOpt -> instruction instructionsOpt .

    }               reduce using rule 35 (instructionsOpt -> instruction instructionsOpt .)


state 116

    (45) instruction -> output ; .

    ID              reduce using rule 45 (instruction -> output ; .)
    PRINT           reduce using rule 45 (instruction -> output ; .)
    RETURN          reduce using rule 45 (instruction -> output ; .)
    INPUT           reduce using rule 45 (instruction -> output ; .)
    IF              reduce using rule 45 (instruction -> output ; .)
    WHILE           reduce using rule 45 (instruction -> output ; .)
    FOR             reduce using rule 45 (instruction -> output ; .)
    INT             reduce using rule 45 (instruction -> output ; .)
    FLOAT           reduce using rule 45 (instruction -> output ; .)
    STRING          reduce using rule 45 (instruction -> output ; .)
    BOOL            reduce using rule 45 (instruction -> output ; .)
    #               reduce using rule 45 (instruction -> output ; .)
    TRACKDECISION   reduce using rule 45 (instruction -> output ; .)
    FORGETDECISION  reduce using rule 45 (instruction -> output ; .)
    }               reduce using rule 45 (instruction -> output ; .)


state 117

    (31) func -> DEF returntype ID ( . paramsOpt )
    (32) paramsOpt -> . params paramsB
    (33) paramsOpt -> . empty
    (135) params -> . type ID
    (138) empty -> .
    (104) type -> . INT
    (105) type -> . FLOAT
    (106) type -> . STRING
    (107) type -> . BOOL

    )               reduce using rule 138 (empty -> .)
    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    paramsOpt                      shift and go to state 162
    params                         shift and go to state 163
    type                           shift and go to state 165
    empty                          shift and go to state 164

state 118

    (19) declarationB -> ID push_operand dimensionsOpt .

    =               reduce using rule 19 (declarationB -> ID push_operand dimensionsOpt .)
    ,               reduce using rule 19 (declarationB -> ID push_operand dimensionsOpt .)
    ;               reduce using rule 19 (declarationB -> ID push_operand dimensionsOpt .)


state 119

    (25) declarationC -> , declarationB . declarationC
    (24) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (25) declarationC -> . , declarationB declarationC
    (26) declarationC -> . ;

    =               shift and go to state 79
    ,               shift and go to state 76
    ;               shift and go to state 77

    declarationC                   shift and go to state 166

state 120

    (24) declarationC -> = push_operator . hyperexpression quadruple_assign declarationD
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    signB                          shift and go to state 81
    hyperexpression                shift and go to state 167
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 121

    (29) main -> MAIN ( ) block .

    DEF             reduce using rule 29 (main -> MAIN ( ) block .)
    $end            reduce using rule 29 (main -> MAIN ( ) block .)


state 122

    (83) factor -> signB constant .

    /               reduce using rule 83 (factor -> signB constant .)
    *               reduce using rule 83 (factor -> signB constant .)
    -               reduce using rule 83 (factor -> signB constant .)
    +               reduce using rule 83 (factor -> signB constant .)
    <               reduce using rule 83 (factor -> signB constant .)
    >               reduce using rule 83 (factor -> signB constant .)
    DIFF            reduce using rule 83 (factor -> signB constant .)
    EQ              reduce using rule 83 (factor -> signB constant .)
    LTEQ            reduce using rule 83 (factor -> signB constant .)
    GTEQ            reduce using rule 83 (factor -> signB constant .)
    AND             reduce using rule 83 (factor -> signB constant .)
    OR              reduce using rule 83 (factor -> signB constant .)
    ,               reduce using rule 83 (factor -> signB constant .)
    ;               reduce using rule 83 (factor -> signB constant .)
    )               reduce using rule 83 (factor -> signB constant .)
    ]               reduce using rule 83 (factor -> signB constant .)


state 123

    (96) constant -> FCONST . seen_fconst
    (91) seen_fconst -> .

    /               reduce using rule 91 (seen_fconst -> .)
    *               reduce using rule 91 (seen_fconst -> .)
    -               reduce using rule 91 (seen_fconst -> .)
    +               reduce using rule 91 (seen_fconst -> .)
    <               reduce using rule 91 (seen_fconst -> .)
    >               reduce using rule 91 (seen_fconst -> .)
    DIFF            reduce using rule 91 (seen_fconst -> .)
    EQ              reduce using rule 91 (seen_fconst -> .)
    LTEQ            reduce using rule 91 (seen_fconst -> .)
    GTEQ            reduce using rule 91 (seen_fconst -> .)
    AND             reduce using rule 91 (seen_fconst -> .)
    OR              reduce using rule 91 (seen_fconst -> .)
    ;               reduce using rule 91 (seen_fconst -> .)
    )               reduce using rule 91 (seen_fconst -> .)
    ,               reduce using rule 91 (seen_fconst -> .)
    ]               reduce using rule 91 (seen_fconst -> .)

    seen_fconst                    shift and go to state 168

state 124

    (98) constant -> SCONST . seen_sconst
    (93) seen_sconst -> .

    /               reduce using rule 93 (seen_sconst -> .)
    *               reduce using rule 93 (seen_sconst -> .)
    -               reduce using rule 93 (seen_sconst -> .)
    +               reduce using rule 93 (seen_sconst -> .)
    <               reduce using rule 93 (seen_sconst -> .)
    >               reduce using rule 93 (seen_sconst -> .)
    DIFF            reduce using rule 93 (seen_sconst -> .)
    EQ              reduce using rule 93 (seen_sconst -> .)
    LTEQ            reduce using rule 93 (seen_sconst -> .)
    GTEQ            reduce using rule 93 (seen_sconst -> .)
    AND             reduce using rule 93 (seen_sconst -> .)
    OR              reduce using rule 93 (seen_sconst -> .)
    ;               reduce using rule 93 (seen_sconst -> .)
    )               reduce using rule 93 (seen_sconst -> .)
    ,               reduce using rule 93 (seen_sconst -> .)
    ]               reduce using rule 93 (seen_sconst -> .)

    seen_sconst                    shift and go to state 169

state 125

    (97) constant -> ICONST . seen_iconst
    (92) seen_iconst -> .

    /               reduce using rule 92 (seen_iconst -> .)
    *               reduce using rule 92 (seen_iconst -> .)
    -               reduce using rule 92 (seen_iconst -> .)
    +               reduce using rule 92 (seen_iconst -> .)
    <               reduce using rule 92 (seen_iconst -> .)
    >               reduce using rule 92 (seen_iconst -> .)
    DIFF            reduce using rule 92 (seen_iconst -> .)
    EQ              reduce using rule 92 (seen_iconst -> .)
    LTEQ            reduce using rule 92 (seen_iconst -> .)
    GTEQ            reduce using rule 92 (seen_iconst -> .)
    AND             reduce using rule 92 (seen_iconst -> .)
    OR              reduce using rule 92 (seen_iconst -> .)
    ;               reduce using rule 92 (seen_iconst -> .)
    )               reduce using rule 92 (seen_iconst -> .)
    ,               reduce using rule 92 (seen_iconst -> .)
    ]               reduce using rule 92 (seen_iconst -> .)

    seen_iconst                    shift and go to state 170

state 126

    (100) constant -> FALSE . seen_false
    (95) seen_false -> .

    /               reduce using rule 95 (seen_false -> .)
    *               reduce using rule 95 (seen_false -> .)
    -               reduce using rule 95 (seen_false -> .)
    +               reduce using rule 95 (seen_false -> .)
    <               reduce using rule 95 (seen_false -> .)
    >               reduce using rule 95 (seen_false -> .)
    DIFF            reduce using rule 95 (seen_false -> .)
    EQ              reduce using rule 95 (seen_false -> .)
    LTEQ            reduce using rule 95 (seen_false -> .)
    GTEQ            reduce using rule 95 (seen_false -> .)
    AND             reduce using rule 95 (seen_false -> .)
    OR              reduce using rule 95 (seen_false -> .)
    ;               reduce using rule 95 (seen_false -> .)
    )               reduce using rule 95 (seen_false -> .)
    ,               reduce using rule 95 (seen_false -> .)
    ]               reduce using rule 95 (seen_false -> .)

    seen_false                     shift and go to state 171

state 127

    (99) constant -> TRUE . seen_true
    (94) seen_true -> .

    /               reduce using rule 94 (seen_true -> .)
    *               reduce using rule 94 (seen_true -> .)
    -               reduce using rule 94 (seen_true -> .)
    +               reduce using rule 94 (seen_true -> .)
    <               reduce using rule 94 (seen_true -> .)
    >               reduce using rule 94 (seen_true -> .)
    DIFF            reduce using rule 94 (seen_true -> .)
    EQ              reduce using rule 94 (seen_true -> .)
    LTEQ            reduce using rule 94 (seen_true -> .)
    GTEQ            reduce using rule 94 (seen_true -> .)
    AND             reduce using rule 94 (seen_true -> .)
    OR              reduce using rule 94 (seen_true -> .)
    ;               reduce using rule 94 (seen_true -> .)
    )               reduce using rule 94 (seen_true -> .)
    ,               reduce using rule 94 (seen_true -> .)
    ]               reduce using rule 94 (seen_true -> .)

    seen_true                      shift and go to state 172

state 128

    (84) factor -> ( seen_parentheses . hyperexpression )
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 173
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 129

    (78) term -> factor seen_factor . termB
    (80) termB -> . / push_operator term
    (81) termB -> . * push_operator term
    (82) termB -> . empty
    (138) empty -> .

    /               shift and go to state 177
    *               shift and go to state 174
    -               reduce using rule 138 (empty -> .)
    +               reduce using rule 138 (empty -> .)
    <               reduce using rule 138 (empty -> .)
    >               reduce using rule 138 (empty -> .)
    DIFF            reduce using rule 138 (empty -> .)
    EQ              reduce using rule 138 (empty -> .)
    LTEQ            reduce using rule 138 (empty -> .)
    GTEQ            reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    ;               reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    ,               reduce using rule 138 (empty -> .)
    ]               reduce using rule 138 (empty -> .)

    termB                          shift and go to state 175
    empty                          shift and go to state 176

state 130

    (59) hyperexpression -> superexpression hyperexpressionB .

    ,               reduce using rule 59 (hyperexpression -> superexpression hyperexpressionB .)
    ;               reduce using rule 59 (hyperexpression -> superexpression hyperexpressionB .)
    )               reduce using rule 59 (hyperexpression -> superexpression hyperexpressionB .)
    ]               reduce using rule 59 (hyperexpression -> superexpression hyperexpressionB .)


state 131

    (60) hyperexpressionB -> OR . push_operator hyperexpression
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 178

state 132

    (61) hyperexpressionB -> empty .

    ;               reduce using rule 61 (hyperexpressionB -> empty .)
    )               reduce using rule 61 (hyperexpressionB -> empty .)
    ,               reduce using rule 61 (hyperexpressionB -> empty .)
    ]               reduce using rule 61 (hyperexpressionB -> empty .)


state 133

    (126) funccall -> ID ( . funccallB funccallC
    (127) funccallB -> . hyperexpression
    (128) funccallB -> . empty
    (59) hyperexpression -> . superexpression hyperexpressionB
    (138) empty -> .
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -

    ,               reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)
    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84

    funccallB                      shift and go to state 179
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 157
    factor                         shift and go to state 86
    empty                          shift and go to state 158
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 134

    (86) factor -> ID seen_ID . dimensionsOpt
    (39) dimensionsOpt -> . dimensions
    (40) dimensionsOpt -> . empty
    (131) dimensions -> . [ hyperexpression ] dimensionsB
    (138) empty -> .

    [               shift and go to state 111
    /               reduce using rule 138 (empty -> .)
    *               reduce using rule 138 (empty -> .)
    -               reduce using rule 138 (empty -> .)
    +               reduce using rule 138 (empty -> .)
    <               reduce using rule 138 (empty -> .)
    >               reduce using rule 138 (empty -> .)
    DIFF            reduce using rule 138 (empty -> .)
    EQ              reduce using rule 138 (empty -> .)
    LTEQ            reduce using rule 138 (empty -> .)
    GTEQ            reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    ;               reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    ,               reduce using rule 138 (empty -> .)
    ]               reduce using rule 138 (empty -> .)

    dimensions                     shift and go to state 107
    dimensionsOpt                  shift and go to state 180
    empty                          shift and go to state 113

state 135

    (73) exp -> term seen_term . expB
    (75) expB -> . - push_operator exp
    (76) expB -> . + push_operator exp
    (77) expB -> . empty
    (138) empty -> .

    -               shift and go to state 182
    +               shift and go to state 181
    <               reduce using rule 138 (empty -> .)
    >               reduce using rule 138 (empty -> .)
    DIFF            reduce using rule 138 (empty -> .)
    EQ              reduce using rule 138 (empty -> .)
    LTEQ            reduce using rule 138 (empty -> .)
    GTEQ            reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    ;               reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    ,               reduce using rule 138 (empty -> .)
    ]               reduce using rule 138 (empty -> .)

    expB                           shift and go to state 183
    empty                          shift and go to state 184

state 136

    (71) expressionB -> GTEQ . push_operator exp
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 185

state 137

    (70) expressionB -> LTEQ . push_operator exp
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 186

state 138

    (65) expression -> exp expressionB .

    AND             reduce using rule 65 (expression -> exp expressionB .)
    OR              reduce using rule 65 (expression -> exp expressionB .)
    )               reduce using rule 65 (expression -> exp expressionB .)
    ]               reduce using rule 65 (expression -> exp expressionB .)
    ;               reduce using rule 65 (expression -> exp expressionB .)
    ,               reduce using rule 65 (expression -> exp expressionB .)


state 139

    (68) expressionB -> DIFF . push_operator exp
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 187

state 140

    (69) expressionB -> EQ . push_operator exp
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 188

state 141

    (66) expressionB -> < . push_operator exp
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 189

state 142

    (72) expressionB -> empty .

    AND             reduce using rule 72 (expressionB -> empty .)
    OR              reduce using rule 72 (expressionB -> empty .)
    ;               reduce using rule 72 (expressionB -> empty .)
    )               reduce using rule 72 (expressionB -> empty .)
    ,               reduce using rule 72 (expressionB -> empty .)
    ]               reduce using rule 72 (expressionB -> empty .)


state 143

    (67) expressionB -> > . push_operator exp
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 190

state 144

    (63) superexpressionB -> AND . push_operator superexpression
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 191

state 145

    (62) superexpression -> expression superexpressionB .

    OR              reduce using rule 62 (superexpression -> expression superexpressionB .)
    )               reduce using rule 62 (superexpression -> expression superexpressionB .)
    ,               reduce using rule 62 (superexpression -> expression superexpressionB .)
    ;               reduce using rule 62 (superexpression -> expression superexpressionB .)
    ]               reduce using rule 62 (superexpression -> expression superexpressionB .)


state 146

    (64) superexpressionB -> empty .

    OR              reduce using rule 64 (superexpressionB -> empty .)
    ;               reduce using rule 64 (superexpressionB -> empty .)
    )               reduce using rule 64 (superexpressionB -> empty .)
    ,               reduce using rule 64 (superexpressionB -> empty .)
    ]               reduce using rule 64 (superexpressionB -> empty .)


state 147

    (103) whileloop -> WHILE ( hyperexpression . ) block

    )               shift and go to state 192


state 148

    (115) outputB -> SCONST . outputC
    (117) outputC -> . )
    (118) outputC -> . , outputB

    )               shift and go to state 193
    ,               shift and go to state 195

    outputC                        shift and go to state 194

state 149

    (116) outputB -> hyperexpression . outputC
    (117) outputC -> . )
    (118) outputC -> . , outputB

    )               shift and go to state 193
    ,               shift and go to state 195

    outputC                        shift and go to state 196

state 150

    (114) output -> PRINT ( outputB .

    ;               reduce using rule 114 (output -> PRINT ( outputB .)


state 151

    (122) localmsgdirective -> # SHOW SCONST .

    ID              reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    PRINT           reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    RETURN          reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    INPUT           reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    IF              reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    WHILE           reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    FOR             reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    INT             reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    FLOAT           reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    STRING          reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    BOOL            reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    #               reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    TRACKDECISION   reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    FORGETDECISION  reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)
    }               reduce using rule 122 (localmsgdirective -> # SHOW SCONST .)


state 152

    (119) localvardirective -> # localvardirectiveB ID .

    ID              reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    PRINT           reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    RETURN          reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    INPUT           reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    IF              reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    WHILE           reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    FOR             reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    INT             reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    FLOAT           reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    STRING          reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    BOOL            reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    #               reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    TRACKDECISION   reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    FORGETDECISION  reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)
    }               reduce using rule 119 (localvardirective -> # localvardirectiveB ID .)


state 153

    (37) assign -> ID . dimensionsOpt = hyperexpression
    (39) dimensionsOpt -> . dimensions
    (40) dimensionsOpt -> . empty
    (131) dimensions -> . [ hyperexpression ] dimensionsB
    (138) empty -> .

    [               shift and go to state 111
    =               reduce using rule 138 (empty -> .)

    dimensionsOpt                  shift and go to state 197
    dimensions                     shift and go to state 107
    empty                          shift and go to state 113

state 154

    (110) forloop -> FOR ( assign . ; hyperexpression ; hyperexpression ) block

    ;               shift and go to state 198


state 155

    (111) input -> INPUT ( ID . inputB )
    (112) inputB -> . , ID inputB
    (113) inputB -> . empty
    (138) empty -> .

    ,               shift and go to state 199
    )               reduce using rule 138 (empty -> .)

    inputB                         shift and go to state 200
    empty                          shift and go to state 201

state 156

    (54) assignfunccallB -> ( funccallB . funccallC
    (129) funccallC -> . , funccallB funccallC
    (130) funccallC -> . )

    ,               shift and go to state 204
    )               shift and go to state 203

    funccallC                      shift and go to state 202

state 157

    (127) funccallB -> hyperexpression .

    ,               reduce using rule 127 (funccallB -> hyperexpression .)
    )               reduce using rule 127 (funccallB -> hyperexpression .)


state 158

    (128) funccallB -> empty .
    (90) signB -> empty .

    ,               reduce using rule 128 (funccallB -> empty .)
    )               reduce using rule 128 (funccallB -> empty .)
    FCONST          reduce using rule 90 (signB -> empty .)
    ICONST          reduce using rule 90 (signB -> empty .)
    SCONST          reduce using rule 90 (signB -> empty .)
    TRUE            reduce using rule 90 (signB -> empty .)
    FALSE           reduce using rule 90 (signB -> empty .)


state 159

    (131) dimensions -> [ hyperexpression . ] dimensionsB

    ]               shift and go to state 205


state 160

    (38) assignB -> dimensionsOpt = . hyperexpression
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 206
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 161

    (41) condition -> IF ( hyperexpression . ) block else

    )               shift and go to state 207


state 162

    (31) func -> DEF returntype ID ( paramsOpt . )

    )               shift and go to state 208


state 163

    (32) paramsOpt -> params . paramsB
    (136) paramsB -> . , params paramsB
    (137) paramsB -> . empty
    (138) empty -> .

    ,               shift and go to state 210
    )               reduce using rule 138 (empty -> .)

    paramsB                        shift and go to state 209
    empty                          shift and go to state 211

state 164

    (33) paramsOpt -> empty .

    )               reduce using rule 33 (paramsOpt -> empty .)


state 165

    (135) params -> type . ID

    ID              shift and go to state 212


state 166

    (25) declarationC -> , declarationB declarationC .

    INT             reduce using rule 25 (declarationC -> , declarationB declarationC .)
    FLOAT           reduce using rule 25 (declarationC -> , declarationB declarationC .)
    STRING          reduce using rule 25 (declarationC -> , declarationB declarationC .)
    BOOL            reduce using rule 25 (declarationC -> , declarationB declarationC .)
    DEF             reduce using rule 25 (declarationC -> , declarationB declarationC .)
    MAIN            reduce using rule 25 (declarationC -> , declarationB declarationC .)
    ID              reduce using rule 25 (declarationC -> , declarationB declarationC .)
    PRINT           reduce using rule 25 (declarationC -> , declarationB declarationC .)
    RETURN          reduce using rule 25 (declarationC -> , declarationB declarationC .)
    INPUT           reduce using rule 25 (declarationC -> , declarationB declarationC .)
    IF              reduce using rule 25 (declarationC -> , declarationB declarationC .)
    WHILE           reduce using rule 25 (declarationC -> , declarationB declarationC .)
    FOR             reduce using rule 25 (declarationC -> , declarationB declarationC .)
    #               reduce using rule 25 (declarationC -> , declarationB declarationC .)
    TRACKDECISION   reduce using rule 25 (declarationC -> , declarationB declarationC .)
    FORGETDECISION  reduce using rule 25 (declarationC -> , declarationB declarationC .)
    }               reduce using rule 25 (declarationC -> , declarationB declarationC .)


state 167

    (24) declarationC -> = push_operator hyperexpression . quadruple_assign declarationD
    (23) quadruple_assign -> .

    ,               reduce using rule 23 (quadruple_assign -> .)
    ;               reduce using rule 23 (quadruple_assign -> .)

    quadruple_assign               shift and go to state 213

state 168

    (96) constant -> FCONST seen_fconst .

    /               reduce using rule 96 (constant -> FCONST seen_fconst .)
    *               reduce using rule 96 (constant -> FCONST seen_fconst .)
    -               reduce using rule 96 (constant -> FCONST seen_fconst .)
    +               reduce using rule 96 (constant -> FCONST seen_fconst .)
    <               reduce using rule 96 (constant -> FCONST seen_fconst .)
    >               reduce using rule 96 (constant -> FCONST seen_fconst .)
    DIFF            reduce using rule 96 (constant -> FCONST seen_fconst .)
    EQ              reduce using rule 96 (constant -> FCONST seen_fconst .)
    LTEQ            reduce using rule 96 (constant -> FCONST seen_fconst .)
    GTEQ            reduce using rule 96 (constant -> FCONST seen_fconst .)
    AND             reduce using rule 96 (constant -> FCONST seen_fconst .)
    OR              reduce using rule 96 (constant -> FCONST seen_fconst .)
    ;               reduce using rule 96 (constant -> FCONST seen_fconst .)
    )               reduce using rule 96 (constant -> FCONST seen_fconst .)
    ,               reduce using rule 96 (constant -> FCONST seen_fconst .)
    ]               reduce using rule 96 (constant -> FCONST seen_fconst .)


state 169

    (98) constant -> SCONST seen_sconst .

    /               reduce using rule 98 (constant -> SCONST seen_sconst .)
    *               reduce using rule 98 (constant -> SCONST seen_sconst .)
    -               reduce using rule 98 (constant -> SCONST seen_sconst .)
    +               reduce using rule 98 (constant -> SCONST seen_sconst .)
    <               reduce using rule 98 (constant -> SCONST seen_sconst .)
    >               reduce using rule 98 (constant -> SCONST seen_sconst .)
    DIFF            reduce using rule 98 (constant -> SCONST seen_sconst .)
    EQ              reduce using rule 98 (constant -> SCONST seen_sconst .)
    LTEQ            reduce using rule 98 (constant -> SCONST seen_sconst .)
    GTEQ            reduce using rule 98 (constant -> SCONST seen_sconst .)
    AND             reduce using rule 98 (constant -> SCONST seen_sconst .)
    OR              reduce using rule 98 (constant -> SCONST seen_sconst .)
    ;               reduce using rule 98 (constant -> SCONST seen_sconst .)
    )               reduce using rule 98 (constant -> SCONST seen_sconst .)
    ,               reduce using rule 98 (constant -> SCONST seen_sconst .)
    ]               reduce using rule 98 (constant -> SCONST seen_sconst .)


state 170

    (97) constant -> ICONST seen_iconst .

    /               reduce using rule 97 (constant -> ICONST seen_iconst .)
    *               reduce using rule 97 (constant -> ICONST seen_iconst .)
    -               reduce using rule 97 (constant -> ICONST seen_iconst .)
    +               reduce using rule 97 (constant -> ICONST seen_iconst .)
    <               reduce using rule 97 (constant -> ICONST seen_iconst .)
    >               reduce using rule 97 (constant -> ICONST seen_iconst .)
    DIFF            reduce using rule 97 (constant -> ICONST seen_iconst .)
    EQ              reduce using rule 97 (constant -> ICONST seen_iconst .)
    LTEQ            reduce using rule 97 (constant -> ICONST seen_iconst .)
    GTEQ            reduce using rule 97 (constant -> ICONST seen_iconst .)
    AND             reduce using rule 97 (constant -> ICONST seen_iconst .)
    OR              reduce using rule 97 (constant -> ICONST seen_iconst .)
    ;               reduce using rule 97 (constant -> ICONST seen_iconst .)
    )               reduce using rule 97 (constant -> ICONST seen_iconst .)
    ,               reduce using rule 97 (constant -> ICONST seen_iconst .)
    ]               reduce using rule 97 (constant -> ICONST seen_iconst .)


state 171

    (100) constant -> FALSE seen_false .

    /               reduce using rule 100 (constant -> FALSE seen_false .)
    *               reduce using rule 100 (constant -> FALSE seen_false .)
    -               reduce using rule 100 (constant -> FALSE seen_false .)
    +               reduce using rule 100 (constant -> FALSE seen_false .)
    <               reduce using rule 100 (constant -> FALSE seen_false .)
    >               reduce using rule 100 (constant -> FALSE seen_false .)
    DIFF            reduce using rule 100 (constant -> FALSE seen_false .)
    EQ              reduce using rule 100 (constant -> FALSE seen_false .)
    LTEQ            reduce using rule 100 (constant -> FALSE seen_false .)
    GTEQ            reduce using rule 100 (constant -> FALSE seen_false .)
    AND             reduce using rule 100 (constant -> FALSE seen_false .)
    OR              reduce using rule 100 (constant -> FALSE seen_false .)
    ;               reduce using rule 100 (constant -> FALSE seen_false .)
    )               reduce using rule 100 (constant -> FALSE seen_false .)
    ,               reduce using rule 100 (constant -> FALSE seen_false .)
    ]               reduce using rule 100 (constant -> FALSE seen_false .)


state 172

    (99) constant -> TRUE seen_true .

    /               reduce using rule 99 (constant -> TRUE seen_true .)
    *               reduce using rule 99 (constant -> TRUE seen_true .)
    -               reduce using rule 99 (constant -> TRUE seen_true .)
    +               reduce using rule 99 (constant -> TRUE seen_true .)
    <               reduce using rule 99 (constant -> TRUE seen_true .)
    >               reduce using rule 99 (constant -> TRUE seen_true .)
    DIFF            reduce using rule 99 (constant -> TRUE seen_true .)
    EQ              reduce using rule 99 (constant -> TRUE seen_true .)
    LTEQ            reduce using rule 99 (constant -> TRUE seen_true .)
    GTEQ            reduce using rule 99 (constant -> TRUE seen_true .)
    AND             reduce using rule 99 (constant -> TRUE seen_true .)
    OR              reduce using rule 99 (constant -> TRUE seen_true .)
    ;               reduce using rule 99 (constant -> TRUE seen_true .)
    )               reduce using rule 99 (constant -> TRUE seen_true .)
    ,               reduce using rule 99 (constant -> TRUE seen_true .)
    ]               reduce using rule 99 (constant -> TRUE seen_true .)


state 173

    (84) factor -> ( seen_parentheses hyperexpression . )

    )               shift and go to state 214


state 174

    (81) termB -> * . push_operator term
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 215

state 175

    (78) term -> factor seen_factor termB .

    -               reduce using rule 78 (term -> factor seen_factor termB .)
    +               reduce using rule 78 (term -> factor seen_factor termB .)
    <               reduce using rule 78 (term -> factor seen_factor termB .)
    >               reduce using rule 78 (term -> factor seen_factor termB .)
    DIFF            reduce using rule 78 (term -> factor seen_factor termB .)
    EQ              reduce using rule 78 (term -> factor seen_factor termB .)
    LTEQ            reduce using rule 78 (term -> factor seen_factor termB .)
    GTEQ            reduce using rule 78 (term -> factor seen_factor termB .)
    AND             reduce using rule 78 (term -> factor seen_factor termB .)
    OR              reduce using rule 78 (term -> factor seen_factor termB .)
    )               reduce using rule 78 (term -> factor seen_factor termB .)
    ,               reduce using rule 78 (term -> factor seen_factor termB .)
    ;               reduce using rule 78 (term -> factor seen_factor termB .)
    ]               reduce using rule 78 (term -> factor seen_factor termB .)


state 176

    (82) termB -> empty .

    -               reduce using rule 82 (termB -> empty .)
    +               reduce using rule 82 (termB -> empty .)
    <               reduce using rule 82 (termB -> empty .)
    >               reduce using rule 82 (termB -> empty .)
    DIFF            reduce using rule 82 (termB -> empty .)
    EQ              reduce using rule 82 (termB -> empty .)
    LTEQ            reduce using rule 82 (termB -> empty .)
    GTEQ            reduce using rule 82 (termB -> empty .)
    AND             reduce using rule 82 (termB -> empty .)
    OR              reduce using rule 82 (termB -> empty .)
    ;               reduce using rule 82 (termB -> empty .)
    )               reduce using rule 82 (termB -> empty .)
    ,               reduce using rule 82 (termB -> empty .)
    ]               reduce using rule 82 (termB -> empty .)


state 177

    (80) termB -> / . push_operator term
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 216

state 178

    (60) hyperexpressionB -> OR push_operator . hyperexpression
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 217
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 179

    (126) funccall -> ID ( funccallB . funccallC
    (129) funccallC -> . , funccallB funccallC
    (130) funccallC -> . )

    ,               shift and go to state 204
    )               shift and go to state 203

    funccallC                      shift and go to state 218

state 180

    (86) factor -> ID seen_ID dimensionsOpt .

    /               reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    *               reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    -               reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    +               reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    <               reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    >               reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    DIFF            reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    EQ              reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    LTEQ            reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    GTEQ            reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    AND             reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    OR              reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    ,               reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    ;               reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    )               reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)
    ]               reduce using rule 86 (factor -> ID seen_ID dimensionsOpt .)


state 181

    (76) expB -> + . push_operator exp
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 219

state 182

    (75) expB -> - . push_operator exp
    (22) push_operator -> .

    (               reduce using rule 22 (push_operator -> .)
    ID              reduce using rule 22 (push_operator -> .)
    +               reduce using rule 22 (push_operator -> .)
    -               reduce using rule 22 (push_operator -> .)
    FCONST          reduce using rule 22 (push_operator -> .)
    ICONST          reduce using rule 22 (push_operator -> .)
    SCONST          reduce using rule 22 (push_operator -> .)
    TRUE            reduce using rule 22 (push_operator -> .)
    FALSE           reduce using rule 22 (push_operator -> .)

    push_operator                  shift and go to state 220

state 183

    (73) exp -> term seen_term expB .

    AND             reduce using rule 73 (exp -> term seen_term expB .)
    OR              reduce using rule 73 (exp -> term seen_term expB .)
    ;               reduce using rule 73 (exp -> term seen_term expB .)
    )               reduce using rule 73 (exp -> term seen_term expB .)
    ,               reduce using rule 73 (exp -> term seen_term expB .)
    ]               reduce using rule 73 (exp -> term seen_term expB .)
    <               reduce using rule 73 (exp -> term seen_term expB .)
    >               reduce using rule 73 (exp -> term seen_term expB .)
    DIFF            reduce using rule 73 (exp -> term seen_term expB .)
    EQ              reduce using rule 73 (exp -> term seen_term expB .)
    LTEQ            reduce using rule 73 (exp -> term seen_term expB .)
    GTEQ            reduce using rule 73 (exp -> term seen_term expB .)


state 184

    (77) expB -> empty .

    <               reduce using rule 77 (expB -> empty .)
    >               reduce using rule 77 (expB -> empty .)
    DIFF            reduce using rule 77 (expB -> empty .)
    EQ              reduce using rule 77 (expB -> empty .)
    LTEQ            reduce using rule 77 (expB -> empty .)
    GTEQ            reduce using rule 77 (expB -> empty .)
    AND             reduce using rule 77 (expB -> empty .)
    OR              reduce using rule 77 (expB -> empty .)
    ;               reduce using rule 77 (expB -> empty .)
    )               reduce using rule 77 (expB -> empty .)
    ,               reduce using rule 77 (expB -> empty .)
    ]               reduce using rule 77 (expB -> empty .)


state 185

    (71) expressionB -> GTEQ push_operator . exp
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 221
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 186

    (70) expressionB -> LTEQ push_operator . exp
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 222
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 187

    (68) expressionB -> DIFF push_operator . exp
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 223
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 188

    (69) expressionB -> EQ push_operator . exp
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 224
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 189

    (66) expressionB -> < push_operator . exp
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 225
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 190

    (67) expressionB -> > push_operator . exp
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 226
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 191

    (63) superexpressionB -> AND push_operator . superexpression
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 227
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 192

    (103) whileloop -> WHILE ( hyperexpression ) . block
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 228

state 193

    (117) outputC -> ) .

    ;               reduce using rule 117 (outputC -> ) .)


state 194

    (115) outputB -> SCONST outputC .

    ;               reduce using rule 115 (outputB -> SCONST outputC .)


state 195

    (118) outputC -> , . outputB
    (115) outputB -> . SCONST outputC
    (116) outputB -> . hyperexpression outputC
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

  ! shift/reduce conflict for SCONST resolved as shift
    SCONST          shift and go to state 148
    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

  ! SCONST          [ reduce using rule 138 (empty -> .) ]

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 149
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    outputB                        shift and go to state 229
    expression                     shift and go to state 94

state 196

    (116) outputB -> hyperexpression outputC .

    ;               reduce using rule 116 (outputB -> hyperexpression outputC .)


state 197

    (37) assign -> ID dimensionsOpt . = hyperexpression

    =               shift and go to state 230


state 198

    (110) forloop -> FOR ( assign ; . hyperexpression ; hyperexpression ) block
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 231
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 199

    (112) inputB -> , . ID inputB

    ID              shift and go to state 232


state 200

    (111) input -> INPUT ( ID inputB . )

    )               shift and go to state 233


state 201

    (113) inputB -> empty .

    )               reduce using rule 113 (inputB -> empty .)


state 202

    (54) assignfunccallB -> ( funccallB funccallC .

    ;               reduce using rule 54 (assignfunccallB -> ( funccallB funccallC .)


state 203

    (130) funccallC -> ) .

    /               reduce using rule 130 (funccallC -> ) .)
    *               reduce using rule 130 (funccallC -> ) .)
    -               reduce using rule 130 (funccallC -> ) .)
    +               reduce using rule 130 (funccallC -> ) .)
    <               reduce using rule 130 (funccallC -> ) .)
    >               reduce using rule 130 (funccallC -> ) .)
    DIFF            reduce using rule 130 (funccallC -> ) .)
    EQ              reduce using rule 130 (funccallC -> ) .)
    LTEQ            reduce using rule 130 (funccallC -> ) .)
    GTEQ            reduce using rule 130 (funccallC -> ) .)
    AND             reduce using rule 130 (funccallC -> ) .)
    OR              reduce using rule 130 (funccallC -> ) .)
    ;               reduce using rule 130 (funccallC -> ) .)
    )               reduce using rule 130 (funccallC -> ) .)
    ,               reduce using rule 130 (funccallC -> ) .)
    ]               reduce using rule 130 (funccallC -> ) .)


state 204

    (129) funccallC -> , . funccallB funccallC
    (127) funccallB -> . hyperexpression
    (128) funccallB -> . empty
    (59) hyperexpression -> . superexpression hyperexpressionB
    (138) empty -> .
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -

    ,               reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)
    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84

    funccallB                      shift and go to state 234
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 157
    factor                         shift and go to state 86
    empty                          shift and go to state 158
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    sign                           shift and go to state 90
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 205

    (131) dimensions -> [ hyperexpression ] . dimensionsB
    (132) dimensionsB -> . [ hyperexpression ]
    (133) dimensionsB -> . empty
    (138) empty -> .

    [               shift and go to state 236
    =               reduce using rule 138 (empty -> .)
    ,               reduce using rule 138 (empty -> .)
    ;               reduce using rule 138 (empty -> .)
    /               reduce using rule 138 (empty -> .)
    *               reduce using rule 138 (empty -> .)
    -               reduce using rule 138 (empty -> .)
    +               reduce using rule 138 (empty -> .)
    <               reduce using rule 138 (empty -> .)
    >               reduce using rule 138 (empty -> .)
    DIFF            reduce using rule 138 (empty -> .)
    EQ              reduce using rule 138 (empty -> .)
    LTEQ            reduce using rule 138 (empty -> .)
    GTEQ            reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    )               reduce using rule 138 (empty -> .)
    ]               reduce using rule 138 (empty -> .)

    dimensionsB                    shift and go to state 235
    empty                          shift and go to state 237

state 206

    (38) assignB -> dimensionsOpt = hyperexpression .

    ;               reduce using rule 38 (assignB -> dimensionsOpt = hyperexpression .)


state 207

    (41) condition -> IF ( hyperexpression ) . block else
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 238

state 208

    (31) func -> DEF returntype ID ( paramsOpt ) .

    {               reduce using rule 31 (func -> DEF returntype ID ( paramsOpt ) .)


state 209

    (32) paramsOpt -> params paramsB .

    )               reduce using rule 32 (paramsOpt -> params paramsB .)


state 210

    (136) paramsB -> , . params paramsB
    (135) params -> . type ID
    (104) type -> . INT
    (105) type -> . FLOAT
    (106) type -> . STRING
    (107) type -> . BOOL

    INT             shift and go to state 15
    FLOAT           shift and go to state 17
    STRING          shift and go to state 14
    BOOL            shift and go to state 18

    type                           shift and go to state 165
    params                         shift and go to state 239

state 211

    (137) paramsB -> empty .

    )               reduce using rule 137 (paramsB -> empty .)


state 212

    (135) params -> type ID .

    ,               reduce using rule 135 (params -> type ID .)
    )               reduce using rule 135 (params -> type ID .)


state 213

    (24) declarationC -> = push_operator hyperexpression quadruple_assign . declarationD
    (27) declarationD -> . , declarationB declarationC
    (28) declarationD -> . ;

    ,               shift and go to state 240
    ;               shift and go to state 241

    declarationD                   shift and go to state 242

state 214

    (84) factor -> ( seen_parentheses hyperexpression ) .

    /               reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    *               reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    -               reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    +               reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    <               reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    >               reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    DIFF            reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    EQ              reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    LTEQ            reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    GTEQ            reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    AND             reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    OR              reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    ,               reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    ;               reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    )               reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)
    ]               reduce using rule 84 (factor -> ( seen_parentheses hyperexpression ) .)


state 215

    (81) termB -> * push_operator . term
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    term                           shift and go to state 243
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 216

    (80) termB -> / push_operator . term
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    term                           shift and go to state 244
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 217

    (60) hyperexpressionB -> OR push_operator hyperexpression .

    ;               reduce using rule 60 (hyperexpressionB -> OR push_operator hyperexpression .)
    )               reduce using rule 60 (hyperexpressionB -> OR push_operator hyperexpression .)
    ,               reduce using rule 60 (hyperexpressionB -> OR push_operator hyperexpression .)
    ]               reduce using rule 60 (hyperexpressionB -> OR push_operator hyperexpression .)


state 218

    (126) funccall -> ID ( funccallB funccallC .

    /               reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    *               reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    -               reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    +               reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    <               reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    >               reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    DIFF            reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    EQ              reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    LTEQ            reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    GTEQ            reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    AND             reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    OR              reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    ;               reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    )               reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    ,               reduce using rule 126 (funccall -> ID ( funccallB funccallC .)
    ]               reduce using rule 126 (funccall -> ID ( funccallB funccallC .)


state 219

    (76) expB -> + push_operator . exp
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 245
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 220

    (75) expB -> - push_operator . exp
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    term                           shift and go to state 92
    funccall                       shift and go to state 88
    signB                          shift and go to state 81
    sign                           shift and go to state 90
    exp                            shift and go to state 246
    factor                         shift and go to state 86
    empty                          shift and go to state 87

state 221

    (71) expressionB -> GTEQ push_operator exp .

    AND             reduce using rule 71 (expressionB -> GTEQ push_operator exp .)
    OR              reduce using rule 71 (expressionB -> GTEQ push_operator exp .)
    ;               reduce using rule 71 (expressionB -> GTEQ push_operator exp .)
    )               reduce using rule 71 (expressionB -> GTEQ push_operator exp .)
    ,               reduce using rule 71 (expressionB -> GTEQ push_operator exp .)
    ]               reduce using rule 71 (expressionB -> GTEQ push_operator exp .)


state 222

    (70) expressionB -> LTEQ push_operator exp .

    AND             reduce using rule 70 (expressionB -> LTEQ push_operator exp .)
    OR              reduce using rule 70 (expressionB -> LTEQ push_operator exp .)
    ;               reduce using rule 70 (expressionB -> LTEQ push_operator exp .)
    )               reduce using rule 70 (expressionB -> LTEQ push_operator exp .)
    ,               reduce using rule 70 (expressionB -> LTEQ push_operator exp .)
    ]               reduce using rule 70 (expressionB -> LTEQ push_operator exp .)


state 223

    (68) expressionB -> DIFF push_operator exp .

    AND             reduce using rule 68 (expressionB -> DIFF push_operator exp .)
    OR              reduce using rule 68 (expressionB -> DIFF push_operator exp .)
    ;               reduce using rule 68 (expressionB -> DIFF push_operator exp .)
    )               reduce using rule 68 (expressionB -> DIFF push_operator exp .)
    ,               reduce using rule 68 (expressionB -> DIFF push_operator exp .)
    ]               reduce using rule 68 (expressionB -> DIFF push_operator exp .)


state 224

    (69) expressionB -> EQ push_operator exp .

    AND             reduce using rule 69 (expressionB -> EQ push_operator exp .)
    OR              reduce using rule 69 (expressionB -> EQ push_operator exp .)
    ;               reduce using rule 69 (expressionB -> EQ push_operator exp .)
    )               reduce using rule 69 (expressionB -> EQ push_operator exp .)
    ,               reduce using rule 69 (expressionB -> EQ push_operator exp .)
    ]               reduce using rule 69 (expressionB -> EQ push_operator exp .)


state 225

    (66) expressionB -> < push_operator exp .

    AND             reduce using rule 66 (expressionB -> < push_operator exp .)
    OR              reduce using rule 66 (expressionB -> < push_operator exp .)
    ;               reduce using rule 66 (expressionB -> < push_operator exp .)
    )               reduce using rule 66 (expressionB -> < push_operator exp .)
    ,               reduce using rule 66 (expressionB -> < push_operator exp .)
    ]               reduce using rule 66 (expressionB -> < push_operator exp .)


state 226

    (67) expressionB -> > push_operator exp .

    AND             reduce using rule 67 (expressionB -> > push_operator exp .)
    OR              reduce using rule 67 (expressionB -> > push_operator exp .)
    ;               reduce using rule 67 (expressionB -> > push_operator exp .)
    )               reduce using rule 67 (expressionB -> > push_operator exp .)
    ,               reduce using rule 67 (expressionB -> > push_operator exp .)
    ]               reduce using rule 67 (expressionB -> > push_operator exp .)


state 227

    (63) superexpressionB -> AND push_operator superexpression .

    OR              reduce using rule 63 (superexpressionB -> AND push_operator superexpression .)
    ;               reduce using rule 63 (superexpressionB -> AND push_operator superexpression .)
    )               reduce using rule 63 (superexpressionB -> AND push_operator superexpression .)
    ,               reduce using rule 63 (superexpressionB -> AND push_operator superexpression .)
    ]               reduce using rule 63 (superexpressionB -> AND push_operator superexpression .)


state 228

    (103) whileloop -> WHILE ( hyperexpression ) block .

    ID              reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    PRINT           reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    RETURN          reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    INPUT           reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    IF              reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    WHILE           reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    FOR             reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    INT             reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    FLOAT           reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    STRING          reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    BOOL            reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    #               reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    TRACKDECISION   reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    FORGETDECISION  reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)
    }               reduce using rule 103 (whileloop -> WHILE ( hyperexpression ) block .)


state 229

    (118) outputC -> , outputB .

    ;               reduce using rule 118 (outputC -> , outputB .)


state 230

    (37) assign -> ID dimensionsOpt = . hyperexpression
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 247
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 231

    (110) forloop -> FOR ( assign ; hyperexpression . ; hyperexpression ) block

    ;               shift and go to state 248


state 232

    (112) inputB -> , ID . inputB
    (112) inputB -> . , ID inputB
    (113) inputB -> . empty
    (138) empty -> .

    ,               shift and go to state 199
    )               reduce using rule 138 (empty -> .)

    inputB                         shift and go to state 249
    empty                          shift and go to state 201

state 233

    (111) input -> INPUT ( ID inputB ) .

    ;               reduce using rule 111 (input -> INPUT ( ID inputB ) .)


state 234

    (129) funccallC -> , funccallB . funccallC
    (129) funccallC -> . , funccallB funccallC
    (130) funccallC -> . )

    ,               shift and go to state 204
    )               shift and go to state 203

    funccallC                      shift and go to state 250

state 235

    (131) dimensions -> [ hyperexpression ] dimensionsB .

    =               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    ,               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    ;               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    /               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    *               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    -               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    +               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    <               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    >               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    DIFF            reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    EQ              reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    LTEQ            reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    GTEQ            reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    AND             reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    OR              reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    )               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)
    ]               reduce using rule 131 (dimensions -> [ hyperexpression ] dimensionsB .)


state 236

    (132) dimensionsB -> [ . hyperexpression ]
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 251
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 237

    (133) dimensionsB -> empty .

    =               reduce using rule 133 (dimensionsB -> empty .)
    ,               reduce using rule 133 (dimensionsB -> empty .)
    ;               reduce using rule 133 (dimensionsB -> empty .)
    /               reduce using rule 133 (dimensionsB -> empty .)
    *               reduce using rule 133 (dimensionsB -> empty .)
    -               reduce using rule 133 (dimensionsB -> empty .)
    +               reduce using rule 133 (dimensionsB -> empty .)
    <               reduce using rule 133 (dimensionsB -> empty .)
    >               reduce using rule 133 (dimensionsB -> empty .)
    DIFF            reduce using rule 133 (dimensionsB -> empty .)
    EQ              reduce using rule 133 (dimensionsB -> empty .)
    LTEQ            reduce using rule 133 (dimensionsB -> empty .)
    GTEQ            reduce using rule 133 (dimensionsB -> empty .)
    AND             reduce using rule 133 (dimensionsB -> empty .)
    OR              reduce using rule 133 (dimensionsB -> empty .)
    )               reduce using rule 133 (dimensionsB -> empty .)
    ]               reduce using rule 133 (dimensionsB -> empty .)


state 238

    (41) condition -> IF ( hyperexpression ) block . else
    (42) else -> . ELSE block
    (43) else -> . empty
    (138) empty -> .

    ELSE            shift and go to state 252
    ID              reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    INPUT           reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    STRING          reduce using rule 138 (empty -> .)
    BOOL            reduce using rule 138 (empty -> .)
    #               reduce using rule 138 (empty -> .)
    TRACKDECISION   reduce using rule 138 (empty -> .)
    FORGETDECISION  reduce using rule 138 (empty -> .)
    }               reduce using rule 138 (empty -> .)

    else                           shift and go to state 253
    empty                          shift and go to state 254

state 239

    (136) paramsB -> , params . paramsB
    (136) paramsB -> . , params paramsB
    (137) paramsB -> . empty
    (138) empty -> .

    ,               shift and go to state 210
    )               reduce using rule 138 (empty -> .)

    paramsB                        shift and go to state 255
    empty                          shift and go to state 211

state 240

    (27) declarationD -> , . declarationB declarationC
    (19) declarationB -> . ID push_operand dimensionsOpt

    ID              shift and go to state 45

    declarationB                   shift and go to state 256

state 241

    (28) declarationD -> ; .

    INT             reduce using rule 28 (declarationD -> ; .)
    FLOAT           reduce using rule 28 (declarationD -> ; .)
    STRING          reduce using rule 28 (declarationD -> ; .)
    BOOL            reduce using rule 28 (declarationD -> ; .)
    DEF             reduce using rule 28 (declarationD -> ; .)
    MAIN            reduce using rule 28 (declarationD -> ; .)
    ID              reduce using rule 28 (declarationD -> ; .)
    PRINT           reduce using rule 28 (declarationD -> ; .)
    RETURN          reduce using rule 28 (declarationD -> ; .)
    INPUT           reduce using rule 28 (declarationD -> ; .)
    IF              reduce using rule 28 (declarationD -> ; .)
    WHILE           reduce using rule 28 (declarationD -> ; .)
    FOR             reduce using rule 28 (declarationD -> ; .)
    #               reduce using rule 28 (declarationD -> ; .)
    TRACKDECISION   reduce using rule 28 (declarationD -> ; .)
    FORGETDECISION  reduce using rule 28 (declarationD -> ; .)
    }               reduce using rule 28 (declarationD -> ; .)


state 242

    (24) declarationC -> = push_operator hyperexpression quadruple_assign declarationD .

    INT             reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FLOAT           reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    STRING          reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    BOOL            reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    DEF             reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    MAIN            reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    ID              reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    PRINT           reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    RETURN          reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    INPUT           reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    IF              reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    WHILE           reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FOR             reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    #               reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    TRACKDECISION   reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    FORGETDECISION  reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)
    }               reduce using rule 24 (declarationC -> = push_operator hyperexpression quadruple_assign declarationD .)


state 243

    (81) termB -> * push_operator term .

    -               reduce using rule 81 (termB -> * push_operator term .)
    +               reduce using rule 81 (termB -> * push_operator term .)
    <               reduce using rule 81 (termB -> * push_operator term .)
    >               reduce using rule 81 (termB -> * push_operator term .)
    DIFF            reduce using rule 81 (termB -> * push_operator term .)
    EQ              reduce using rule 81 (termB -> * push_operator term .)
    LTEQ            reduce using rule 81 (termB -> * push_operator term .)
    GTEQ            reduce using rule 81 (termB -> * push_operator term .)
    AND             reduce using rule 81 (termB -> * push_operator term .)
    OR              reduce using rule 81 (termB -> * push_operator term .)
    ;               reduce using rule 81 (termB -> * push_operator term .)
    )               reduce using rule 81 (termB -> * push_operator term .)
    ,               reduce using rule 81 (termB -> * push_operator term .)
    ]               reduce using rule 81 (termB -> * push_operator term .)


state 244

    (80) termB -> / push_operator term .

    -               reduce using rule 80 (termB -> / push_operator term .)
    +               reduce using rule 80 (termB -> / push_operator term .)
    <               reduce using rule 80 (termB -> / push_operator term .)
    >               reduce using rule 80 (termB -> / push_operator term .)
    DIFF            reduce using rule 80 (termB -> / push_operator term .)
    EQ              reduce using rule 80 (termB -> / push_operator term .)
    LTEQ            reduce using rule 80 (termB -> / push_operator term .)
    GTEQ            reduce using rule 80 (termB -> / push_operator term .)
    AND             reduce using rule 80 (termB -> / push_operator term .)
    OR              reduce using rule 80 (termB -> / push_operator term .)
    ;               reduce using rule 80 (termB -> / push_operator term .)
    )               reduce using rule 80 (termB -> / push_operator term .)
    ,               reduce using rule 80 (termB -> / push_operator term .)
    ]               reduce using rule 80 (termB -> / push_operator term .)


state 245

    (76) expB -> + push_operator exp .

    <               reduce using rule 76 (expB -> + push_operator exp .)
    >               reduce using rule 76 (expB -> + push_operator exp .)
    DIFF            reduce using rule 76 (expB -> + push_operator exp .)
    EQ              reduce using rule 76 (expB -> + push_operator exp .)
    LTEQ            reduce using rule 76 (expB -> + push_operator exp .)
    GTEQ            reduce using rule 76 (expB -> + push_operator exp .)
    AND             reduce using rule 76 (expB -> + push_operator exp .)
    OR              reduce using rule 76 (expB -> + push_operator exp .)
    ;               reduce using rule 76 (expB -> + push_operator exp .)
    )               reduce using rule 76 (expB -> + push_operator exp .)
    ,               reduce using rule 76 (expB -> + push_operator exp .)
    ]               reduce using rule 76 (expB -> + push_operator exp .)


state 246

    (75) expB -> - push_operator exp .

    <               reduce using rule 75 (expB -> - push_operator exp .)
    >               reduce using rule 75 (expB -> - push_operator exp .)
    DIFF            reduce using rule 75 (expB -> - push_operator exp .)
    EQ              reduce using rule 75 (expB -> - push_operator exp .)
    LTEQ            reduce using rule 75 (expB -> - push_operator exp .)
    GTEQ            reduce using rule 75 (expB -> - push_operator exp .)
    AND             reduce using rule 75 (expB -> - push_operator exp .)
    OR              reduce using rule 75 (expB -> - push_operator exp .)
    ;               reduce using rule 75 (expB -> - push_operator exp .)
    )               reduce using rule 75 (expB -> - push_operator exp .)
    ,               reduce using rule 75 (expB -> - push_operator exp .)
    ]               reduce using rule 75 (expB -> - push_operator exp .)


state 247

    (37) assign -> ID dimensionsOpt = hyperexpression .

    ;               reduce using rule 37 (assign -> ID dimensionsOpt = hyperexpression .)


state 248

    (110) forloop -> FOR ( assign ; hyperexpression ; . hyperexpression ) block
    (59) hyperexpression -> . superexpression hyperexpressionB
    (62) superexpression -> . expression superexpressionB
    (65) expression -> . exp expressionB
    (73) exp -> . term seen_term expB
    (78) term -> . factor seen_factor termB
    (83) factor -> . signB constant
    (84) factor -> . ( seen_parentheses hyperexpression )
    (85) factor -> . funccall
    (86) factor -> . ID seen_ID dimensionsOpt
    (89) signB -> . sign
    (90) signB -> . empty
    (126) funccall -> . ID ( funccallB funccallC
    (101) sign -> . +
    (102) sign -> . -
    (138) empty -> .

    (               shift and go to state 82
    ID              shift and go to state 91
    +               shift and go to state 83
    -               shift and go to state 84
    FCONST          reduce using rule 138 (empty -> .)
    ICONST          reduce using rule 138 (empty -> .)
    SCONST          reduce using rule 138 (empty -> .)
    TRUE            reduce using rule 138 (empty -> .)
    FALSE           reduce using rule 138 (empty -> .)

    sign                           shift and go to state 90
    signB                          shift and go to state 81
    hyperexpression                shift and go to state 257
    factor                         shift and go to state 86
    empty                          shift and go to state 87
    funccall                       shift and go to state 88
    superexpression                shift and go to state 89
    term                           shift and go to state 92
    exp                            shift and go to state 93
    expression                     shift and go to state 94

state 249

    (112) inputB -> , ID inputB .

    )               reduce using rule 112 (inputB -> , ID inputB .)


state 250

    (129) funccallC -> , funccallB funccallC .

    /               reduce using rule 129 (funccallC -> , funccallB funccallC .)
    *               reduce using rule 129 (funccallC -> , funccallB funccallC .)
    -               reduce using rule 129 (funccallC -> , funccallB funccallC .)
    +               reduce using rule 129 (funccallC -> , funccallB funccallC .)
    <               reduce using rule 129 (funccallC -> , funccallB funccallC .)
    >               reduce using rule 129 (funccallC -> , funccallB funccallC .)
    DIFF            reduce using rule 129 (funccallC -> , funccallB funccallC .)
    EQ              reduce using rule 129 (funccallC -> , funccallB funccallC .)
    LTEQ            reduce using rule 129 (funccallC -> , funccallB funccallC .)
    GTEQ            reduce using rule 129 (funccallC -> , funccallB funccallC .)
    AND             reduce using rule 129 (funccallC -> , funccallB funccallC .)
    OR              reduce using rule 129 (funccallC -> , funccallB funccallC .)
    ;               reduce using rule 129 (funccallC -> , funccallB funccallC .)
    )               reduce using rule 129 (funccallC -> , funccallB funccallC .)
    ,               reduce using rule 129 (funccallC -> , funccallB funccallC .)
    ]               reduce using rule 129 (funccallC -> , funccallB funccallC .)


state 251

    (132) dimensionsB -> [ hyperexpression . ]

    ]               shift and go to state 258


state 252

    (42) else -> ELSE . block
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 259

state 253

    (41) condition -> IF ( hyperexpression ) block else .

    ID              reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    PRINT           reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    RETURN          reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    INPUT           reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    IF              reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    WHILE           reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    FOR             reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    INT             reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    FLOAT           reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    STRING          reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    BOOL            reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    #               reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    TRACKDECISION   reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    FORGETDECISION  reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)
    }               reduce using rule 41 (condition -> IF ( hyperexpression ) block else .)


state 254

    (43) else -> empty .

    ID              reduce using rule 43 (else -> empty .)
    PRINT           reduce using rule 43 (else -> empty .)
    RETURN          reduce using rule 43 (else -> empty .)
    INPUT           reduce using rule 43 (else -> empty .)
    IF              reduce using rule 43 (else -> empty .)
    WHILE           reduce using rule 43 (else -> empty .)
    FOR             reduce using rule 43 (else -> empty .)
    INT             reduce using rule 43 (else -> empty .)
    FLOAT           reduce using rule 43 (else -> empty .)
    STRING          reduce using rule 43 (else -> empty .)
    BOOL            reduce using rule 43 (else -> empty .)
    #               reduce using rule 43 (else -> empty .)
    TRACKDECISION   reduce using rule 43 (else -> empty .)
    FORGETDECISION  reduce using rule 43 (else -> empty .)
    }               reduce using rule 43 (else -> empty .)


state 255

    (136) paramsB -> , params paramsB .

    )               reduce using rule 136 (paramsB -> , params paramsB .)


state 256

    (27) declarationD -> , declarationB . declarationC
    (24) declarationC -> . = push_operator hyperexpression quadruple_assign declarationD
    (25) declarationC -> . , declarationB declarationC
    (26) declarationC -> . ;

    =               shift and go to state 79
    ,               shift and go to state 76
    ;               shift and go to state 77

    declarationC                   shift and go to state 260

state 257

    (110) forloop -> FOR ( assign ; hyperexpression ; hyperexpression . ) block

    )               shift and go to state 261


state 258

    (132) dimensionsB -> [ hyperexpression ] .

    =               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    ,               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    ;               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    /               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    *               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    -               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    +               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    <               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    >               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    DIFF            reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    EQ              reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    LTEQ            reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    GTEQ            reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    AND             reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    OR              reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    )               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)
    ]               reduce using rule 132 (dimensionsB -> [ hyperexpression ] .)


state 259

    (42) else -> ELSE block .

    ID              reduce using rule 42 (else -> ELSE block .)
    PRINT           reduce using rule 42 (else -> ELSE block .)
    RETURN          reduce using rule 42 (else -> ELSE block .)
    INPUT           reduce using rule 42 (else -> ELSE block .)
    IF              reduce using rule 42 (else -> ELSE block .)
    WHILE           reduce using rule 42 (else -> ELSE block .)
    FOR             reduce using rule 42 (else -> ELSE block .)
    INT             reduce using rule 42 (else -> ELSE block .)
    FLOAT           reduce using rule 42 (else -> ELSE block .)
    STRING          reduce using rule 42 (else -> ELSE block .)
    BOOL            reduce using rule 42 (else -> ELSE block .)
    #               reduce using rule 42 (else -> ELSE block .)
    TRACKDECISION   reduce using rule 42 (else -> ELSE block .)
    FORGETDECISION  reduce using rule 42 (else -> ELSE block .)
    }               reduce using rule 42 (else -> ELSE block .)


state 260

    (27) declarationD -> , declarationB declarationC .

    INT             reduce using rule 27 (declarationD -> , declarationB declarationC .)
    FLOAT           reduce using rule 27 (declarationD -> , declarationB declarationC .)
    STRING          reduce using rule 27 (declarationD -> , declarationB declarationC .)
    BOOL            reduce using rule 27 (declarationD -> , declarationB declarationC .)
    DEF             reduce using rule 27 (declarationD -> , declarationB declarationC .)
    MAIN            reduce using rule 27 (declarationD -> , declarationB declarationC .)
    ID              reduce using rule 27 (declarationD -> , declarationB declarationC .)
    PRINT           reduce using rule 27 (declarationD -> , declarationB declarationC .)
    RETURN          reduce using rule 27 (declarationD -> , declarationB declarationC .)
    INPUT           reduce using rule 27 (declarationD -> , declarationB declarationC .)
    IF              reduce using rule 27 (declarationD -> , declarationB declarationC .)
    WHILE           reduce using rule 27 (declarationD -> , declarationB declarationC .)
    FOR             reduce using rule 27 (declarationD -> , declarationB declarationC .)
    #               reduce using rule 27 (declarationD -> , declarationB declarationC .)
    TRACKDECISION   reduce using rule 27 (declarationD -> , declarationB declarationC .)
    FORGETDECISION  reduce using rule 27 (declarationD -> , declarationB declarationC .)
    }               reduce using rule 27 (declarationD -> , declarationB declarationC .)


state 261

    (110) forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) . block
    (34) block -> . { instructionsOpt }

    {               shift and go to state 40

    block                          shift and go to state 262

state 262

    (110) forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .

    ID              reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    PRINT           reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    RETURN          reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    INPUT           reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    IF              reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    WHILE           reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    FOR             reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    INT             reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    FLOAT           reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    STRING          reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    BOOL            reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    #               reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    TRACKDECISION   reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    FORGETDECISION  reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)
    }               reduce using rule 110 (forloop -> FOR ( assign ; hyperexpression ; hyperexpression ) block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 40 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 40 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for FOR in state 40 resolved as shift
WARNING: shift/reduce conflict for INT in state 40 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 40 resolved as shift
WARNING: shift/reduce conflict for STRING in state 40 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 40 resolved as shift
WARNING: shift/reduce conflict for # in state 40 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 40 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 70 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 70 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 70 resolved as shift
WARNING: shift/reduce conflict for IF in state 70 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 70 resolved as shift
WARNING: shift/reduce conflict for FOR in state 70 resolved as shift
WARNING: shift/reduce conflict for INT in state 70 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 70 resolved as shift
WARNING: shift/reduce conflict for STRING in state 70 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 70 resolved as shift
WARNING: shift/reduce conflict for # in state 70 resolved as shift
WARNING: shift/reduce conflict for TRACKDECISION in state 70 resolved as shift
WARNING: shift/reduce conflict for FORGETDECISION in state 70 resolved as shift
WARNING: shift/reduce conflict for SCONST in state 97 resolved as shift
WARNING: shift/reduce conflict for SCONST in state 195 resolved as shift
WARNING: reduce/reduce conflict in state 58 resolved using rule (instructionsOpt -> empty)
WARNING: rejected rule (localdecisiondirective -> empty) in state 58
