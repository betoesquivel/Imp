
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x94\xd1\\\xab_\xc7\xbc\xd7t\xdcH\x19\xb2\xa8\xca\xd5'
    
_lr_action_items = {'RETURN':([16,40,61,133,144,147,149,150,153,158,160,161,165,170,178,180,181,185,188,189,195,196,197,221,235,],[-17,-115,-16,141,141,-47,-17,141,141,141,-49,-48,-30,-17,141,141,141,141,141,141,-100,-97,-101,-82,-88,]),'VARS':([1,],[6,]),'VOID':([0,2,4,5,9,15,16,23,24,27,28,29,30,31,32,33,34,35,40,61,63,96,134,135,165,],[-115,-115,-115,-3,-2,22,-17,-27,22,-8,-10,-7,-9,-4,-6,-12,-11,-5,-115,-16,22,22,-25,-26,-30,]),'SOME':([17,19,],[29,29,]),'WHILE':([16,40,61,133,144,147,149,150,153,158,160,161,165,170,178,180,181,185,188,189,195,196,197,221,235,],[-17,-115,-16,142,142,-47,-17,142,142,142,-49,-48,-30,-17,142,142,142,142,142,142,-100,-97,-101,-82,-88,]),'PRINT':([16,40,61,133,144,147,149,150,153,158,160,161,165,170,178,180,181,185,188,189,195,196,197,221,235,],[-17,-115,-16,143,143,-47,-17,143,143,143,-49,-48,-30,-17,143,143,143,143,143,143,-100,-97,-101,-82,-88,]),'{':([119,121,210,220,231,234,],[133,133,133,133,133,133,]),'TRUE':([37,46,48,49,50,51,53,56,75,76,80,82,83,88,90,107,111,113,114,116,117,118,125,141,167,168,186,204,213,215,227,],[-115,70,70,-115,-80,-81,-75,-74,-115,-115,-115,-115,-115,-115,-115,-75,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,]),'>':([38,39,52,54,57,58,59,69,70,71,72,73,77,78,79,81,84,85,88,102,103,104,105,109,110,123,],[-21,-22,-115,-72,-115,-115,90,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,114,-71,-68,-67,-110,-64,-63,-105,]),'FORGET':([145,],[176,]),'#':([0,2,16,27,28,29,30,31,32,33,34,35,40,61,133,144,147,149,150,153,158,160,161,165,170,178,180,181,185,188,189,195,196,197,221,235,],[1,1,-17,-8,-10,-7,-9,-4,-6,-12,-11,-5,-115,-16,145,145,-47,-17,145,145,145,-49,-48,-30,-17,145,145,145,145,145,145,-100,-97,-101,-82,-88,]),'FCONST':([37,46,48,49,50,51,53,56,75,76,80,82,83,88,90,107,111,113,114,116,117,118,125,141,167,168,186,204,213,215,227,],[-115,69,69,-115,-80,-81,-75,-74,-115,-115,-115,-115,-115,-115,-115,-75,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,]),'NO':([18,],[33,]),')':([38,39,52,54,57,58,59,60,64,69,70,71,72,73,74,77,78,79,80,81,84,85,86,89,92,94,95,97,98,99,102,103,104,105,106,107,108,109,110,112,115,122,123,124,126,127,128,129,130,131,132,136,137,139,164,190,191,192,193,203,206,209,217,218,224,228,232,],[-21,-22,-115,-72,-115,-115,-115,-115,-115,-76,-78,-77,-79,-70,102,-66,-69,-115,-115,-73,-62,-65,-54,-61,-50,-53,119,121,-28,-29,-71,-68,-67,-110,123,-107,-115,-64,-63,-55,-56,-115,-105,-106,-109,-58,-59,-57,-60,-51,-52,-112,-114,-115,-108,-115,210,211,211,-115,220,-113,225,-91,-115,-90,234,]),'(':([37,44,49,57,62,75,76,80,82,83,88,90,111,113,114,116,117,118,125,141,142,143,146,154,155,157,167,168,186,204,213,215,227,],[49,64,49,80,95,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,167,168,177,183,80,186,49,49,49,49,49,49,49,]),'+':([37,38,39,49,52,54,57,58,69,70,71,72,73,75,76,77,78,79,80,81,82,83,88,90,102,103,104,105,111,113,114,116,117,118,123,125,141,167,168,186,204,213,215,227,],[50,-21,-22,50,-115,-72,-115,82,-76,-78,-77,-79,-70,50,50,-66,-69,-115,50,-73,50,50,50,50,-71,-68,-67,-110,50,50,50,50,50,50,-105,50,50,50,50,50,50,50,50,50,]),'*':([38,39,52,54,57,69,70,71,72,73,79,81,102,105,123,],[-21,-22,75,-72,-115,-76,-78,-77,-79,-70,-115,-73,-71,-110,-105,]),'-':([37,38,39,49,52,54,57,58,69,70,71,72,73,75,76,77,78,79,80,81,82,83,88,90,102,103,104,105,111,113,114,116,117,118,123,125,141,167,168,186,204,213,215,227,],[51,-21,-22,51,-115,-72,-115,83,-76,-78,-77,-79,-70,51,51,-66,-69,-115,51,-73,51,51,51,51,-71,-68,-67,-110,51,51,51,51,51,51,-105,51,51,51,51,51,51,51,51,51,]),',':([20,36,38,39,45,47,52,54,57,58,59,60,68,69,70,71,72,73,77,78,79,81,84,85,86,89,92,94,102,103,104,105,108,109,110,112,115,122,123,127,128,129,130,131,132,139,190,192,193,203,224,],[-115,-115,-21,-22,65,-24,-115,-72,-115,-115,-115,-115,-23,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-54,-61,-50,-53,-71,-68,-67,-110,125,-64,-63,-55,-56,138,-105,-58,-59,-57,-60,-51,-52,125,138,213,213,216,216,]),'/':([38,39,52,54,57,69,70,71,72,73,79,81,102,105,123,],[-21,-22,76,-72,-115,-76,-78,-77,-79,-70,-115,-73,-71,-110,-105,]),';':([20,21,36,38,39,45,47,52,54,57,58,59,60,66,67,68,69,70,71,72,73,77,78,79,81,84,85,86,89,92,94,101,102,103,104,105,109,110,112,115,123,127,128,129,130,131,132,148,151,152,156,159,162,165,166,194,198,211,212,214,219,222,223,225,226,229,230,233,],[-115,40,-115,-21,-22,-115,-24,-115,-72,-115,-115,-115,-115,-18,-20,-23,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-54,-61,-50,-53,-19,-71,-68,-67,-110,-64,-63,-55,-56,-105,-58,-59,-57,-60,-51,-52,178,180,181,185,188,189,-30,-111,-92,215,-95,-93,-94,-31,-96,227,-89,-115,-32,-34,-33,]),'=':([6,7,8,20,36,38,39,52,54,57,58,59,69,70,71,72,73,77,78,79,81,84,85,87,88,90,102,103,104,105,109,110,123,155,184,199,],[17,18,19,-115,46,-21,-22,-115,-72,-115,-115,87,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,111,113,116,-71,-68,-67,-110,-64,-63,-105,-115,204,-115,]),'<':([38,39,52,54,57,58,59,69,70,71,72,73,77,78,79,81,84,85,102,103,104,105,109,110,123,],[-21,-22,-115,-72,-115,-115,88,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-71,-68,-67,-110,-64,-63,-105,]),'$end':([3,10,23,42,43,63,96,120,134,135,165,],[0,-1,-27,-14,-15,-115,-115,-13,-25,-26,-30,]),'STRING':([0,2,4,5,9,15,16,23,24,27,28,29,30,31,32,33,34,35,40,61,63,64,96,133,134,135,138,144,147,149,150,153,158,160,161,165,168,170,172,178,180,181,185,188,189,195,196,197,213,221,235,],[-115,-115,12,-3,-2,12,-17,-27,12,-8,-10,-7,-9,-4,-6,-12,-11,-5,12,-16,12,12,12,12,-25,-26,12,12,-47,-17,12,12,12,-49,-48,-30,192,-17,195,12,12,12,12,12,12,-100,-97,-101,192,-82,-88,]),'FOR':([16,40,61,133,144,147,149,150,153,158,160,161,165,170,178,180,181,185,188,189,195,196,197,221,235,],[-17,-115,-16,146,146,-47,-17,146,146,146,-49,-48,-30,-17,146,146,146,146,146,146,-100,-97,-101,-82,-88,]),'SHOW':([145,],[172,]),'NONE':([17,19,],[28,28,]),'ELSE':([165,226,],[-30,231,]),'MOST':([17,19,],[30,30,]),'ICONST':([37,46,48,49,50,51,53,56,75,76,80,82,83,88,90,107,111,113,114,116,117,118,125,141,167,168,186,204,213,215,227,],[-115,71,71,-115,-80,-81,-75,-74,-115,-115,-115,-115,-115,-115,-115,-75,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,]),'INPUT':([16,40,61,133,144,147,149,150,153,158,160,161,165,170,178,180,181,185,188,189,195,196,197,221,235,],[-17,-115,-16,154,154,-47,-17,154,154,154,-49,-48,-30,-17,154,154,154,154,154,154,-100,-97,-101,-82,-88,]),'[':([20,57,79,155,199,],[37,37,37,37,37,]),']':([38,39,52,54,55,57,58,59,60,69,70,71,72,73,77,78,79,81,84,85,86,89,92,94,102,103,104,105,109,110,112,115,123,127,128,129,130,131,132,],[-21,-22,-115,-72,79,-115,-115,-115,-115,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-54,-61,-50,-53,-71,-68,-67,-110,-64,-63,-55,-56,-105,-58,-59,-57,-60,-51,-52,]),'ID':([11,12,13,14,16,22,25,26,37,40,49,61,65,75,76,80,82,83,88,90,100,111,113,114,116,117,118,125,133,141,144,147,149,150,153,158,160,161,163,165,167,168,170,173,174,176,177,178,180,181,183,185,186,188,189,195,196,197,204,213,215,216,221,227,235,],[-84,-85,-83,20,-17,-86,44,-87,57,-115,57,-16,20,57,57,57,57,57,57,57,122,57,57,57,57,57,57,57,155,57,155,-47,-17,155,155,155,-49,-48,190,-30,57,57,-17,-98,196,-99,199,155,155,155,203,155,57,155,155,-100,-97,-101,57,57,57,224,-82,57,-88,]),'IF':([16,40,61,133,144,147,149,150,153,158,160,161,165,170,178,180,181,185,188,189,195,196,197,221,235,],[-17,-115,-16,157,157,-47,-17,157,157,157,-49,-48,-30,-17,157,157,157,157,157,157,-100,-97,-101,-82,-88,]),'&':([38,39,52,54,57,58,59,60,69,70,71,72,73,77,78,79,81,84,85,86,89,91,102,103,104,105,109,110,112,115,123,127,128,129,130,],[-21,-22,-115,-72,-115,-115,-115,91,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-54,-61,117,-71,-68,-67,-110,-64,-63,-55,-56,-105,-58,-59,-57,-60,]),'ALL':([17,19,],[27,27,]),'FALSE':([37,46,48,49,50,51,53,56,75,76,80,82,83,88,90,107,111,113,114,116,117,118,125,141,167,168,186,204,213,215,227,],[-115,72,72,-115,-80,-81,-75,-74,-115,-115,-115,-115,-115,-115,-115,-75,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,]),'INT':([0,2,4,5,9,15,16,23,24,27,28,29,30,31,32,33,34,35,40,61,63,64,96,133,134,135,138,144,147,149,150,153,158,160,161,165,170,178,180,181,185,188,189,195,196,197,221,235,],[-115,-115,13,-3,-2,13,-17,-27,13,-8,-10,-7,-9,-4,-6,-12,-11,-5,13,-16,13,13,13,13,-25,-26,13,13,-47,-17,13,13,13,-49,-48,-30,-17,13,13,13,13,13,13,-100,-97,-101,-82,-88,]),'DECISIONS':([1,],[8,]),'DECISION':([173,175,176,],[-103,197,-104,]),'FLOAT':([0,2,4,5,9,15,16,23,24,27,28,29,30,31,32,33,34,35,40,61,63,64,96,133,134,135,138,144,147,149,150,153,158,160,161,165,170,178,180,181,185,188,189,195,196,197,221,235,],[-115,-115,11,-3,-2,11,-17,-27,11,-8,-10,-7,-9,-4,-6,-12,-11,-5,11,-16,11,11,11,11,-25,-26,11,11,-47,-17,11,11,11,-49,-48,-30,-17,11,11,11,11,11,11,-100,-97,-101,-82,-88,]),'TRACK':([145,],[173,]),'COMPLEXITY':([1,],[7,]),'YES':([18,],[34,]),'MAIN':([0,2,4,5,9,15,16,23,24,27,28,29,30,31,32,33,34,35,40,41,42,43,61,135,165,],[-115,-115,-115,-3,-2,-115,-17,-27,-115,-8,-10,-7,-9,-4,-6,-12,-11,-5,-115,62,-14,-15,-16,-26,-30,]),'}':([16,40,61,133,140,144,147,149,150,153,158,160,161,165,169,170,171,178,179,180,181,182,185,187,188,189,195,196,197,200,201,202,205,207,208,221,235,],[-17,-115,-16,-115,165,-115,-47,-17,-115,-115,-115,-49,-48,-30,-45,-17,-38,-115,-39,-115,-115,-43,-115,-44,-115,-115,-100,-97,-101,-40,-42,-41,-36,-35,-37,-82,-88,]),'|':([38,39,52,54,57,58,59,60,69,70,71,72,73,77,78,79,81,84,85,86,89,93,102,103,104,105,109,110,112,115,123,127,128,129,130,],[-21,-22,-115,-72,-115,-115,-115,93,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-54,-61,118,-71,-68,-67,-110,-64,-63,-55,-56,-105,-58,-59,-57,-60,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instruction':([133,144,150,153,158,178,180,181,185,188,189,],[140,169,169,169,169,169,169,169,169,169,169,]),'constant':([46,48,],[68,73,]),'localdirective':([133,144,150,153,158,178,180,181,185,188,189,],[153,153,153,153,153,153,153,153,153,153,153,]),'sign':([37,49,75,76,80,82,83,88,90,111,113,114,116,117,118,125,141,167,168,186,204,213,215,227,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'dimensionB':([20,57,79,155,199,],[36,81,105,184,184,]),'localvardirective':([133,144,150,153,158,178,180,181,185,188,189,],[147,147,147,147,147,147,147,147,147,147,147,]),'asign':([133,144,150,153,158,177,178,180,181,185,188,189,],[159,159,159,159,159,198,159,159,159,159,159,159,]),'funccallC':([108,139,],[124,164,]),'funccallB':([80,],[106,]),'options':([17,19,],[31,35,]),'signB':([37,49,75,76,80,82,83,88,90,111,113,114,116,117,118,125,141,167,168,186,204,213,215,227,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'expressionB':([59,],[86,]),'localvardirectiveB':([145,],[174,]),'configdirective':([0,2,],[2,2,]),'inputB':([203,224,],[217,228,]),'funcB':([24,96,],[41,120,]),'program':([0,],[3,]),'params':([64,],[98,]),'factor':([37,49,75,76,80,82,83,88,90,111,113,114,116,117,118,125,141,167,168,186,204,213,215,227,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'input':([133,144,150,153,158,178,180,181,185,188,189,],[148,148,148,148,148,148,148,148,148,148,148,]),'declarationsB':([14,65,],[21,101,]),'main':([41,],[63,]),'type':([4,15,24,40,63,64,96,133,138,144,150,153,158,178,180,181,185,188,189,],[14,26,26,14,26,100,26,14,163,14,14,14,14,14,14,14,14,14,14,]),'empty':([0,2,4,15,20,24,36,37,40,45,49,52,57,58,59,60,63,64,75,76,79,80,82,83,88,90,96,108,111,113,114,116,117,118,122,125,133,139,141,144,150,153,155,158,167,168,178,180,181,185,186,188,189,190,199,203,204,213,215,224,226,227,],[5,5,16,23,39,43,47,53,16,67,53,78,39,85,89,94,23,99,53,53,39,107,53,53,53,53,43,126,53,53,53,53,53,53,137,53,149,126,53,170,170,170,39,170,53,53,170,170,170,170,53,170,170,137,39,218,53,53,53,218,230,53,]),'body':([4,],[10,]),'whileloop':([133,144,150,153,158,178,180,181,185,188,189,],[144,144,144,144,144,144,144,144,144,144,144,]),'return':([133,144,150,153,158,178,180,181,185,188,189,],[151,151,151,151,151,151,151,151,151,151,151,]),'funccall':([37,49,75,76,80,82,83,88,90,111,113,114,116,117,118,125,133,141,144,150,153,158,167,168,178,180,181,185,186,188,189,204,213,215,227,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,152,54,152,152,152,152,54,54,152,152,152,152,54,152,152,54,54,54,54,]),'else':([226,],[229,]),'superexpression':([37,49,80,117,118,125,141,167,168,186,204,213,215,227,],[55,74,108,131,132,139,166,191,193,206,219,193,223,232,]),'paramsB':([122,190,],[136,209,]),'func':([15,24,63,96,],[24,42,96,42,]),'outputC':([192,193,],[212,214,]),'returntype':([15,24,63,96,],[25,25,25,25,]),'expB':([58,],[84,]),'superexpressionB':([60,],[92,]),'condition':([133,144,150,153,158,178,180,181,185,188,189,],[156,156,156,156,156,156,156,156,156,156,156,]),'term':([37,49,75,76,80,82,83,88,90,111,113,114,116,117,118,125,141,167,168,186,204,213,215,227,],[58,58,103,104,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'declarationsC':([45,],[66,]),'optionsyesno':([18,],[32,]),'config':([0,2,],[4,9,]),'declarations':([4,40,133,144,150,153,158,178,180,181,185,188,189,],[15,61,158,158,158,158,158,158,158,158,158,158,158,]),'instructionB':([144,150,153,158,178,180,181,185,188,189,],[171,179,182,187,200,201,202,205,207,208,]),'constantB':([36,],[45,]),'optionalparams':([64,],[97,]),'localmsgdirective':([133,144,150,153,158,178,180,181,185,188,189,],[160,160,160,160,160,160,160,160,160,160,160,]),'localdecisiondirectiveB':([145,],[175,]),'localdecisiondirective':([133,144,150,153,158,178,180,181,185,188,189,],[161,161,161,161,161,161,161,161,161,161,161,]),'termB':([52,],[77,]),'exp':([37,49,80,82,83,88,90,111,113,114,116,117,118,125,141,167,168,186,204,213,215,227,],[59,59,59,109,110,112,115,127,128,129,130,59,59,59,59,59,59,59,59,59,59,59,]),'forloop':([133,144,150,153,158,178,180,181,185,188,189,],[150,150,150,150,150,150,150,150,150,150,150,]),'outputB':([168,213,],[194,222,]),'output':([133,144,150,153,158,178,180,181,185,188,189,],[162,162,162,162,162,162,162,162,162,162,162,]),'expression':([37,49,80,117,118,125,141,167,168,186,204,213,215,227,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'dimension':([20,57,79,155,199,],[38,38,38,38,38,]),'block':([119,121,210,220,231,234,],[134,135,221,226,233,235,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> config body','program',2,'p_program','scanner.py',11),
  ('config -> configdirective config','config',2,'p_config','scanner.py',15),
  ('config -> empty','config',1,'p_config','scanner.py',16),
  ('configdirective -> # VARS = options','configdirective',4,'p_configdirective','scanner.py',20),
  ('configdirective -> # DECISIONS = options','configdirective',4,'p_configdirective','scanner.py',21),
  ('configdirective -> # COMPLEXITY = optionsyesno','configdirective',4,'p_configdirective','scanner.py',22),
  ('options -> SOME','options',1,'p_options','scanner.py',25),
  ('options -> ALL','options',1,'p_options','scanner.py',26),
  ('options -> MOST','options',1,'p_options','scanner.py',27),
  ('options -> NONE','options',1,'p_options','scanner.py',28),
  ('optionsyesno -> YES','optionsyesno',1,'p_optionsyesno','scanner.py',31),
  ('optionsyesno -> NO','optionsyesno',1,'p_optionsyesno','scanner.py',32),
  ('body -> declarations func funcB main func funcB','body',6,'p_body','scanner.py',36),
  ('funcB -> func','funcB',1,'p_funcB','scanner.py',39),
  ('funcB -> empty','funcB',1,'p_funcB','scanner.py',40),
  ('declarations -> type declarationsB ; declarations','declarations',4,'p_declarations','scanner.py',44),
  ('declarations -> empty','declarations',1,'p_declarations','scanner.py',45),
  ('declarationsB -> ID dimensionB constantB declarationsC','declarationsB',4,'p_declarationsB','scanner.py',48),
  ('declarationsC -> , declarationsB','declarationsC',2,'p_declarationsC','scanner.py',51),
  ('declarationsC -> empty','declarationsC',1,'p_declarationsC','scanner.py',52),
  ('dimensionB -> dimension','dimensionB',1,'p_dimensionB','scanner.py',55),
  ('dimensionB -> empty','dimensionB',1,'p_dimensionB','scanner.py',56),
  ('constantB -> = constant','constantB',2,'p_constantB','scanner.py',59),
  ('constantB -> empty','constantB',1,'p_constantB','scanner.py',60),
  ('main -> MAIN ( ) block','main',4,'p_main','scanner.py',64),
  ('func -> returntype ID ( optionalparams ) block','func',6,'p_func','scanner.py',68),
  ('func -> empty','func',1,'p_func','scanner.py',69),
  ('optionalparams -> params','optionalparams',1,'p_optionalparams','scanner.py',72),
  ('optionalparams -> empty','optionalparams',1,'p_optionalparams','scanner.py',73),
  ('block -> { instruction }','block',3,'p_block','scanner.py',77),
  ('asign -> ID dimensionB = superexpression','asign',4,'p_asign','scanner.py',81),
  ('condition -> IF ( superexpression ) block else','condition',6,'p_condition','scanner.py',85),
  ('else -> ELSE block','else',2,'p_else','scanner.py',89),
  ('else -> empty','else',1,'p_else','scanner.py',90),
  ('instruction -> asign ; instructionB','instruction',3,'p_instruction','scanner.py',95),
  ('instruction -> condition ; instructionB','instruction',3,'p_instruction','scanner.py',96),
  ('instruction -> output ; instructionB','instruction',3,'p_instruction','scanner.py',97),
  ('instruction -> whileloop instructionB','instruction',2,'p_instruction','scanner.py',98),
  ('instruction -> forloop instructionB','instruction',2,'p_instruction','scanner.py',99),
  ('instruction -> input ; instructionB','instruction',3,'p_instruction','scanner.py',100),
  ('instruction -> funccall ; instructionB','instruction',3,'p_instruction','scanner.py',101),
  ('instruction -> return ; instructionB','instruction',3,'p_instruction','scanner.py',102),
  ('instruction -> localdirective instructionB','instruction',2,'p_instruction','scanner.py',103),
  ('instruction -> declarations instructionB','instruction',2,'p_instruction','scanner.py',104),
  ('instructionB -> instruction','instructionB',1,'p_instructionB','scanner.py',107),
  ('instructionB -> empty','instructionB',1,'p_instructionB','scanner.py',108),
  ('localdirective -> localvardirective','localdirective',1,'p_localdirective','scanner.py',112),
  ('localdirective -> localdecisiondirective','localdirective',1,'p_localdirective','scanner.py',113),
  ('localdirective -> localmsgdirective','localdirective',1,'p_localdirective','scanner.py',114),
  ('superexpression -> expression superexpressionB','superexpression',2,'p_superexpression','scanner.py',118),
  ('superexpressionB -> & & superexpression','superexpressionB',3,'p_superexpressionB','scanner.py',121),
  ('superexpressionB -> | | superexpression','superexpressionB',3,'p_superexpressionB','scanner.py',122),
  ('superexpressionB -> empty','superexpressionB',1,'p_superexpressionB','scanner.py',123),
  ('expression -> exp expressionB','expression',2,'p_expression','scanner.py',127),
  ('expressionB -> < exp','expressionB',2,'p_expressionB','scanner.py',130),
  ('expressionB -> > exp','expressionB',2,'p_expressionB','scanner.py',131),
  ('expressionB -> < > exp','expressionB',3,'p_expressionB','scanner.py',132),
  ('expressionB -> = = exp','expressionB',3,'p_expressionB','scanner.py',133),
  ('expressionB -> < = exp','expressionB',3,'p_expressionB','scanner.py',134),
  ('expressionB -> > = exp','expressionB',3,'p_expressionB','scanner.py',135),
  ('expressionB -> empty','expressionB',1,'p_expressionB','scanner.py',136),
  ('exp -> term expB','exp',2,'p_exp','scanner.py',140),
  ('expB -> - exp','expB',2,'p_expB','scanner.py',143),
  ('expB -> + exp','expB',2,'p_expB','scanner.py',144),
  ('expB -> empty','expB',1,'p_expB','scanner.py',145),
  ('term -> factor termB','term',2,'p_term','scanner.py',149),
  ('termB -> / term','termB',2,'p_termB','scanner.py',152),
  ('termB -> * term','termB',2,'p_termB','scanner.py',153),
  ('termB -> empty','termB',1,'p_termB','scanner.py',154),
  ('factor -> signB constant','factor',2,'p_factor','scanner.py',160),
  ('factor -> ( superexpression )','factor',3,'p_factor','scanner.py',161),
  ('factor -> funccall','factor',1,'p_factor','scanner.py',162),
  ('factor -> ID dimensionB','factor',2,'p_factor','scanner.py',163),
  ('signB -> sign','signB',1,'p_signB','scanner.py',166),
  ('signB -> empty','signB',1,'p_signB','scanner.py',167),
  ('constant -> FCONST','constant',1,'p_constant','scanner.py',171),
  ('constant -> ICONST','constant',1,'p_constant','scanner.py',172),
  ('constant -> TRUE','constant',1,'p_constant','scanner.py',173),
  ('constant -> FALSE','constant',1,'p_constant','scanner.py',174),
  ('sign -> +','sign',1,'p_sign','scanner.py',178),
  ('sign -> -','sign',1,'p_sign','scanner.py',179),
  ('whileloop -> WHILE ( superexpression ) block','whileloop',5,'p_whileloop','scanner.py',183),
  ('type -> INT','type',1,'p_type','scanner.py',187),
  ('type -> FLOAT','type',1,'p_type','scanner.py',188),
  ('type -> STRING','type',1,'p_type','scanner.py',189),
  ('returntype -> VOID','returntype',1,'p_returntype','scanner.py',193),
  ('returntype -> type','returntype',1,'p_returntype','scanner.py',194),
  ('forloop -> FOR ( asign ; superexpression ; superexpression ) block','forloop',9,'p_forloop','scanner.py',198),
  ('input -> INPUT ( ID inputB )','input',5,'p_input','scanner.py',202),
  ('inputB -> , ID inputB','inputB',3,'p_inputB','scanner.py',205),
  ('inputB -> empty','inputB',1,'p_inputB','scanner.py',206),
  ('output -> PRINT ( outputB','output',3,'p_output','scanner.py',209),
  ('outputB -> STRING outputC','outputB',2,'p_outputB','scanner.py',212),
  ('outputB -> superexpression outputC','outputB',2,'p_outputB','scanner.py',213),
  ('outputC -> )','outputC',1,'p_outputC','scanner.py',216),
  ('outputC -> , outputB','outputC',2,'p_outputC','scanner.py',217),
  ('localvardirective -> # localvardirectiveB ID','localvardirective',3,'p_localvardirective','scanner.py',221),
  ('localvardirectiveB -> TRACK','localvardirectiveB',1,'p_localvardirectiveB','scanner.py',224),
  ('localvardirectiveB -> FORGET','localvardirectiveB',1,'p_localvardirectiveB','scanner.py',225),
  ('localmsgdirective -> # SHOW STRING','localmsgdirective',3,'p_localmsgdirective','scanner.py',229),
  ('localdecisiondirective -> # localdecisiondirectiveB DECISION','localdecisiondirective',3,'p_localdecisiondirective','scanner.py',233),
  ('localdecisiondirective -> empty','localdecisiondirective',1,'p_localdecisiondirective','scanner.py',234),
  ('localdecisiondirectiveB -> TRACK','localdecisiondirectiveB',1,'p_localdecisiondirectiveB','scanner.py',237),
  ('localdecisiondirectiveB -> FORGET','localdecisiondirectiveB',1,'p_localdecisiondirectiveB','scanner.py',238),
  ('funccall -> ID ( funccallB )','funccall',4,'p_funccall','scanner.py',242),
  ('funccallB -> superexpression funccallC','funccallB',2,'p_funccallB','scanner.py',245),
  ('funccallB -> empty','funccallB',1,'p_funccallB','scanner.py',246),
  ('funccallC -> , superexpression funccallC','funccallC',3,'p_funccallC','scanner.py',249),
  ('funccallC -> empty','funccallC',1,'p_funccallC','scanner.py',250),
  ('dimension -> [ superexpression ] dimensionB','dimension',4,'p_dimension','scanner.py',254),
  ('return -> RETURN superexpression','return',2,'p_return','scanner.py',258),
  ('params -> type ID paramsB','params',3,'p_params','scanner.py',262),
  ('paramsB -> , type ID paramsB','paramsB',4,'p_paramsB','scanner.py',265),
  ('paramsB -> empty','paramsB',1,'p_paramsB','scanner.py',266),
  ('empty -> <empty>','empty',0,'p_empty','scanner.py',269),
]
