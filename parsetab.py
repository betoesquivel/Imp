
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xaf\xa5r\xb5Z\x1f\x0cgC\xb6\x8d\xf6\xce\xbe\xe4\x1c'
    
_lr_action_items = {'RETURN':([16,40,61,128,139,142,144,145,148,153,155,156,160,165,173,175,176,180,183,184,190,191,192,216,230,],[-17,-111,-16,136,136,-47,-17,136,136,136,-49,-48,-30,-17,136,136,136,136,136,136,-96,-93,-97,-78,-84,]),'VARS':([1,],[6,]),'VOID':([0,2,4,5,9,15,16,23,24,27,28,29,30,31,32,33,34,35,40,61,63,91,129,130,160,],[-111,-111,-111,-3,-2,22,-17,-27,22,-8,-10,-7,-9,-4,-6,-12,-11,-5,-111,-16,22,22,-25,-26,-30,]),'SOME':([17,19,],[29,29,]),'WHILE':([16,40,61,128,139,142,144,145,148,153,155,156,160,165,173,175,176,180,183,184,190,191,192,216,230,],[-17,-111,-16,137,137,-47,-17,137,137,137,-49,-48,-30,-17,137,137,137,137,137,137,-96,-93,-97,-78,-84,]),'PRINT':([16,40,61,128,139,142,144,145,148,153,155,156,160,165,173,175,176,180,183,184,190,191,192,216,230,],[-17,-111,-16,138,138,-47,-17,138,138,138,-49,-48,-30,-17,138,138,138,138,138,138,-96,-93,-97,-78,-84,]),'{':([114,116,205,215,226,229,],[128,128,128,128,128,128,]),'TRUE':([37,46,51,70,71,75,77,78,83,85,106,108,109,111,112,113,120,136,162,163,181,199,208,210,222,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'>':([38,39,48,49,50,52,53,55,56,57,58,59,72,73,74,76,79,80,83,97,98,99,100,104,105,118,],[-21,-22,-70,-76,-74,-111,-72,-75,-111,-111,-77,85,-66,-69,-111,-73,-62,-65,109,-71,-68,-67,-106,-64,-63,-101,]),'FORGET':([140,],[171,]),'#':([0,2,16,27,28,29,30,31,32,33,34,35,40,61,128,139,142,144,145,148,153,155,156,160,165,173,175,176,180,183,184,190,191,192,216,230,],[1,1,-17,-8,-10,-7,-9,-4,-6,-12,-11,-5,-111,-16,140,140,-47,-17,140,140,140,-49,-48,-30,-17,140,140,140,140,140,140,-96,-93,-97,-78,-84,]),'FCONST':([37,46,51,70,71,75,77,78,83,85,106,108,109,111,112,113,120,136,162,163,181,199,208,210,222,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'NO':([18,],[33,]),')':([38,39,48,49,50,52,53,55,56,57,58,59,60,64,69,72,73,74,75,76,79,80,81,84,87,89,90,92,93,94,97,98,99,100,101,102,103,104,105,107,110,117,118,119,121,122,123,124,125,126,127,131,132,134,159,185,186,187,188,198,201,204,212,213,219,223,227,],[-21,-22,-70,-76,-74,-111,-72,-75,-111,-111,-77,-111,-111,-111,97,-66,-69,-111,-111,-73,-62,-65,-54,-61,-50,-53,114,116,-28,-29,-71,-68,-67,-106,118,-103,-111,-64,-63,-55,-56,-111,-101,-102,-105,-58,-59,-57,-60,-51,-52,-108,-110,-111,-104,-111,205,206,206,-111,215,-109,220,-87,-111,-86,229,]),'(':([37,44,51,56,62,70,71,75,77,78,83,85,106,108,109,111,112,113,120,136,137,138,141,149,150,152,162,163,181,199,208,210,222,],[51,64,51,75,90,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,162,163,172,178,75,181,51,51,51,51,51,51,51,]),'+':([38,39,48,49,50,52,53,55,56,57,58,72,73,74,76,97,98,99,100,118,],[-21,-22,-70,-76,-74,-111,-72,-75,-111,77,-77,-66,-69,-111,-73,-71,-68,-67,-106,-101,]),'*':([38,39,48,49,50,52,53,55,56,58,74,76,97,100,118,],[-21,-22,-70,-76,-74,70,-72,-75,-111,-77,-111,-73,-71,-106,-101,]),'-':([38,39,48,49,50,52,53,55,56,57,58,72,73,74,76,97,98,99,100,118,],[-21,-22,-70,-76,-74,-111,-72,-75,-111,78,-77,-66,-69,-111,-73,-71,-68,-67,-106,-101,]),',':([20,36,38,39,45,47,48,49,50,52,53,55,56,57,58,59,60,68,72,73,74,76,79,80,81,84,87,89,97,98,99,100,103,104,105,107,110,117,118,122,123,124,125,126,127,134,185,187,188,198,219,],[-111,-111,-21,-22,65,-24,-70,-76,-74,-111,-72,-75,-111,-111,-77,-111,-111,-23,-66,-69,-111,-73,-62,-65,-54,-61,-50,-53,-71,-68,-67,-106,120,-64,-63,-55,-56,133,-101,-58,-59,-57,-60,-51,-52,120,133,208,208,211,211,]),'/':([38,39,48,49,50,52,53,55,56,58,74,76,97,100,118,],[-21,-22,-70,-76,-74,71,-72,-75,-111,-77,-111,-73,-71,-106,-101,]),';':([20,21,36,38,39,45,47,48,49,50,52,53,55,56,57,58,59,60,66,67,68,72,73,74,76,79,80,81,84,87,89,96,97,98,99,100,104,105,107,110,118,122,123,124,125,126,127,143,146,147,151,154,157,160,161,189,193,206,207,209,214,217,218,220,221,224,225,228,],[-111,40,-111,-21,-22,-111,-24,-70,-76,-74,-111,-72,-75,-111,-111,-77,-111,-111,-18,-20,-23,-66,-69,-111,-73,-62,-65,-54,-61,-50,-53,-19,-71,-68,-67,-106,-64,-63,-55,-56,-101,-58,-59,-57,-60,-51,-52,173,175,176,180,183,184,-30,-107,-88,210,-91,-89,-90,-31,-92,222,-85,-111,-32,-34,-33,]),'=':([6,7,8,20,36,38,39,48,49,50,52,53,55,56,57,58,59,72,73,74,76,79,80,82,83,85,97,98,99,100,104,105,118,150,179,194,],[17,18,19,-111,46,-21,-22,-70,-76,-74,-111,-72,-75,-111,-111,-77,82,-66,-69,-111,-73,-62,-65,106,108,111,-71,-68,-67,-106,-64,-63,-101,-111,199,-111,]),'<':([38,39,48,49,50,52,53,55,56,57,58,59,72,73,74,76,79,80,97,98,99,100,104,105,118,],[-21,-22,-70,-76,-74,-111,-72,-75,-111,-111,-77,83,-66,-69,-111,-73,-62,-65,-71,-68,-67,-106,-64,-63,-101,]),'$end':([3,10,23,42,43,63,91,115,129,130,160,],[0,-1,-27,-14,-15,-111,-111,-13,-25,-26,-30,]),'STRING':([0,2,4,5,9,15,16,23,24,27,28,29,30,31,32,33,34,35,40,61,63,64,91,128,129,130,133,139,142,144,145,148,153,155,156,160,163,165,167,173,175,176,180,183,184,190,191,192,208,216,230,],[-111,-111,12,-3,-2,12,-17,-27,12,-8,-10,-7,-9,-4,-6,-12,-11,-5,12,-16,12,12,12,12,-25,-26,12,12,-47,-17,12,12,12,-49,-48,-30,187,-17,190,12,12,12,12,12,12,-96,-93,-97,187,-78,-84,]),'FOR':([16,40,61,128,139,142,144,145,148,153,155,156,160,165,173,175,176,180,183,184,190,191,192,216,230,],[-17,-111,-16,141,141,-47,-17,141,141,141,-49,-48,-30,-17,141,141,141,141,141,141,-96,-93,-97,-78,-84,]),'SHOW':([140,],[167,]),'NONE':([17,19,],[28,28,]),'ELSE':([160,221,],[-30,226,]),'MOST':([17,19,],[30,30,]),'ICONST':([37,46,51,70,71,75,77,78,83,85,106,108,109,111,112,113,120,136,162,163,181,199,208,210,222,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'INPUT':([16,40,61,128,139,142,144,145,148,153,155,156,160,165,173,175,176,180,183,184,190,191,192,216,230,],[-17,-111,-16,149,149,-47,-17,149,149,149,-49,-48,-30,-17,149,149,149,149,149,149,-96,-93,-97,-78,-84,]),'[':([20,56,74,150,194,],[37,37,37,37,37,]),']':([38,39,48,49,50,52,53,54,55,56,57,58,59,60,72,73,74,76,79,80,81,84,87,89,97,98,99,100,104,105,107,110,118,122,123,124,125,126,127,],[-21,-22,-70,-76,-74,-111,-72,74,-75,-111,-111,-77,-111,-111,-66,-69,-111,-73,-62,-65,-54,-61,-50,-53,-71,-68,-67,-106,-64,-63,-55,-56,-101,-58,-59,-57,-60,-51,-52,]),'ID':([11,12,13,14,16,22,25,26,37,40,51,61,65,70,71,75,77,78,83,85,95,106,108,109,111,112,113,120,128,136,139,142,144,145,148,153,155,156,158,160,162,163,165,168,169,171,172,173,175,176,178,180,181,183,184,190,191,192,199,208,210,211,216,222,230,],[-80,-81,-79,20,-17,-82,44,-83,56,-111,56,-16,20,56,56,56,56,56,56,56,117,56,56,56,56,56,56,56,150,56,150,-47,-17,150,150,150,-49,-48,185,-30,56,56,-17,-94,191,-95,194,150,150,150,198,150,56,150,150,-96,-93,-97,56,56,56,219,-78,56,-84,]),'IF':([16,40,61,128,139,142,144,145,148,153,155,156,160,165,173,175,176,180,183,184,190,191,192,216,230,],[-17,-111,-16,152,152,-47,-17,152,152,152,-49,-48,-30,-17,152,152,152,152,152,152,-96,-93,-97,-78,-84,]),'&':([38,39,48,49,50,52,53,55,56,57,58,59,60,72,73,74,76,79,80,81,84,86,97,98,99,100,104,105,107,110,118,122,123,124,125,],[-21,-22,-70,-76,-74,-111,-72,-75,-111,-111,-77,-111,86,-66,-69,-111,-73,-62,-65,-54,-61,112,-71,-68,-67,-106,-64,-63,-55,-56,-101,-58,-59,-57,-60,]),'ALL':([17,19,],[27,27,]),'FALSE':([37,46,51,70,71,75,77,78,83,85,106,108,109,111,112,113,120,136,162,163,181,199,208,210,222,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'INT':([0,2,4,5,9,15,16,23,24,27,28,29,30,31,32,33,34,35,40,61,63,64,91,128,129,130,133,139,142,144,145,148,153,155,156,160,165,173,175,176,180,183,184,190,191,192,216,230,],[-111,-111,13,-3,-2,13,-17,-27,13,-8,-10,-7,-9,-4,-6,-12,-11,-5,13,-16,13,13,13,13,-25,-26,13,13,-47,-17,13,13,13,-49,-48,-30,-17,13,13,13,13,13,13,-96,-93,-97,-78,-84,]),'DECISIONS':([1,],[8,]),'DECISION':([168,170,171,],[-99,192,-100,]),'FLOAT':([0,2,4,5,9,15,16,23,24,27,28,29,30,31,32,33,34,35,40,61,63,64,91,128,129,130,133,139,142,144,145,148,153,155,156,160,165,173,175,176,180,183,184,190,191,192,216,230,],[-111,-111,11,-3,-2,11,-17,-27,11,-8,-10,-7,-9,-4,-6,-12,-11,-5,11,-16,11,11,11,11,-25,-26,11,11,-47,-17,11,11,11,-49,-48,-30,-17,11,11,11,11,11,11,-96,-93,-97,-78,-84,]),'TRACK':([140,],[168,]),'COMPLEXITY':([1,],[7,]),'YES':([18,],[34,]),'MAIN':([0,2,4,5,9,15,16,23,24,27,28,29,30,31,32,33,34,35,40,41,42,43,61,130,160,],[-111,-111,-111,-3,-2,-111,-17,-27,-111,-8,-10,-7,-9,-4,-6,-12,-11,-5,-111,62,-14,-15,-16,-26,-30,]),'}':([16,40,61,128,135,139,142,144,145,148,153,155,156,160,164,165,166,173,174,175,176,177,180,182,183,184,190,191,192,195,196,197,200,202,203,216,230,],[-17,-111,-16,-111,160,-111,-47,-17,-111,-111,-111,-49,-48,-30,-45,-17,-38,-111,-39,-111,-111,-43,-111,-44,-111,-111,-96,-93,-97,-40,-42,-41,-36,-35,-37,-78,-84,]),'|':([38,39,48,49,50,52,53,55,56,57,58,59,60,72,73,74,76,79,80,81,84,88,97,98,99,100,104,105,107,110,118,122,123,124,125,],[-21,-22,-70,-76,-74,-111,-72,-75,-111,-111,-77,-111,88,-66,-69,-111,-73,-62,-65,-54,-61,113,-71,-68,-67,-106,-64,-63,-55,-56,-101,-58,-59,-57,-60,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instruction':([128,139,145,148,153,173,175,176,180,183,184,],[135,164,164,164,164,164,164,164,164,164,164,]),'constant':([37,46,51,70,71,75,77,78,83,85,106,108,109,111,112,113,120,136,162,163,181,199,208,210,222,],[48,68,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'localdirective':([128,139,145,148,153,173,175,176,180,183,184,],[148,148,148,148,148,148,148,148,148,148,148,]),'superexpressionB':([60,],[87,]),'dimensionB':([20,56,74,150,194,],[36,76,100,179,179,]),'localvardirective':([128,139,145,148,153,173,175,176,180,183,184,],[142,142,142,142,142,142,142,142,142,142,142,]),'asign':([128,139,145,148,153,172,173,175,176,180,183,184,],[154,154,154,154,154,193,154,154,154,154,154,154,]),'funccallC':([103,134,],[119,159,]),'funccallB':([75,],[101,]),'options':([17,19,],[31,35,]),'optionsyesno':([18,],[32,]),'expressionB':([59,],[81,]),'localvardirectiveB':([140,],[169,]),'configdirective':([0,2,],[2,2,]),'inputB':([198,219,],[212,223,]),'funcB':([24,91,],[41,115,]),'program':([0,],[3,]),'params':([64,],[93,]),'factor':([37,51,70,71,75,77,78,83,85,106,108,109,111,112,113,120,136,162,163,181,199,208,210,222,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'input':([128,139,145,148,153,173,175,176,180,183,184,],[143,143,143,143,143,143,143,143,143,143,143,]),'declarationsB':([14,65,],[21,96,]),'main':([41,],[63,]),'type':([4,15,24,40,63,64,91,128,133,139,145,148,153,173,175,176,180,183,184,],[14,26,26,14,26,95,26,14,158,14,14,14,14,14,14,14,14,14,14,]),'empty':([0,2,4,15,20,24,36,40,45,52,56,57,59,60,63,64,74,75,91,103,117,128,134,139,145,148,150,153,173,175,176,180,183,184,185,194,198,219,221,],[5,5,16,23,39,43,47,16,67,73,39,80,84,89,23,94,39,102,43,121,132,144,121,165,165,165,39,165,165,165,165,165,165,165,132,39,213,213,225,]),'body':([4,],[10,]),'whileloop':([128,139,145,148,153,173,175,176,180,183,184,],[139,139,139,139,139,139,139,139,139,139,139,]),'return':([128,139,145,148,153,173,175,176,180,183,184,],[146,146,146,146,146,146,146,146,146,146,146,]),'funccall':([37,51,70,71,75,77,78,83,85,106,108,109,111,112,113,120,128,136,139,145,148,153,162,163,173,175,176,180,181,183,184,199,208,210,222,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,147,53,147,147,147,147,53,53,147,147,147,147,53,147,147,53,53,53,53,]),'else':([221,],[224,]),'superexpression':([37,51,75,112,113,120,136,162,163,181,199,208,210,222,],[54,69,103,126,127,134,161,186,188,201,214,188,218,227,]),'paramsB':([117,185,],[131,204,]),'func':([15,24,63,91,],[24,42,91,42,]),'outputC':([187,188,],[207,209,]),'returntype':([15,24,63,91,],[25,25,25,25,]),'expB':([57,],[79,]),'condition':([128,139,145,148,153,173,175,176,180,183,184,],[151,151,151,151,151,151,151,151,151,151,151,]),'term':([37,51,70,71,75,77,78,83,85,106,108,109,111,112,113,120,136,162,163,181,199,208,210,222,],[57,57,98,99,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'declarationsC':([45,],[66,]),'config':([0,2,],[4,9,]),'declarations':([4,40,128,139,145,148,153,173,175,176,180,183,184,],[15,61,153,153,153,153,153,153,153,153,153,153,153,]),'instructionB':([139,145,148,153,173,175,176,180,183,184,],[166,174,177,182,195,196,197,200,202,203,]),'constantB':([36,],[45,]),'optionalparams':([64,],[92,]),'localmsgdirective':([128,139,145,148,153,173,175,176,180,183,184,],[155,155,155,155,155,155,155,155,155,155,155,]),'localdecisiondirectiveB':([140,],[170,]),'localdecisiondirective':([128,139,145,148,153,173,175,176,180,183,184,],[156,156,156,156,156,156,156,156,156,156,156,]),'termB':([52,],[72,]),'exp':([37,51,75,77,78,83,85,106,108,109,111,112,113,120,136,162,163,181,199,208,210,222,],[59,59,59,104,105,107,110,122,123,124,125,59,59,59,59,59,59,59,59,59,59,59,]),'forloop':([128,139,145,148,153,173,175,176,180,183,184,],[145,145,145,145,145,145,145,145,145,145,145,]),'outputB':([163,208,],[189,217,]),'output':([128,139,145,148,153,173,175,176,180,183,184,],[157,157,157,157,157,157,157,157,157,157,157,]),'expression':([37,51,75,112,113,120,136,162,163,181,199,208,210,222,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'dimension':([20,56,74,150,194,],[38,38,38,38,38,]),'block':([114,116,205,215,226,229,],[129,130,216,221,228,230,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> config body','program',2,'p_program','scanner.py',11),
  ('config -> configdirective config','config',2,'p_config','scanner.py',15),
  ('config -> empty','config',1,'p_config','scanner.py',16),
  ('configdirective -> # VARS = options','configdirective',4,'p_configdirective','scanner.py',20),
  ('configdirective -> # DECISIONS = options','configdirective',4,'p_configdirective','scanner.py',21),
  ('configdirective -> # COMPLEXITY = optionsyesno','configdirective',4,'p_configdirective','scanner.py',22),
  ('options -> SOME','options',1,'p_options','scanner.py',25),
  ('options -> ALL','options',1,'p_options','scanner.py',26),
  ('options -> MOST','options',1,'p_options','scanner.py',27),
  ('options -> NONE','options',1,'p_options','scanner.py',28),
  ('optionsyesno -> YES','optionsyesno',1,'p_optionsyesno','scanner.py',31),
  ('optionsyesno -> NO','optionsyesno',1,'p_optionsyesno','scanner.py',32),
  ('body -> declarations func funcB main func funcB','body',6,'p_body','scanner.py',36),
  ('funcB -> func','funcB',1,'p_funcB','scanner.py',39),
  ('funcB -> empty','funcB',1,'p_funcB','scanner.py',40),
  ('declarations -> type declarationsB ; declarations','declarations',4,'p_declarations','scanner.py',44),
  ('declarations -> empty','declarations',1,'p_declarations','scanner.py',45),
  ('declarationsB -> ID dimensionB constantB declarationsC','declarationsB',4,'p_declarationsB','scanner.py',48),
  ('declarationsC -> , declarationsB','declarationsC',2,'p_declarationsC','scanner.py',51),
  ('declarationsC -> empty','declarationsC',1,'p_declarationsC','scanner.py',52),
  ('dimensionB -> dimension','dimensionB',1,'p_dimensionB','scanner.py',55),
  ('dimensionB -> empty','dimensionB',1,'p_dimensionB','scanner.py',56),
  ('constantB -> = constant','constantB',2,'p_constantB','scanner.py',59),
  ('constantB -> empty','constantB',1,'p_constantB','scanner.py',60),
  ('main -> MAIN ( ) block','main',4,'p_main','scanner.py',64),
  ('func -> returntype ID ( optionalparams ) block','func',6,'p_func','scanner.py',68),
  ('func -> empty','func',1,'p_func','scanner.py',69),
  ('optionalparams -> params','optionalparams',1,'p_optionalparams','scanner.py',72),
  ('optionalparams -> empty','optionalparams',1,'p_optionalparams','scanner.py',73),
  ('block -> { instruction }','block',3,'p_block','scanner.py',77),
  ('asign -> ID dimensionB = superexpression','asign',4,'p_asign','scanner.py',81),
  ('condition -> IF ( superexpression ) block else','condition',6,'p_condition','scanner.py',85),
  ('else -> ELSE block','else',2,'p_else','scanner.py',89),
  ('else -> empty','else',1,'p_else','scanner.py',90),
  ('instruction -> asign ; instructionB','instruction',3,'p_instruction','scanner.py',95),
  ('instruction -> condition ; instructionB','instruction',3,'p_instruction','scanner.py',96),
  ('instruction -> output ; instructionB','instruction',3,'p_instruction','scanner.py',97),
  ('instruction -> whileloop instructionB','instruction',2,'p_instruction','scanner.py',98),
  ('instruction -> forloop instructionB','instruction',2,'p_instruction','scanner.py',99),
  ('instruction -> input ; instructionB','instruction',3,'p_instruction','scanner.py',100),
  ('instruction -> funccall ; instructionB','instruction',3,'p_instruction','scanner.py',101),
  ('instruction -> return ; instructionB','instruction',3,'p_instruction','scanner.py',102),
  ('instruction -> localdirective instructionB','instruction',2,'p_instruction','scanner.py',103),
  ('instruction -> declarations instructionB','instruction',2,'p_instruction','scanner.py',104),
  ('instructionB -> instruction','instructionB',1,'p_instructionB','scanner.py',107),
  ('instructionB -> empty','instructionB',1,'p_instructionB','scanner.py',108),
  ('localdirective -> localvardirective','localdirective',1,'p_localdirective','scanner.py',112),
  ('localdirective -> localdecisiondirective','localdirective',1,'p_localdirective','scanner.py',113),
  ('localdirective -> localmsgdirective','localdirective',1,'p_localdirective','scanner.py',114),
  ('superexpression -> expression superexpressionB','superexpression',2,'p_superexpression','scanner.py',118),
  ('superexpressionB -> & & superexpression','superexpressionB',3,'p_superexpressionB','scanner.py',121),
  ('superexpressionB -> | | superexpression','superexpressionB',3,'p_superexpressionB','scanner.py',122),
  ('superexpressionB -> empty','superexpressionB',1,'p_superexpressionB','scanner.py',123),
  ('expression -> exp expressionB','expression',2,'p_expression','scanner.py',127),
  ('expressionB -> < exp','expressionB',2,'p_expressionB','scanner.py',130),
  ('expressionB -> > exp','expressionB',2,'p_expressionB','scanner.py',131),
  ('expressionB -> < > exp','expressionB',3,'p_expressionB','scanner.py',132),
  ('expressionB -> = = exp','expressionB',3,'p_expressionB','scanner.py',133),
  ('expressionB -> < = exp','expressionB',3,'p_expressionB','scanner.py',134),
  ('expressionB -> > = exp','expressionB',3,'p_expressionB','scanner.py',135),
  ('expressionB -> empty','expressionB',1,'p_expressionB','scanner.py',136),
  ('exp -> term expB','exp',2,'p_exp','scanner.py',140),
  ('expB -> - exp','expB',2,'p_expB','scanner.py',143),
  ('expB -> + exp','expB',2,'p_expB','scanner.py',144),
  ('expB -> empty','expB',1,'p_expB','scanner.py',145),
  ('term -> factor termB','term',2,'p_term','scanner.py',149),
  ('termB -> / term','termB',2,'p_termB','scanner.py',152),
  ('termB -> * term','termB',2,'p_termB','scanner.py',153),
  ('termB -> empty','termB',1,'p_termB','scanner.py',154),
  ('factor -> constant','factor',1,'p_factor','scanner.py',159),
  ('factor -> ( superexpression )','factor',3,'p_factor','scanner.py',160),
  ('factor -> funccall','factor',1,'p_factor','scanner.py',161),
  ('factor -> ID dimensionB','factor',2,'p_factor','scanner.py',162),
  ('constant -> FCONST','constant',1,'p_constant','scanner.py',170),
  ('constant -> ICONST','constant',1,'p_constant','scanner.py',171),
  ('constant -> TRUE','constant',1,'p_constant','scanner.py',172),
  ('constant -> FALSE','constant',1,'p_constant','scanner.py',173),
  ('whileloop -> WHILE ( superexpression ) block','whileloop',5,'p_whileloop','scanner.py',182),
  ('type -> INT','type',1,'p_type','scanner.py',186),
  ('type -> FLOAT','type',1,'p_type','scanner.py',187),
  ('type -> STRING','type',1,'p_type','scanner.py',188),
  ('returntype -> VOID','returntype',1,'p_returntype','scanner.py',192),
  ('returntype -> type','returntype',1,'p_returntype','scanner.py',193),
  ('forloop -> FOR ( asign ; superexpression ; superexpression ) block','forloop',9,'p_forloop','scanner.py',197),
  ('input -> INPUT ( ID inputB )','input',5,'p_input','scanner.py',201),
  ('inputB -> , ID inputB','inputB',3,'p_inputB','scanner.py',204),
  ('inputB -> empty','inputB',1,'p_inputB','scanner.py',205),
  ('output -> PRINT ( outputB','output',3,'p_output','scanner.py',208),
  ('outputB -> STRING outputC','outputB',2,'p_outputB','scanner.py',211),
  ('outputB -> superexpression outputC','outputB',2,'p_outputB','scanner.py',212),
  ('outputC -> )','outputC',1,'p_outputC','scanner.py',215),
  ('outputC -> , outputB','outputC',2,'p_outputC','scanner.py',216),
  ('localvardirective -> # localvardirectiveB ID','localvardirective',3,'p_localvardirective','scanner.py',220),
  ('localvardirectiveB -> TRACK','localvardirectiveB',1,'p_localvardirectiveB','scanner.py',223),
  ('localvardirectiveB -> FORGET','localvardirectiveB',1,'p_localvardirectiveB','scanner.py',224),
  ('localmsgdirective -> # SHOW STRING','localmsgdirective',3,'p_localmsgdirective','scanner.py',228),
  ('localdecisiondirective -> # localdecisiondirectiveB DECISION','localdecisiondirective',3,'p_localdecisiondirective','scanner.py',232),
  ('localdecisiondirective -> empty','localdecisiondirective',1,'p_localdecisiondirective','scanner.py',233),
  ('localdecisiondirectiveB -> TRACK','localdecisiondirectiveB',1,'p_localdecisiondirectiveB','scanner.py',236),
  ('localdecisiondirectiveB -> FORGET','localdecisiondirectiveB',1,'p_localdecisiondirectiveB','scanner.py',237),
  ('funccall -> ID ( funccallB )','funccall',4,'p_funccall','scanner.py',241),
  ('funccallB -> superexpression funccallC','funccallB',2,'p_funccallB','scanner.py',244),
  ('funccallB -> empty','funccallB',1,'p_funccallB','scanner.py',245),
  ('funccallC -> , superexpression funccallC','funccallC',3,'p_funccallC','scanner.py',248),
  ('funccallC -> empty','funccallC',1,'p_funccallC','scanner.py',249),
  ('dimension -> [ superexpression ] dimensionB','dimension',4,'p_dimension','scanner.py',253),
  ('return -> RETURN superexpression','return',2,'p_return','scanner.py',257),
  ('params -> type ID paramsB','params',3,'p_params','scanner.py',261),
  ('paramsB -> , type ID paramsB','paramsB',4,'p_paramsB','scanner.py',264),
  ('paramsB -> empty','paramsB',1,'p_paramsB','scanner.py',265),
  ('empty -> <empty>','empty',0,'p_empty','scanner.py',268),
]
