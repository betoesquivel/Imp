
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xf4`\tr\xb8\xd7\xd9wOi\xd1\xf6\x8f\xc8\x1b\t'
    
_lr_action_items = {'RETURN':([16,38,61,132,141,144,146,147,150,155,157,158,165,170,178,180,181,185,188,189,195,196,197,222,236,],[-17,-115,-16,138,138,-47,-17,138,138,138,-49,-48,-30,-17,138,138,138,138,138,138,-100,-97,-101,-82,-88,]),'VARS':([1,],[6,]),'VOID':([24,],[42,]),'SOME':([17,19,],[27,27,]),'WHILE':([16,38,61,132,141,144,146,147,150,155,157,158,165,170,178,180,181,185,188,189,195,196,197,222,236,],[-17,-115,-16,139,139,-47,-17,139,139,139,-49,-48,-30,-17,139,139,139,139,139,139,-100,-97,-101,-82,-88,]),'PRINT':([16,38,61,132,141,144,146,147,150,155,157,158,165,170,178,180,181,185,188,189,195,196,197,222,236,],[-17,-115,-16,140,140,-47,-17,140,140,140,-49,-48,-30,-17,140,140,140,140,140,140,-100,-97,-101,-82,-88,]),'{':([116,134,210,220,232,235,],[132,132,132,132,132,132,]),'TRUE':([35,46,48,49,50,51,53,56,75,76,80,82,83,88,90,104,108,110,111,113,114,115,124,138,167,168,186,204,213,215,228,],[-115,70,70,-115,-80,-81,-75,-74,-115,-115,-115,-115,-115,-115,-115,-75,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,]),'>':([36,37,52,54,57,58,59,69,70,71,72,73,77,78,79,81,84,85,88,99,100,101,102,106,107,122,],[-21,-22,-115,-72,-115,-115,90,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,111,-71,-68,-67,-110,-64,-63,-105,]),'DEF':([0,2,4,5,9,15,16,22,23,25,26,27,28,29,30,31,32,33,38,61,63,96,133,160,165,],[-115,-115,-115,-3,-2,24,-17,-27,24,-8,-10,-7,-9,-4,-6,-12,-11,-5,-115,-16,24,24,-25,-26,-30,]),'FORGET':([142,],[176,]),'#':([0,2,16,25,26,27,28,29,30,31,32,33,38,61,132,141,144,146,147,150,155,157,158,165,170,178,180,181,185,188,189,195,196,197,222,236,],[1,1,-17,-8,-10,-7,-9,-4,-6,-12,-11,-5,-115,-16,142,142,-47,-17,142,142,142,-49,-48,-30,-17,142,142,142,142,142,142,-100,-97,-101,-82,-88,]),'FCONST':([35,46,48,49,50,51,53,56,75,76,80,82,83,88,90,104,108,110,111,113,114,115,124,138,167,168,186,204,213,215,228,],[-115,69,69,-115,-80,-81,-75,-74,-115,-115,-115,-115,-115,-115,-115,-75,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,]),'NO':([18,],[31,]),')':([36,37,52,54,57,58,59,60,69,70,71,72,73,74,77,78,79,80,81,84,85,86,89,92,94,95,97,99,100,101,102,103,104,105,106,107,109,112,118,119,120,122,123,125,126,127,128,129,130,131,135,136,161,162,164,191,192,193,203,206,209,217,218,221,225,229,233,],[-21,-22,-115,-72,-115,-115,-115,-115,-76,-78,-77,-79,-70,99,-66,-69,-115,-115,-73,-62,-65,-54,-61,-50,-53,116,-115,-71,-68,-67,-110,122,-107,-115,-64,-63,-55,-56,134,-29,-28,-105,-106,-109,-58,-59,-57,-60,-51,-52,-115,-115,-112,-114,-108,210,211,211,-115,220,-115,226,-91,-113,-115,-90,235,]),'(':([35,49,57,62,64,75,76,80,82,83,88,90,108,110,111,113,114,115,124,138,139,140,143,151,152,154,167,168,186,204,213,215,228,],[49,49,80,95,97,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,167,168,177,183,80,186,49,49,49,49,49,49,49,]),'+':([35,36,37,49,52,54,57,58,69,70,71,72,73,75,76,77,78,79,80,81,82,83,88,90,99,100,101,102,108,110,111,113,114,115,122,124,138,167,168,186,204,213,215,228,],[50,-21,-22,50,-115,-72,-115,82,-76,-78,-77,-79,-70,50,50,-66,-69,-115,50,-73,50,50,50,50,-71,-68,-67,-110,50,50,50,50,50,50,-105,50,50,50,50,50,50,50,50,50,]),'*':([36,37,52,54,57,69,70,71,72,73,79,81,99,102,122,],[-21,-22,75,-72,-115,-76,-78,-77,-79,-70,-115,-73,-71,-110,-105,]),'-':([35,36,37,49,52,54,57,58,69,70,71,72,73,75,76,77,78,79,80,81,82,83,88,90,99,100,101,102,108,110,111,113,114,115,122,124,138,167,168,186,204,213,215,228,],[51,-21,-22,51,-115,-72,-115,83,-76,-78,-77,-79,-70,51,51,-66,-69,-115,51,-73,51,51,51,51,-71,-68,-67,-110,51,51,51,51,51,51,-105,51,51,51,51,51,51,51,51,51,]),',':([20,34,36,37,45,47,52,54,57,58,59,60,68,69,70,71,72,73,77,78,79,81,84,85,86,89,92,94,99,100,101,102,105,106,107,109,112,122,126,127,128,129,130,131,135,136,192,193,203,209,225,],[-115,-115,-21,-22,65,-24,-115,-72,-115,-115,-115,-115,-23,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-54,-61,-50,-53,-71,-68,-67,-110,124,-64,-63,-55,-56,-105,-58,-59,-57,-60,-51,-52,163,124,213,213,216,163,216,]),'/':([36,37,52,54,57,69,70,71,72,73,79,81,99,102,122,],[-21,-22,76,-72,-115,-76,-78,-77,-79,-70,-115,-73,-71,-110,-105,]),';':([20,21,34,36,37,45,47,52,54,57,58,59,60,66,67,68,69,70,71,72,73,77,78,79,81,84,85,86,89,92,94,98,99,100,101,102,106,107,109,112,122,126,127,128,129,130,131,145,148,149,153,156,159,165,166,194,198,211,212,214,219,223,224,226,227,230,231,234,],[-115,38,-115,-21,-22,-115,-24,-115,-72,-115,-115,-115,-115,-18,-20,-23,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-54,-61,-50,-53,-19,-71,-68,-67,-110,-64,-63,-55,-56,-105,-58,-59,-57,-60,-51,-52,178,180,181,185,188,189,-30,-111,-92,215,-95,-93,-94,-31,-96,228,-89,-115,-32,-34,-33,]),'=':([6,7,8,20,34,36,37,52,54,57,58,59,69,70,71,72,73,77,78,79,81,84,85,87,88,90,99,100,101,102,106,107,122,152,184,199,],[17,18,19,-115,46,-21,-22,-115,-72,-115,-115,87,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,108,110,113,-71,-68,-67,-110,-64,-63,-105,-115,204,-115,]),'<':([36,37,52,54,57,58,59,69,70,71,72,73,77,78,79,81,84,85,99,100,101,102,106,107,122,],[-21,-22,-115,-72,-115,-115,88,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-71,-68,-67,-110,-64,-63,-105,]),'$end':([3,10,22,40,41,63,96,117,133,160,165,],[0,-1,-27,-15,-14,-115,-115,-13,-25,-26,-30,]),'STRING':([0,2,4,5,9,16,24,25,26,27,28,29,30,31,32,33,38,61,97,132,141,144,146,147,150,155,157,158,163,165,168,170,172,178,180,181,185,188,189,195,196,197,213,222,236,],[-115,-115,12,-3,-2,-17,12,-8,-10,-7,-9,-4,-6,-12,-11,-5,12,-16,12,12,12,-47,-17,12,12,12,-49,-48,12,-30,192,-17,195,12,12,12,12,12,12,-100,-97,-101,192,-82,-88,]),'FOR':([16,38,61,132,141,144,146,147,150,155,157,158,165,170,178,180,181,185,188,189,195,196,197,222,236,],[-17,-115,-16,143,143,-47,-17,143,143,143,-49,-48,-30,-17,143,143,143,143,143,143,-100,-97,-101,-82,-88,]),'SHOW':([142,],[172,]),'NONE':([17,19,],[26,26,]),'ELSE':([165,227,],[-30,232,]),'MOST':([17,19,],[28,28,]),'ICONST':([35,46,48,49,50,51,53,56,75,76,80,82,83,88,90,104,108,110,111,113,114,115,124,138,167,168,186,204,213,215,228,],[-115,71,71,-115,-80,-81,-75,-74,-115,-115,-115,-115,-115,-115,-115,-75,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,]),'INPUT':([16,38,61,132,141,144,146,147,150,155,157,158,165,170,178,180,181,185,188,189,195,196,197,222,236,],[-17,-115,-16,151,151,-47,-17,151,151,151,-49,-48,-30,-17,151,151,151,151,151,151,-100,-97,-101,-82,-88,]),'[':([20,57,79,152,199,],[35,35,35,35,35,]),']':([36,37,52,54,55,57,58,59,60,69,70,71,72,73,77,78,79,81,84,85,86,89,92,94,99,100,101,102,106,107,109,112,122,126,127,128,129,130,131,],[-21,-22,-115,-72,79,-115,-115,-115,-115,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-54,-61,-50,-53,-71,-68,-67,-110,-64,-63,-55,-56,-105,-58,-59,-57,-60,-51,-52,]),'ID':([11,12,13,14,16,35,38,42,43,44,49,61,65,75,76,80,82,83,88,90,108,110,111,113,114,115,121,124,132,138,141,144,146,147,150,155,157,158,165,167,168,170,173,174,176,177,178,180,181,183,185,186,188,189,190,195,196,197,204,213,215,216,222,228,236,],[-84,-85,-83,20,-17,57,-115,-86,64,-87,57,-16,20,57,57,57,57,57,57,57,57,57,57,57,57,57,135,57,152,57,152,-47,-17,152,152,152,-49,-48,-30,57,57,-17,-98,196,-99,199,152,152,152,203,152,57,152,152,209,-100,-97,-101,57,57,57,225,-82,57,-88,]),'IF':([16,38,61,132,141,144,146,147,150,155,157,158,165,170,178,180,181,185,188,189,195,196,197,222,236,],[-17,-115,-16,154,154,-47,-17,154,154,154,-49,-48,-30,-17,154,154,154,154,154,154,-100,-97,-101,-82,-88,]),'&':([36,37,52,54,57,58,59,60,69,70,71,72,73,77,78,79,81,84,85,86,89,91,99,100,101,102,106,107,109,112,122,126,127,128,129,],[-21,-22,-115,-72,-115,-115,-115,91,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-54,-61,114,-71,-68,-67,-110,-64,-63,-55,-56,-105,-58,-59,-57,-60,]),'ALL':([17,19,],[25,25,]),'FALSE':([35,46,48,49,50,51,53,56,75,76,80,82,83,88,90,104,108,110,111,113,114,115,124,138,167,168,186,204,213,215,228,],[-115,72,72,-115,-80,-81,-75,-74,-115,-115,-115,-115,-115,-115,-115,-75,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,-115,]),'INT':([0,2,4,5,9,16,24,25,26,27,28,29,30,31,32,33,38,61,97,132,141,144,146,147,150,155,157,158,163,165,170,178,180,181,185,188,189,195,196,197,222,236,],[-115,-115,13,-3,-2,-17,13,-8,-10,-7,-9,-4,-6,-12,-11,-5,13,-16,13,13,13,-47,-17,13,13,13,-49,-48,13,-30,-17,13,13,13,13,13,13,-100,-97,-101,-82,-88,]),'DECISIONS':([1,],[8,]),'DECISION':([173,175,176,],[-103,197,-104,]),'FLOAT':([0,2,4,5,9,16,24,25,26,27,28,29,30,31,32,33,38,61,97,132,141,144,146,147,150,155,157,158,163,165,170,178,180,181,185,188,189,195,196,197,222,236,],[-115,-115,11,-3,-2,-17,11,-8,-10,-7,-9,-4,-6,-12,-11,-5,11,-16,11,11,11,-47,-17,11,11,11,-49,-48,11,-30,-17,11,11,11,11,11,11,-100,-97,-101,-82,-88,]),'TRACK':([142,],[173,]),'COMPLEXITY':([1,],[7,]),'YES':([18,],[32,]),'MAIN':([0,2,4,5,9,15,16,22,23,25,26,27,28,29,30,31,32,33,38,39,40,41,61,160,165,],[-115,-115,-115,-3,-2,-115,-17,-27,-115,-8,-10,-7,-9,-4,-6,-12,-11,-5,-115,62,-15,-14,-16,-26,-30,]),'}':([16,38,61,132,137,141,144,146,147,150,155,157,158,165,169,170,171,178,179,180,181,182,185,187,188,189,195,196,197,200,201,202,205,207,208,222,236,],[-17,-115,-16,-115,165,-115,-47,-17,-115,-115,-115,-49,-48,-30,-45,-17,-38,-115,-39,-115,-115,-43,-115,-44,-115,-115,-100,-97,-101,-40,-42,-41,-36,-35,-37,-82,-88,]),'|':([36,37,52,54,57,58,59,60,69,70,71,72,73,77,78,79,81,84,85,86,89,93,99,100,101,102,106,107,109,112,122,126,127,128,129,],[-21,-22,-115,-72,-115,-115,-115,93,-76,-78,-77,-79,-70,-66,-69,-115,-73,-62,-65,-54,-61,115,-71,-68,-67,-110,-64,-63,-55,-56,-105,-58,-59,-57,-60,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instruction':([132,141,147,150,155,178,180,181,185,188,189,],[137,169,169,169,169,169,169,169,169,169,169,]),'constant':([46,48,],[68,73,]),'localdirective':([132,141,147,150,155,178,180,181,185,188,189,],[150,150,150,150,150,150,150,150,150,150,150,]),'sign':([35,49,75,76,80,82,83,88,90,108,110,111,113,114,115,124,138,167,168,186,204,213,215,228,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'dimensionB':([20,57,79,152,199,],[34,81,102,184,184,]),'localvardirective':([132,141,147,150,155,178,180,181,185,188,189,],[144,144,144,144,144,144,144,144,144,144,144,]),'asign':([132,141,147,150,155,177,178,180,181,185,188,189,],[156,156,156,156,156,198,156,156,156,156,156,156,]),'funccallC':([105,136,],[123,164,]),'funccallB':([80,],[103,]),'options':([17,19,],[29,33,]),'signB':([35,49,75,76,80,82,83,88,90,108,110,111,113,114,115,124,138,167,168,186,204,213,215,228,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'expressionB':([59,],[86,]),'localvardirectiveB':([142,],[174,]),'configdirective':([0,2,],[2,2,]),'inputB':([203,225,],[217,229,]),'funcB':([23,96,],[39,117,]),'program':([0,],[3,]),'params':([97,],[120,]),'factor':([35,49,75,76,80,82,83,88,90,108,110,111,113,114,115,124,138,167,168,186,204,213,215,228,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'input':([132,141,147,150,155,178,180,181,185,188,189,],[145,145,145,145,145,145,145,145,145,145,145,]),'declarationsB':([14,65,],[21,98,]),'main':([39,],[63,]),'type':([4,24,38,97,132,141,147,150,155,163,178,180,181,185,188,189,],[14,44,14,121,14,14,14,14,14,190,14,14,14,14,14,14,]),'empty':([0,2,4,15,20,23,34,35,38,45,49,52,57,58,59,60,63,75,76,79,80,82,83,88,90,96,97,105,108,110,111,113,114,115,124,132,135,136,138,141,147,150,152,155,167,168,178,180,181,185,186,188,189,199,203,204,209,213,215,225,227,228,],[5,5,16,22,37,40,47,53,16,67,53,78,37,85,89,94,22,53,53,37,104,53,53,53,53,40,119,125,53,53,53,53,53,53,53,146,162,125,53,170,170,170,37,170,53,53,170,170,170,170,53,170,170,37,218,53,162,53,53,218,231,53,]),'body':([4,],[10,]),'whileloop':([132,141,147,150,155,178,180,181,185,188,189,],[141,141,141,141,141,141,141,141,141,141,141,]),'return':([132,141,147,150,155,178,180,181,185,188,189,],[148,148,148,148,148,148,148,148,148,148,148,]),'funccall':([35,49,75,76,80,82,83,88,90,108,110,111,113,114,115,124,132,138,141,147,150,155,167,168,178,180,181,185,186,188,189,204,213,215,228,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,149,54,149,149,149,149,54,54,149,149,149,149,54,149,149,54,54,54,54,]),'else':([227,],[230,]),'superexpression':([35,49,80,114,115,124,138,167,168,186,204,213,215,228,],[55,74,105,130,131,136,166,191,193,206,219,193,224,233,]),'paramsB':([135,209,],[161,221,]),'func':([15,23,63,96,],[23,41,96,41,]),'outputC':([192,193,],[212,214,]),'returntype':([24,],[43,]),'expB':([58,],[84,]),'superexpressionB':([60,],[92,]),'condition':([132,141,147,150,155,178,180,181,185,188,189,],[153,153,153,153,153,153,153,153,153,153,153,]),'term':([35,49,75,76,80,82,83,88,90,108,110,111,113,114,115,124,138,167,168,186,204,213,215,228,],[58,58,100,101,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'declarationsC':([45,],[66,]),'optionsyesno':([18,],[30,]),'config':([0,2,],[4,9,]),'declarations':([4,38,132,141,147,150,155,178,180,181,185,188,189,],[15,61,155,155,155,155,155,155,155,155,155,155,155,]),'instructionB':([141,147,150,155,178,180,181,185,188,189,],[171,179,182,187,200,201,202,205,207,208,]),'constantB':([34,],[45,]),'optionalparams':([97,],[118,]),'localmsgdirective':([132,141,147,150,155,178,180,181,185,188,189,],[157,157,157,157,157,157,157,157,157,157,157,]),'localdecisiondirectiveB':([142,],[175,]),'localdecisiondirective':([132,141,147,150,155,178,180,181,185,188,189,],[158,158,158,158,158,158,158,158,158,158,158,]),'termB':([52,],[77,]),'exp':([35,49,80,82,83,88,90,108,110,111,113,114,115,124,138,167,168,186,204,213,215,228,],[59,59,59,106,107,109,112,126,127,128,129,59,59,59,59,59,59,59,59,59,59,59,]),'forloop':([132,141,147,150,155,178,180,181,185,188,189,],[147,147,147,147,147,147,147,147,147,147,147,]),'outputB':([168,213,],[194,223,]),'output':([132,141,147,150,155,178,180,181,185,188,189,],[159,159,159,159,159,159,159,159,159,159,159,]),'expression':([35,49,80,114,115,124,138,167,168,186,204,213,215,228,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'dimension':([20,57,79,152,199,],[36,36,36,36,36,]),'block':([116,134,210,220,232,235,],[133,160,222,227,234,236,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> config body','program',2,'p_program','scanner.py',12),
  ('config -> configdirective config','config',2,'p_config','scanner.py',16),
  ('config -> empty','config',1,'p_config','scanner.py',17),
  ('configdirective -> # VARS = options','configdirective',4,'p_configdirective','scanner.py',21),
  ('configdirective -> # DECISIONS = options','configdirective',4,'p_configdirective','scanner.py',22),
  ('configdirective -> # COMPLEXITY = optionsyesno','configdirective',4,'p_configdirective','scanner.py',23),
  ('options -> SOME','options',1,'p_options','scanner.py',26),
  ('options -> ALL','options',1,'p_options','scanner.py',27),
  ('options -> MOST','options',1,'p_options','scanner.py',28),
  ('options -> NONE','options',1,'p_options','scanner.py',29),
  ('optionsyesno -> YES','optionsyesno',1,'p_optionsyesno','scanner.py',32),
  ('optionsyesno -> NO','optionsyesno',1,'p_optionsyesno','scanner.py',33),
  ('body -> declarations func funcB main func funcB','body',6,'p_body','scanner.py',37),
  ('funcB -> func','funcB',1,'p_funcB','scanner.py',40),
  ('funcB -> empty','funcB',1,'p_funcB','scanner.py',41),
  ('declarations -> type declarationsB ; declarations','declarations',4,'p_declarations','scanner.py',45),
  ('declarations -> empty','declarations',1,'p_declarations','scanner.py',46),
  ('declarationsB -> ID dimensionB constantB declarationsC','declarationsB',4,'p_declarationsB','scanner.py',49),
  ('declarationsC -> , declarationsB','declarationsC',2,'p_declarationsC','scanner.py',52),
  ('declarationsC -> empty','declarationsC',1,'p_declarationsC','scanner.py',53),
  ('dimensionB -> dimension','dimensionB',1,'p_dimensionB','scanner.py',56),
  ('dimensionB -> empty','dimensionB',1,'p_dimensionB','scanner.py',57),
  ('constantB -> = constant','constantB',2,'p_constantB','scanner.py',60),
  ('constantB -> empty','constantB',1,'p_constantB','scanner.py',61),
  ('main -> MAIN ( ) block','main',4,'p_main','scanner.py',65),
  ('func -> DEF returntype ID ( optionalparams ) block','func',7,'p_func','scanner.py',69),
  ('func -> empty','func',1,'p_func','scanner.py',70),
  ('optionalparams -> params','optionalparams',1,'p_optionalparams','scanner.py',73),
  ('optionalparams -> empty','optionalparams',1,'p_optionalparams','scanner.py',74),
  ('block -> { instruction }','block',3,'p_block','scanner.py',78),
  ('asign -> ID dimensionB = superexpression','asign',4,'p_asign','scanner.py',82),
  ('condition -> IF ( superexpression ) block else','condition',6,'p_condition','scanner.py',86),
  ('else -> ELSE block','else',2,'p_else','scanner.py',90),
  ('else -> empty','else',1,'p_else','scanner.py',91),
  ('instruction -> asign ; instructionB','instruction',3,'p_instruction','scanner.py',96),
  ('instruction -> condition ; instructionB','instruction',3,'p_instruction','scanner.py',97),
  ('instruction -> output ; instructionB','instruction',3,'p_instruction','scanner.py',98),
  ('instruction -> whileloop instructionB','instruction',2,'p_instruction','scanner.py',99),
  ('instruction -> forloop instructionB','instruction',2,'p_instruction','scanner.py',100),
  ('instruction -> input ; instructionB','instruction',3,'p_instruction','scanner.py',101),
  ('instruction -> funccall ; instructionB','instruction',3,'p_instruction','scanner.py',102),
  ('instruction -> return ; instructionB','instruction',3,'p_instruction','scanner.py',103),
  ('instruction -> localdirective instructionB','instruction',2,'p_instruction','scanner.py',104),
  ('instruction -> declarations instructionB','instruction',2,'p_instruction','scanner.py',105),
  ('instructionB -> instruction','instructionB',1,'p_instructionB','scanner.py',108),
  ('instructionB -> empty','instructionB',1,'p_instructionB','scanner.py',109),
  ('localdirective -> localvardirective','localdirective',1,'p_localdirective','scanner.py',113),
  ('localdirective -> localdecisiondirective','localdirective',1,'p_localdirective','scanner.py',114),
  ('localdirective -> localmsgdirective','localdirective',1,'p_localdirective','scanner.py',115),
  ('superexpression -> expression superexpressionB','superexpression',2,'p_superexpression','scanner.py',119),
  ('superexpressionB -> & & superexpression','superexpressionB',3,'p_superexpressionB','scanner.py',122),
  ('superexpressionB -> | | superexpression','superexpressionB',3,'p_superexpressionB','scanner.py',123),
  ('superexpressionB -> empty','superexpressionB',1,'p_superexpressionB','scanner.py',124),
  ('expression -> exp expressionB','expression',2,'p_expression','scanner.py',128),
  ('expressionB -> < exp','expressionB',2,'p_expressionB','scanner.py',131),
  ('expressionB -> > exp','expressionB',2,'p_expressionB','scanner.py',132),
  ('expressionB -> < > exp','expressionB',3,'p_expressionB','scanner.py',133),
  ('expressionB -> = = exp','expressionB',3,'p_expressionB','scanner.py',134),
  ('expressionB -> < = exp','expressionB',3,'p_expressionB','scanner.py',135),
  ('expressionB -> > = exp','expressionB',3,'p_expressionB','scanner.py',136),
  ('expressionB -> empty','expressionB',1,'p_expressionB','scanner.py',137),
  ('exp -> term expB','exp',2,'p_exp','scanner.py',141),
  ('expB -> - exp','expB',2,'p_expB','scanner.py',144),
  ('expB -> + exp','expB',2,'p_expB','scanner.py',145),
  ('expB -> empty','expB',1,'p_expB','scanner.py',146),
  ('term -> factor termB','term',2,'p_term','scanner.py',150),
  ('termB -> / term','termB',2,'p_termB','scanner.py',153),
  ('termB -> * term','termB',2,'p_termB','scanner.py',154),
  ('termB -> empty','termB',1,'p_termB','scanner.py',155),
  ('factor -> signB constant','factor',2,'p_factor','scanner.py',161),
  ('factor -> ( superexpression )','factor',3,'p_factor','scanner.py',162),
  ('factor -> funccall','factor',1,'p_factor','scanner.py',163),
  ('factor -> ID dimensionB','factor',2,'p_factor','scanner.py',164),
  ('signB -> sign','signB',1,'p_signB','scanner.py',167),
  ('signB -> empty','signB',1,'p_signB','scanner.py',168),
  ('constant -> FCONST','constant',1,'p_constant','scanner.py',172),
  ('constant -> ICONST','constant',1,'p_constant','scanner.py',173),
  ('constant -> TRUE','constant',1,'p_constant','scanner.py',174),
  ('constant -> FALSE','constant',1,'p_constant','scanner.py',175),
  ('sign -> +','sign',1,'p_sign','scanner.py',179),
  ('sign -> -','sign',1,'p_sign','scanner.py',180),
  ('whileloop -> WHILE ( superexpression ) block','whileloop',5,'p_whileloop','scanner.py',184),
  ('type -> INT','type',1,'p_type','scanner.py',188),
  ('type -> FLOAT','type',1,'p_type','scanner.py',189),
  ('type -> STRING','type',1,'p_type','scanner.py',190),
  ('returntype -> VOID','returntype',1,'p_returntype','scanner.py',194),
  ('returntype -> type','returntype',1,'p_returntype','scanner.py',195),
  ('forloop -> FOR ( asign ; superexpression ; superexpression ) block','forloop',9,'p_forloop','scanner.py',199),
  ('input -> INPUT ( ID inputB )','input',5,'p_input','scanner.py',203),
  ('inputB -> , ID inputB','inputB',3,'p_inputB','scanner.py',206),
  ('inputB -> empty','inputB',1,'p_inputB','scanner.py',207),
  ('output -> PRINT ( outputB','output',3,'p_output','scanner.py',210),
  ('outputB -> STRING outputC','outputB',2,'p_outputB','scanner.py',213),
  ('outputB -> superexpression outputC','outputB',2,'p_outputB','scanner.py',214),
  ('outputC -> )','outputC',1,'p_outputC','scanner.py',217),
  ('outputC -> , outputB','outputC',2,'p_outputC','scanner.py',218),
  ('localvardirective -> # localvardirectiveB ID','localvardirective',3,'p_localvardirective','scanner.py',222),
  ('localvardirectiveB -> TRACK','localvardirectiveB',1,'p_localvardirectiveB','scanner.py',225),
  ('localvardirectiveB -> FORGET','localvardirectiveB',1,'p_localvardirectiveB','scanner.py',226),
  ('localmsgdirective -> # SHOW STRING','localmsgdirective',3,'p_localmsgdirective','scanner.py',230),
  ('localdecisiondirective -> # localdecisiondirectiveB DECISION','localdecisiondirective',3,'p_localdecisiondirective','scanner.py',234),
  ('localdecisiondirective -> empty','localdecisiondirective',1,'p_localdecisiondirective','scanner.py',235),
  ('localdecisiondirectiveB -> TRACK','localdecisiondirectiveB',1,'p_localdecisiondirectiveB','scanner.py',238),
  ('localdecisiondirectiveB -> FORGET','localdecisiondirectiveB',1,'p_localdecisiondirectiveB','scanner.py',239),
  ('funccall -> ID ( funccallB )','funccall',4,'p_funccall','scanner.py',243),
  ('funccallB -> superexpression funccallC','funccallB',2,'p_funccallB','scanner.py',246),
  ('funccallB -> empty','funccallB',1,'p_funccallB','scanner.py',247),
  ('funccallC -> , superexpression funccallC','funccallC',3,'p_funccallC','scanner.py',250),
  ('funccallC -> empty','funccallC',1,'p_funccallC','scanner.py',251),
  ('dimension -> [ superexpression ] dimensionB','dimension',4,'p_dimension','scanner.py',255),
  ('return -> RETURN superexpression','return',2,'p_return','scanner.py',259),
  ('params -> type ID paramsB','params',3,'p_params','scanner.py',263),
  ('paramsB -> , type ID paramsB','paramsB',4,'p_paramsB','scanner.py',266),
  ('paramsB -> empty','paramsB',1,'p_paramsB','scanner.py',267),
  ('empty -> <empty>','empty',0,'p_empty','scanner.py',270),
]
